var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AccountBalance.html",[0,0.292,1,2.423]],["body/classes/AccountBalance.html",[0,0.412,1,4.137,2,3.415,3,0.269,4,0.269,5,0.18,6,3.897,7,0.688,8,1.071,9,4.451,10,4.451,11,0.625,12,0.028,13,3.607,14,4.137,15,5.079,16,1.249,17,4.629,18,2.405,19,5.607,20,3.982,21,5.607,22,3.701,23,4.629,24,0.427,25,3.897,26,2.529,27,4.629,28,3.415,29,4.629,30,0.224,31,0.023,32,0.023]],["title/modules/AccountsModule.html",[33,0.678,34,1.964]],["body/modules/AccountsModule.html",[0,0.361,3,0.235,4,0.235,5,0.158,12,0.028,24,0.437,30,0.196,31,0.021,32,0.021,33,1.066,34,4.082,35,1.396,36,2.216,37,3.416,38,3.416,39,3.416,40,3.416,41,2.514,42,3.452,43,3.452,44,2.71,45,4.001,46,3.655,47,2.594,48,2.037,49,2.037,50,4.057,51,2.056,52,2.216,53,2.216,54,0.551,55,4.057,56,2.216,57,2.426,58,3.416,59,3.416,60,4.057,61,2.216,62,2.037]],["title/injectables/AccountsRestService.html",[45,1.964,63,0.292]],["body/injectables/AccountsRestService.html",[0,0.362,3,0.236,4,0.236,5,0.158,7,0.604,11,0.577,12,0.029,16,1.152,24,0.352,30,0.197,31,0.021,32,0.021,45,3.093,54,0.552,63,0.533,64,1.211,65,4.79,66,2.43,67,0.716,68,1.435,69,4.355,70,1.656,71,2.683,72,3.012,73,3.422,74,2.058,75,2.826,76,1.542,77,1.435,78,1.435,79,1.241,80,5.172,81,1.437,82,4.064,83,3.816,84,4.355,85,3.816,86,2.775,87,1.435,88,1.913,89,2.597,90,2.683,91,1.779,92,1.128,93,1.128,94,1.128,95,1.883,96,1.617,97,1.503,98,1.503,99,2.22,100,4.064,101,1.503,102,2.683,103,4.064,104,4.064,105,1.883,106,1.743,107,1.503]],["title/injectables/AccountsService.html",[46,1.794,63,0.292]],["body/injectables/AccountsService.html",[0,0.127,3,0.207,4,0.083,5,0.056,7,0.212,8,0.453,9,1.752,10,2.627,11,0.549,12,0.029,13,0.852,16,1.097,18,1.527,24,0.323,26,0.779,30,0.069,31,0.01,32,0.01,46,1.297,54,0.194,63,0.317,64,0.425,67,0.251,68,0.659,70,1.14,74,2.165,76,1.061,77,1.317,78,1.317,79,1.138,81,1.422,86,2.996,87,1.535,88,2.047,89,0.716,91,2.022,92,0.659,93,1.257,94,1.67,95,2.099,96,2.023,97,1.675,98,1.675,99,0.779,101,2.192,105,2.099,106,1.943,107,1.675,108,1.2,109,1.414,110,2.035,111,3.18,112,3.053,113,2.375,114,2.375,115,2.375,116,2.375,117,2.375,118,3.053,119,0.852,120,2.035,121,2.474,122,2.375,123,1.425,124,2.563,125,4.271,126,2.57,127,3.955,128,4.271,129,4.271,130,3.938,131,4.271,132,1.425,133,2.375,134,2.998,135,3.561,136,3.561,137,4.295,138,3.751,139,2.418,140,2.077,141,2.375,142,3.705,143,4.745,144,1.425,145,2.375,146,3.561,147,2.35,148,1.788,149,2.375,150,1.425,151,3.561,152,3.561,153,2.375,154,1.425,155,2.998,156,1.628,157,2.375,158,1.425,159,2.57,160,2.375,161,1.425,162,2.375,163,1.425,164,2.998,165,3.596,166,2.611,167,1.425,168,2.375,169,1.752,170,0.611,171,0.611,172,2.375,173,2.375,174,2.375,175,3.561,176,2.375,177,2.375,178,2.475,179,2.375,180,2.375,181,0.49,182,0.852,183,1.425,184,1.425,185,1.568,186,1.425,187,0.852,188,1.2,189,1.2,190,1.2,191,1.052,192,3.368,193,2.382,194,2.709,195,1.668,196,3.33,197,1.825,198,1.568,199,1.752,200,1.425,201,1.425,202,1.425,203,1.425,204,2.015,205,2.252,206,2.57,207,2.57,208,2.57,209,2.252,210,2.57,211,1.2,212,1.425,213,2.375,214,2.375,215,2.375,216,2.375,217,1.425,218,3.561,219,2.375,220,1.568,221,2,222,2.35,223,1.2,224,1.2,225,1.052,226,2.35,227,2.015,228,1.425,229,2.554,230,2.35,231,1.2,232,0.852,233,1.297,234,1.568,235,1.425,236,1.425,237,1.425,238,1.425,239,1.425,240,1.425,241,1.425,242,1.425,243,1.052,244,1.052,245,1.425,246,2,247,1.568,248,2.375,249,2,250,1.568,251,2.375,252,1.2,253,3.561,254,2.375,255,1.297,256,1.752,257,2.375,258,2.375,259,1.425,260,1.425,261,2.375,262,1.425]],["title/modules/ClientModule.html",[33,0.678,41,1.307]],["body/modules/ClientModule.html",[0,0.374,3,0.244,4,0.244,5,0.164,11,0.589,12,0.029,16,1.177,24,0.412,30,0.203,31,0.022,32,0.022,33,1.252,35,1.447,41,2.413,51,2.103,52,1.804,53,2.267,54,0.571,68,1.167,77,1.467,78,1.467,79,1.268,87,1.467,93,1.467,120,2.68,263,4.206,264,4.474,265,2.777,266,3.9,267,2.81,268,4.206,269,4.265,270,4.61,271,2.777,272,3.9,273,4.206,274,4.206,275,3.9,276,3.104,277,2.515,278,4.45,279,3.489,280,3.541,281,3.104,282,3.541,283,2.777,284,3.541]],["title/injectables/ClientService.html",[63,0.292,120,1.409]],["body/injectables/ClientService.html",[0,0.203,3,0.133,4,0.133,5,0.089,7,0.34,8,0.66,11,0.674,12,0.029,14,1.686,16,1.362,18,1.996,24,0.358,30,0.111,31,0.014,32,0.014,54,0.31,63,0.414,64,0.681,67,0.403,68,0.96,70,1.108,76,1.387,77,1.158,78,1.158,79,1.001,81,1.451,86,2.316,87,1.459,91,0.786,92,1.819,93,1.291,94,1.158,96,0.909,106,1.484,110,2.413,120,1.484,124,1.484,130,3.079,134,2.912,139,1.059,140,1.852,156,0.732,170,1.484,171,1.484,181,0.786,193,3.302,204,2.283,205,3.434,209,3.079,225,4.031,233,2.874,234,2.283,255,1.249,267,2.316,277,1.367,279,2.755,283,1.509,285,1.924,286,4.151,287,2.755,288,3.074,289,3.079,290,4.173,291,3.459,292,3.459,293,4.654,294,4.654,295,1.924,296,3.459,297,2.496,298,2.912,299,3.459,300,4.173,301,2.285,302,3.459,303,3.459,304,2.285,305,3.459,306,3.459,307,3.267,308,3.514,309,2.285,310,3.459,311,3.364,312,2.285,313,2.285,314,1.924,315,3.072,316,2.285,317,3.459,318,2.28,319,2.285,320,3.689,321,4.209,322,2.285,323,2.912,324,2.285,325,2.285,326,3.459,327,2.285,328,2.285,329,1.924,330,1.924,331,2.285,332,1.924,333,2.285,334,2.285,335,1.509,336,2.285,337,2.285,338,1.924,339,2.285,340,2.285,341,2.285,342,2.285,343,2.285,344,2.285,345,2.285,346,2.285,347,1.924,348,1.924,349,1.367,350,2.285,351,2.285,352,2.285,353,2.285,354,2.285,355,4.173,356,2.285,357,3.459,358,5.626,359,3.459,360,3.459,361,3.459,362,5.626,363,3.459,364,2.285,365,3.459,366,2.285,367,2.285,368,2.285,369,2.285,370,2.285,371,2.285,372,2.285,373,2.285,374,2.285,375,2.285,376,5.26,377,3.459,378,3.459,379,2.912,380,2.285]],["title/modules/HcsModule.html",[33,0.678,381,1.964]],["body/modules/HcsModule.html",[0,0.38,3,0.248,4,0.248,5,0.166,12,0.028,24,0.427,30,0.206,31,0.022,32,0.022,33,1.1,35,1.467,36,2.287,41,2.546,44,2.745,47,2.677,48,2.141,49,2.141,51,2.122,52,2.287,53,2.287,54,0.579,56,2.33,57,2.55,61,2.33,62,2.141,335,2.815,381,4.059,382,3.59,383,3.59,384,4.264,385,3.59,386,4.028,387,3.68,388,4.264,389,4.264]],["title/injectables/HcsRestService.html",[63,0.292,386,1.964]],["body/injectables/HcsRestService.html",[0,0.306,3,0.199,4,0.199,5,0.134,7,0.51,11,0.584,12,0.029,16,1.167,22,2.266,24,0.356,30,0.166,31,0.019,32,0.019,54,0.466,63,0.499,64,1.023,66,2.053,67,0.605,68,1.285,70,1.483,71,2.266,72,2.906,74,1.843,75,2.53,76,1.38,77,1.454,78,1.454,79,1.257,81,1.524,87,1.285,88,2.074,89,2.631,90,2.266,91,1.181,92,0.953,93,1.285,94,1.285,95,2.145,96,1.843,97,1.712,98,1.938,101,1.938,102,3.459,105,2.145,106,1.986,107,1.712,124,2.247,139,1.591,234,2.266,255,1.876,386,2.769,390,4.722,391,4.631,392,4.631,393,2.891,394,4.631,395,3.433,396,3.417,397,4.631,398,5.24,399,4.412,400,5.24,401,5.24,402,4.412,403,3.433,404,3.899,405,3.433,406,2.533,407,5.24,408,2.053,409,3.433,410,2.891,411,4.631,412,4.412,413,3.899,414,4.412,415,3.433,416,2.533,417,2.533,418,2.891,419,3.433,420,1.876,421,2.533,422,3.433]],["title/injectables/HcsService.html",[63,0.292,387,1.794]],["body/injectables/HcsService.html",[0,0.141,3,0.221,4,0.092,5,0.062,7,0.236,8,0.496,11,0.553,12,0.029,16,1.104,24,0.224,30,0.077,31,0.011,32,0.011,54,0.216,63,0.338,64,0.473,67,0.28,68,0.72,70,0.831,74,2.427,76,1.342,77,1.318,78,1.318,79,1.139,81,1.346,87,1.529,88,2.038,89,1.303,91,2.084,92,0.44,93,1.249,94,1.653,95,2.085,96,1.791,97,1.664,98,1.664,101,2.183,105,2.085,106,2.317,107,1.664,109,1.525,110,2.125,119,0.949,120,2.125,124,2.364,130,2.429,139,2.599,140,2.427,156,1.908,166,3.639,169,1.915,170,0.681,171,0.681,178,2.459,181,0.546,182,0.949,192,3.333,193,2.385,194,2.507,195,2.291,197,0.949,198,2.51,199,1.171,220,2.173,222,2.768,226,3.482,227,2.51,229,2.274,230,2.51,232,1.552,233,1.799,243,1.171,244,2.806,247,1.048,308,2.772,335,1.713,349,1.552,387,1.418,396,4.806,402,3.53,423,1.336,424,3.292,425,3.292,426,3.292,427,3.292,428,4.193,429,3.292,430,2.595,431,1.587,432,5.772,433,3.505,434,1.587,435,4.723,436,5.772,437,1.587,438,1.587,439,2.185,440,1.587,441,3.292,442,5.902,443,3.803,444,3.803,445,4.193,446,4.193,447,3.292,448,1.587,449,1.587,450,2.595,451,3.292,452,1.587,453,3.292,454,1.587,455,3.53,456,1.587,457,1.587,458,1.587,459,4.193,460,1.587,461,2.595,462,2.595,463,1.587,464,2.595,465,2.595,466,2.595,467,1.587,468,1.587,469,4.75,470,4.501,471,2.595,472,2.595,473,2.595,474,3.803,475,2.595,476,2.595,477,2.772,478,2.595,479,2.595,480,1.587,481,1.587,482,1.915,483,2.772,484,1.587,485,1.587,486,1.587,487,1.587,488,1.587,489,3.292,490,1.587,491,1.336,492,1.587,493,1.587,494,1.587,495,1.587,496,1.587,497,3.292,498,1.587,499,1.587,500,1.587,501,1.587,502,1.587,503,1.587,504,1.587]],["title/modules/HederaModule.html",[33,0.678,505,2.168]],["body/modules/HederaModule.html",[0,0.335,3,0.218,4,0.218,5,0.147,11,0.549,12,0.029,16,1.096,22,3.248,24,0.447,30,0.182,31,0.02,32,0.02,33,1.2,34,3.609,35,1.294,41,1.497,42,3.297,43,3.297,44,1.613,51,1.958,52,2.11,53,2.11,54,0.511,56,2.055,57,2.249,58,3.167,59,3.167,68,1.043,77,1.365,78,1.365,79,1.18,87,1.365,93,1.365,264,4.291,265,2.483,266,3.63,267,2.695,269,3.63,270,4.453,271,2.483,272,3.63,277,2.249,381,3.609,505,3.839,506,3.761,507,3.761,508,3.761,509,3.984,510,3.761,511,3.609,512,3.761,513,3.761,514,3.609,515,3.761,516,3.761,517,4.92,518,4.92,519,4.92,520,4.92,521,4.92]],["title/injectables/HederaService.html",[63,0.292,509,2.168]],["body/injectables/HederaService.html",[0,0.421,3,0.275,4,0.275,5,0.184,7,0.703,8,1.085,11,0.527,12,0.028,16,1.053,24,0.322,30,0.229,31,0.023,32,0.023,54,0.642,63,0.562,64,1.41,67,0.833,76,1.883,94,1.576,109,2.821,110,2.869,170,2.029,171,2.029,509,3.75,522,3.982,523,5.681,524,4.73]],["title/modules/HfsModule.html",[33,0.678,514,1.964]],["body/modules/HfsModule.html",[0,0.408,3,0.266,4,0.266,5,0.179,12,0.028,24,0.408,30,0.222,31,0.023,32,0.023,33,1.15,35,1.575,36,2.39,41,2.591,47,2.797,48,2.299,49,2.299,51,2.217,52,2.39,53,2.39,54,0.622,56,2.502,62,2.299,514,4.006,525,3.856,526,4.58,527,3.856,528,3.856,529,3.714,530,4.58,531,4.58]],["title/injectables/HfsService.html",[63,0.292,529,1.794]],["body/injectables/HfsService.html",[0,0.157,3,0.205,4,0.102,5,0.225,7,0.262,8,0.539,11,0.575,12,0.029,13,1.054,16,1.148,24,0.241,30,0.085,31,0.012,32,0.012,54,0.239,63,0.36,64,0.525,67,0.311,68,0.784,69,2.977,70,0.905,74,2.487,76,1.408,77,1.376,78,1.376,79,1.19,81,1.491,84,1.484,87,1.575,88,2.099,91,2.124,92,1.122,93,1.31,94,1.622,97,1.747,98,1.747,101,2.268,107,1.747,109,1.638,110,2.211,111,3.324,119,1.054,120,2.211,124,2.564,139,2.298,140,2.473,148,0.885,156,1.785,164,3.405,165,3.405,166,3.403,169,3.265,170,0.756,171,0.756,178,2.71,181,0.606,182,1.054,192,3.464,193,2.371,194,2.824,195,2.58,197,2.824,198,1.865,220,2.669,222,2.921,223,1.484,224,1.484,227,2.669,229,3.083,232,2.114,243,2.984,349,2.647,420,2.58,439,3.726,529,1.544,532,1.484,533,4.426,534,3.536,535,2.825,536,2.379,537,1.763,538,6.572,539,5.676,540,5.977,541,1.763,542,1.763,543,1.763,544,1.763,545,1.763,546,1.763,547,1.763,548,3.536,549,1.763,550,1.763,551,1.763,552,1.763,553,2.825,554,2.825,555,2.825,556,2.825,557,2.825,558,2.825,559,2.825,560,2.825,561,3.485,562,1.763,563,3.536,564,2.825,565,2.825,566,4.044,567,4.044,568,4.044,569,2.114,570,2.977,571,4.044,572,2.984,573,4.044,574,1.763,575,4.426,576,2.825,577,1.763,578,1.763,579,1.763]],["title/modules/HtsModule.html",[33,0.678,42,1.794]],["body/modules/HtsModule.html",[0,0.375,3,0.245,4,0.245,5,0.164,12,0.028,24,0.425,30,0.204,31,0.022,32,0.022,33,1.092,35,1.45,36,2.27,41,2.629,42,3.725,44,2.736,47,2.657,48,2.116,49,2.116,51,2.106,52,2.27,53,2.27,54,0.572,56,2.302,57,2.52,61,2.302,62,2.116,580,3.548,581,4.214,582,3.548,583,3.548,584,4.022,585,4.022,586,4.214,587,4.214,588,3.11]],["title/injectables/HtsRestService.html",[63,0.292,584,1.964]],["body/injectables/HtsRestService.html",[0,0.2,3,0.24,4,0.131,5,0.088,7,0.335,11,0.583,12,0.029,16,1.164,18,2.585,22,2.729,24,0.281,30,0.109,31,0.014,32,0.014,54,0.306,63,0.411,64,0.671,66,1.345,67,0.396,68,0.948,70,1.094,71,1.485,72,2.518,75,1.867,76,1.019,77,1.451,78,1.451,79,1.254,81,1.565,85,2.522,87,1.622,88,2.162,89,2.984,90,1.485,91,1.869,92,0.624,93,1.378,94,1.553,95,2.3,96,1.976,97,1.836,98,2.07,101,2.228,102,3.785,105,2.3,106,2.13,107,1.836,142,3.603,147,2.256,234,3.048,255,2.258,393,1.894,404,2.878,406,1.66,412,5.073,413,4.402,414,4.828,416,3.05,417,3.407,418,3.887,420,2.258,421,3.05,584,2.044,588,2.522,589,4.575,590,3.418,591,3.418,592,3.418,593,3.418,594,3.418,595,3.418,596,2.25,597,6.215,598,3.418,599,5.599,600,2.25,601,3.418,602,2.25,603,3.887,604,3.418,605,3.418,606,2.25,607,3.418,608,1.894,609,2.25,610,2.25,611,4.617,612,3.887,613,4.134,614,3.48,615,3.418,616,4.134,617,2.25,618,3.418,619,2.25,620,4.134,621,2.25,622,3.418,623,2.25,624,2.25,625,2.25]],["title/injectables/HtsService.html",[63,0.292,585,1.964]],["body/injectables/HtsService.html",[0,0.101,3,0.15,4,0.066,5,0.044,7,0.29,8,0.373,11,0.564,12,0.029,13,2.424,16,1.126,18,2.5,24,0.208,30,0.055,31,0.008,32,0.008,54,0.154,63,0.273,64,0.337,67,0.199,68,0.542,70,0.625,74,2.514,76,1.127,77,1.37,78,1.37,79,1.185,81,1.283,86,2.863,87,1.544,88,2.08,91,2.09,92,0.314,93,1.459,94,1.686,95,2.226,96,2.093,97,1.777,98,1.777,101,2.212,105,1.984,106,1.837,107,1.584,109,1.193,110,1.837,111,3.303,119,0.677,120,1.837,124,2.58,139,2.076,140,2.459,142,3.867,147,2.827,156,1.926,166,3.471,170,0.486,171,0.486,178,2.625,181,0.389,182,0.677,192,3.399,193,2.412,194,2.873,195,1.674,196,1.644,197,1.833,199,2.261,204,0.747,205,0.835,206,0.953,207,0.953,208,0.953,209,0.835,210,0.953,211,0.953,220,2.283,221,2.58,222,3.072,226,2.675,227,2.675,229,2.873,230,2.675,231,2.58,232,1.168,233,1.407,246,2.58,247,2.283,249,2.58,250,2.023,255,1.407,288,1.674,297,1.833,569,2.068,570,2.58,572,2.261,585,1.168,588,1.441,603,3.412,626,0.953,627,2.576,628,2.576,629,1.953,630,1.953,631,2.576,632,2.576,633,1.953,634,2.576,635,2.576,636,2.576,637,1.953,638,1.953,639,1.132,640,1.132,641,1.953,642,1.132,643,1.132,644,1.953,645,1.953,646,2.576,647,1.132,648,4.938,649,4.053,650,1.132,651,1.132,652,1.132,653,1.132,654,1.132,655,1.132,656,1.132,657,1.132,658,3.065,659,1.132,660,1.953,661,1.132,662,3.782,663,1.132,664,1.132,665,1.132,666,1.132,667,4.481,668,4.283,669,1.132,670,1.132,671,1.132,672,3.782,673,2.576,674,1.132,675,1.953,676,1.132,677,1.953,678,1.953,679,1.953,680,1.953,681,1.953,682,1.953,683,1.953,684,3.458,685,1.644,686,1.953,687,1.953,688,1.953,689,1.953,690,2.283,691,1.132,692,1.953,693,1.132,694,1.953,695,1.953,696,1.132,697,1.132,698,1.132,699,1.132,700,0.953,701,1.953,702,1.132,703,1.132,704,1.132,705,1.132,706,1.953,707,1.132,708,1.953,709,1.132,710,2.576,711,3.065,712,3.065,713,3.065,714,2.58,715,3.065,716,3.065,717,2.261,718,3.065,719,3.065,720,2.58,721,3.065,722,1.132,723,1.132,724,1.132,725,1.953,726,1.953,727,1.953,728,1.953,729,3.782,730,1.132,731,1.132,732,1.953,733,1.132,734,1.953,735,1.132,736,1.132,737,1.132,738,1.132,739,1.132,740,1.132,741,1.132,742,1.953,743,1.132,744,1.132,745,1.953,746,1.132,747,1.132,748,1.132]],["title/interfaces/IAccountBalance.html",[185,2.168,749,0.911]],["body/interfaces/IAccountBalance.html",[3,0.271,4,0.271,5,0.182,7,0.694,8,1.076,9,4.64,10,4.826,11,0.629,12,0.028,13,3.911,18,2.761,24,0.383,25,3.931,26,2.55,30,0.226,31,0.023,32,0.023,67,0.823,185,3.721,286,4.159,749,1.68,750,2.163,751,3.931,752,4.668]],["title/interfaces/IHederaOptions.html",[267,1.522,749,0.911]],["body/interfaces/IHederaOptions.html",[3,0.242,4,0.242,5,0.163,7,0.621,8,1.004,11,0.71,12,0.029,18,2.674,24,0.392,30,0.202,31,0.022,32,0.022,67,0.735,81,1.382,86,2.437,156,1.336,181,1.436,267,2.437,286,4.767,287,3.992,288,3.477,289,4.696,307,3.444,311,2.496,314,4.429,315,3.802,318,3.304,320,4.25,321,4.849,323,4.429,749,1.598,750,1.934,753,3.514,754,4.174,755,4.174]],["title/interfaces/IMirrorNode.html",[318,1.794,749,0.911]],["body/interfaces/IMirrorNode.html",[3,0.265,4,0.265,5,0.178,7,0.68,8,1.062,11,0.669,12,0.028,30,0.221,31,0.023,32,0.023,67,0.805,75,3.04,79,1.498,81,1.645,318,3.04,408,3.892,749,1.544,750,2.117,756,3.848,757,6.243,758,6.508,759,4.685,760,5.564]],["title/interfaces/IOperator.html",[311,1.964,749,0.911]],["body/interfaces/IOperator.html",[3,0.256,4,0.256,5,0.172,7,0.655,8,1.038,11,0.687,12,0.028,30,0.213,31,0.022,32,0.022,67,0.776,79,1.479,81,1.655,86,2.855,92,1.509,137,4.013,140,2.453,148,2.73,155,4.579,156,1.973,311,3.252,408,3.857,749,1.509,750,2.04,761,3.707,762,5.189]],["title/interfaces/IPrivateKeyList.html",[187,1.964,749,0.911]],["body/interfaces/IPrivateKeyList.html",[3,0.271,4,0.271,5,0.182,7,0.694,8,1.076,11,0.629,12,0.028,18,2.418,24,0.318,30,0.226,31,0.023,32,0.023,67,0.823,92,1.564,140,2.502,156,1.495,181,1.606,187,3.371,433,4.925,569,3.76,749,1.68,750,2.163,763,3.931,764,3.931,765,5.294,766,4.746]],["title/interfaces/ITokenBalance.html",[26,1.794,749,0.911]],["body/interfaces/ITokenBalance.html",[3,0.262,4,0.262,5,0.176,7,0.672,8,1.056,11,0.666,12,0.028,24,0.308,26,3.02,30,0.219,31,0.023,32,0.023,67,0.797,81,1.531,124,2.371,138,4.79,142,3.72,147,4.285,148,2.776,190,5.534,191,3.337,256,4.79,749,1.657,750,2.095,767,3.808]],["title/interfaces/ITransactionDetails.html",[690,2.168,749,0.911]],["body/interfaces/ITransactionDetails.html",[3,0.273,4,0.273,5,0.184,7,0.7,8,1.082,11,0.632,12,0.028,24,0.32,30,0.228,31,0.023,32,0.023,67,0.83,74,2.51,148,2.845,178,3.696,181,1.62,250,4.163,690,3.74,749,1.686,750,2.182,768,3.965,769,4.653]],["title/modules/KeysModule.html",[33,0.678,43,1.794]],["body/modules/KeysModule.html",[0,0.422,3,0.275,4,0.275,5,0.185,12,0.028,24,0.387,30,0.229,31,0.023,32,0.023,33,1.174,35,1.631,36,2.44,43,3.626,47,2.856,48,2.38,49,2.38,51,2.264,53,2.44,54,0.644,62,2.38,121,3.427,770,3.991,771,3.991,772,3.991,773,4.74,774,4.74]],["title/injectables/KeysService.html",[63,0.292,121,1.649]],["body/injectables/KeysService.html",[0,0.45,3,0.186,4,0.186,5,0.125,7,0.476,8,0.843,11,0.492,12,0.029,16,1.213,18,1.373,24,0.344,30,0.155,31,0.018,32,0.018,54,0.435,63,0.485,64,0.954,67,0.564,68,1.225,70,1.618,76,1.624,77,0.888,78,0.888,79,0.768,81,1.307,87,1.511,88,2.014,91,1.738,92,1.225,93,1.225,94,1.68,96,2.011,97,1.632,98,1.632,101,1.183,107,1.632,109,2.341,110,2.646,121,2.216,124,2.646,126,4.254,139,2.341,140,1.756,156,1.83,170,1.373,171,1.373,181,1.101,187,2.639,188,2.694,189,2.694,192,1.748,233,2.411,420,2.411,433,4.216,477,2.694,482,2.361,561,3.257,569,3.257,714,2.694,720,5.193,762,2.694,765,4.811,766,3.716,775,2.694,776,5.447,777,5.052,778,4.414,779,4.414,780,3.2,781,5.714,782,3.2,783,5.447,784,3.2,785,4.414,786,4.414,787,3.2,788,3.2,789,3.2,790,3.2,791,3.2,792,4.414,793,2.694,794,3.2,795,3.2,796,3.2,797,3.2]],["title/modules/RestModule.html",[33,0.678,44,1.409]],["body/modules/RestModule.html",[0,0.369,3,0.24,4,0.24,5,0.162,11,0.584,12,0.029,16,1.166,24,0.423,30,0.2,31,0.021,32,0.021,33,1.245,35,1.425,44,2.586,51,2.083,52,2.245,53,2.245,54,0.562,61,2.263,68,1.149,72,2.881,77,1.452,78,1.452,79,1.256,87,1.452,93,1.452,264,4.449,265,2.734,266,3.862,267,2.794,269,4.235,270,4.589,271,2.734,272,3.862,275,3.862,276,3.056,277,2.477,278,4.407,279,3.455,280,3.487,281,3.056,282,3.487,283,2.734,284,3.487,798,4.142,799,4.142,800,4.142,801,5.739,802,3.056]],["title/injectables/RestService.html",[63,0.292,72,1.522]],["body/injectables/RestService.html",[0,0.311,3,0.202,4,0.202,5,0.136,7,0.519,8,0.894,11,0.63,12,0.029,16,1.257,24,0.384,30,0.169,31,0.019,32,0.019,54,0.474,63,0.502,64,1.04,67,0.615,68,1.299,70,1.499,72,2.169,74,1.863,75,2.557,76,1.807,77,1.299,78,1.299,79,1.123,81,1.354,87,1.299,88,1.731,89,1.751,91,1.817,92,1.634,93,0.968,94,1.466,97,1.29,98,1.29,99,2.557,101,1.29,107,1.29,109,2.447,110,2.699,111,2.886,156,1.117,170,1.496,171,1.496,267,2.728,277,2.086,279,3.487,283,2.303,287,3.487,295,2.937,307,3.376,315,3.726,318,2.886,332,2.937,338,2.937,347,2.937,348,2.937,420,1.906,561,2.574,759,2.937,802,2.574,803,2.937,804,5.645,805,6.375,806,4.681,807,4.681,808,3.488,809,4.681,810,4.681,811,3.488,812,5.645,813,3.488,814,3.488,815,3.488,816,3.488,817,3.488,818,3.488,819,3.488]],["title/classes/TokenBalance.html",[0,0.292,20,2.168]],["body/classes/TokenBalance.html",[0,0.419,2,3.475,3,0.273,4,0.273,5,0.184,7,0.7,8,1.082,11,0.678,12,0.028,14,4.484,15,5.58,16,1.353,20,3.74,24,0.32,28,3.475,30,0.228,31,0.023,32,0.023,81,1.359,124,2.705,138,4.484,142,3.634,256,4.484,820,3.965,821,4.709,822,4.709,823,4.709]],["title/modules/TransactionsModule.html",[33,0.678,511,1.964]],["body/modules/TransactionsModule.html",[0,0.38,3,0.248,4,0.248,5,0.166,12,0.028,24,0.427,30,0.206,31,0.022,32,0.022,33,1.1,35,1.467,36,2.287,41,2.546,44,2.745,47,2.677,48,2.141,49,2.141,51,2.122,52,2.287,53,2.287,54,0.579,56,2.33,57,2.55,61,2.33,62,2.141,99,2.33,511,4.059,824,3.59,825,4.264,826,3.59,827,3.59,828,3.68,829,3.68,830,4.264,831,4.264]],["title/injectables/TransactionsRestService.html",[63,0.292,828,1.794]],["body/injectables/TransactionsRestService.html",[0,0.209,3,0.137,4,0.137,5,0.092,7,0.35,11,0.615,12,0.029,16,1.229,24,0.24,30,0.114,31,0.014,32,0.014,54,0.319,63,0.42,64,0.701,66,1.407,67,0.415,68,0.981,70,1.132,71,1.553,72,2.63,73,1.981,74,2.259,75,1.931,76,1.054,77,1.531,78,1.531,79,1.323,81,1.604,83,4.49,86,2.63,87,1.688,88,2.25,89,3.242,90,1.553,91,1.997,92,0.653,93,1.475,94,1.575,95,2.464,96,2.116,97,1.967,98,1.967,99,3.324,101,2.187,102,3.746,105,2.464,106,2.281,107,1.967,139,1.09,148,1.775,250,2.334,406,2.608,408,2.114,410,1.981,416,2.608,417,2.608,608,1.981,612,2.976,614,2.976,717,2.608,769,2.608,828,1.931,832,4.779,833,3.535,834,3.535,835,3.535,836,3.535,837,3.535,838,3.535,839,3.535,840,5.318,841,2.352,842,3.535,843,5.676,844,3.535,845,2.352,846,2.976,847,3.535,848,2.352,849,3.535,850,2.352,851,3.535,852,2.352,853,2.352,854,4.723,855,3.535,856,3.535,857,3.535,858,3.535,859,3.535,860,3.535,861,3.535,862,2.352,863,2.352,864,3.535,865,2.352,866,2.352,867,2.352]],["title/injectables/TransactionsService.html",[63,0.292,829,1.794]],["body/injectables/TransactionsService.html",[0,0.204,3,0.271,4,0.133,5,0.089,7,0.341,8,0.663,11,0.61,12,0.029,16,1.218,24,0.285,30,0.111,31,0.014,32,0.014,54,0.312,63,0.415,64,0.684,67,0.404,68,0.963,70,1.111,74,2.618,76,1.39,77,1.462,78,1.462,79,1.264,81,1.119,83,3.887,87,1.657,88,2.173,91,1.882,92,0.637,93,1.39,94,1.679,95,2.321,96,1.993,97,1.852,98,1.852,101,2.083,105,2.321,106,2.148,107,1.852,109,1.939,110,2.416,111,3.408,119,1.372,120,2.26,140,1.993,148,1.152,156,1.687,159,4.217,170,0.984,171,0.984,178,2.286,181,0.79,182,1.372,192,3.211,193,2.747,194,2.995,195,1.896,197,2.075,198,2.762,225,2.56,226,2.291,229,3.661,230,2.291,232,1.372,233,1.254,247,1.515,252,1.932,288,1.254,297,1.372,349,2.075,455,1.932,483,2.922,491,1.932,572,1.693,685,2.922,700,2.922,717,3.887,769,4.603,829,1.896,868,1.932,869,3.47,870,3.47,871,3.47,872,3.47,873,3.47,874,3.47,875,3.47,876,3.47,877,2.295,878,3.47,879,3.47,880,2.295,881,6.052,882,3.47,883,2.295,884,3.47,885,2.295,886,3.47,887,2.295,888,3.47,889,4.184,890,3.47,891,3.47,892,3.47,893,3.47,894,3.47,895,3.47,896,3.47,897,2.295,898,3.47,899,2.295,900,2.922,901,3.47,902,2.295,903,2.295,904,2.295,905,2.295,906,2.295,907,2.295]],["title/coverage.html",[908,3.783]],["body/coverage.html",[0,0.452,1,2.911,5,0.154,6,3.322,11,0.44,12,0.028,20,2.605,26,2.156,31,0.021,32,0.021,45,2.36,46,2.156,63,0.596,65,3.322,66,3.542,72,1.828,94,1.095,108,3.322,120,1.692,121,1.981,156,1.263,185,2.605,187,2.36,255,2.773,267,1.828,285,3.322,311,2.36,318,2.156,386,2.36,387,2.156,390,3.322,421,5.01,423,3.322,509,2.605,522,3.322,529,2.156,532,3.322,584,2.36,585,2.36,589,3.322,626,3.322,690,2.605,749,1.77,751,3.322,753,3.322,756,3.322,761,3.322,763,3.322,764,3.322,767,3.322,768,3.322,775,3.322,803,3.322,820,3.322,828,2.156,829,2.156,832,3.322,868,3.322,908,3.322,909,3.946,910,3.946,911,3.946,912,5.923,913,3.946,914,3.946,915,3.946,916,3.946,917,3.946,918,5.075,919,3.946,920,3.946,921,3.946,922,5.611,923,5.075,924,3.946,925,3.946,926,5.075,927,3.946,928,3.946,929,3.946,930,3.946]],["title/dependencies.html",[36,1.696,931,2.305]],["body/dependencies.html",[12,0.028,28,3.649,31,0.024,32,0.024,36,2.121,54,0.672,181,1.701,191,3.649,276,3.649,329,4.164,330,4.164,802,3.649,932,4.945,933,4.945,934,4.945,935,4.945,936,4.945,937,4.945,938,4.945,939,4.945,940,4.945,941,4.945,942,4.945,943,4.945,944,4.945,945,4.945,946,4.945,947,4.945]],["title/index.html",[7,0.407,900,2.305,948,2.738]],["body/index.html",[0,0.384,5,0.121,12,0.029,24,0.44,30,0.209,31,0.018,32,0.018,33,0.89,46,2.712,51,1.232,52,1.85,54,0.586,61,1.691,62,1.554,63,0.384,70,0.991,76,0.923,85,2.284,86,1.998,92,1.664,94,1.197,99,1.691,111,1.691,121,2.492,137,3.182,140,1.716,156,1.381,181,1.065,193,1.554,195,2.356,204,2.043,244,2.284,265,2.043,271,2.043,275,2.284,281,2.284,287,2.847,288,2.356,289,3.182,297,3.211,298,2.606,307,2.579,315,2.847,320,2.284,335,2.043,349,1.851,387,2.712,396,2.284,399,2.606,408,1.851,420,3.194,435,2.606,482,4.166,505,2.847,529,2.712,536,2.606,569,1.851,793,3.631,828,2.356,829,1.691,846,2.606,949,2.606,950,4.179,951,3.095,952,3.095,953,3.095,954,3.095,955,4.313,956,3.095,957,3.095,958,3.095,959,6.118,960,3.095,961,4.313,962,3.095,963,3.095,964,4.313,965,3.095,966,3.095,967,4.313,968,3.095,969,3.095,970,3.095,971,4.313,972,3.095,973,4.964,974,3.095,975,3.095,976,3.095,977,3.095,978,3.095,979,3.095,980,3.095,981,5.369,982,3.095,983,3.095,984,3.095,985,3.095,986,3.095,987,3.095,988,3.095,989,3.095,990,3.095,991,3.095,992,3.095,993,3.095,994,3.095,995,3.095,996,3.095,997,3.095,998,3.095,999,3.095,1000,3.095,1001,4.313,1002,3.095,1003,3.095,1004,3.095,1005,3.095,1006,3.095,1007,3.095,1008,3.095,1009,4.964,1010,5.846,1011,3.095,1012,3.095,1013,3.095,1014,3.095,1015,3.095,1016,3.095,1017,3.095,1018,3.095,1019,3.095,1020,3.095,1021,3.095,1022,3.095,1023,3.095]],["title/modules.html",[35,1.546]],["body/modules.html",[12,0.024,31,0.024,32,0.024,34,2.911,35,1.674,41,1.937,42,2.659,43,2.659,44,2.088,381,2.911,505,3.213,511,2.911,514,2.911,1024,6.604,1025,6.604,1026,6.604,1027,6.764,1028,6.164,1029,6.164]],["title/overview.html",[1030,3.783]],["body/overview.html",[2,2.578,12,0.028,31,0.019,32,0.019,34,3.994,35,1.202,36,2.01,37,2.942,38,2.942,39,2.942,40,2.942,41,2.506,42,3.634,43,3.313,44,2.601,45,3.704,46,3.384,47,2.352,48,1.754,49,1.754,64,1.042,121,3.11,379,2.942,381,3.915,382,2.942,383,2.942,385,2.942,386,3.704,387,3.384,511,3.915,514,3.704,525,2.942,527,2.942,528,2.942,529,3.384,580,2.942,582,2.942,583,2.942,584,3.704,585,3.704,750,1.619,770,2.942,771,2.942,772,2.942,824,2.942,826,2.942,827,2.942,828,3.384,829,3.384,1030,2.942,1031,3.494,1032,3.494,1033,3.494]],["title/properties.html",[8,0.755,931,2.305]],["body/properties.html",[8,0.949,12,0.028,31,0.024,32,0.024,67,0.875,288,2.714,297,3.498,307,2.971,949,5.234,950,4.183,1034,4.968,1035,4.968,1036,4.968,1037,4.968,1038,4.968,1039,4.968,1040,4.968,1041,4.968,1042,4.968,1043,4.968,1044,4.968,1045,4.968,1046,4.968,1047,4.968,1048,4.968,1049,4.968]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":255,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"coverage.html":{}}}],["0.0.7",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["0/3",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":234,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{}}}],["1).then(account",{"_index":999,"title":{},"body":{"index.html":{}}}],["1.0.21",{"_index":1035,"title":{},"body":{"properties.html":{}}}],["1.1.1",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":729,"title":{},"body":{"injectables/HtsService.html":{}}}],["10.3.1",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["10/10",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":421,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"coverage.html":{}}}],["1000",{"_index":859,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["13",{"_index":1031,"title":{},"body":{"overview.html":{}}}],["14/14",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":1032,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["2.18.1",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":377,"title":{},"body":{"injectables/ClientService.html":{}}}],["3",{"_index":376,"title":{},"body":{"injectables/ClientService.html":{}}}],["3/3",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["6.0.5",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["64",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1033,"title":{},"body":{"overview.html":{}}}],["7.5.5",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["8.4.5",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["8.4.6",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":379,"title":{},"body":{"injectables/ClientService.html":{},"overview.html":{}}}],["9/14",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["account",{"_index":137,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/IOperator.html":{},"index.html":{}}}],["account's",{"_index":200,"title":{},"body":{"injectables/AccountsService.html":{}}}],["account.accountid",{"_index":1006,"title":{},"body":{"index.html":{}}}],["account.key.tostring",{"_index":1002,"title":{},"body":{"index.html":{}}}],["accountbalance",{"_index":1,"title":{"classes/AccountBalance.html":{}},"body":{"classes/AccountBalance.html":{},"coverage.html":{}}}],["accountbalancequery",{"_index":173,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountcreatetransaction",{"_index":174,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountid",{"_index":86,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HtsService.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IOperator.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["accountid(nodeaccountid",{"_index":380,"title":{},"body":{"injectables/ClientService.html":{}}}],["accountinfo",{"_index":175,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfoquery",{"_index":176,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfos",{"_index":100,"title":{},"body":{"injectables/AccountsRestService.html":{}}}],["accounts",{"_index":60,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts.service",{"_index":55,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts/accounts.module",{"_index":516,"title":{},"body":{"modules/HederaModule.html":{}}}],["accountsmodule",{"_index":34,"title":{"modules/AccountsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["accountsrestservice",{"_index":45,"title":{"injectables/AccountsRestService.html":{}},"body":{"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"coverage.html":{},"overview.html":{}}}],["accountsservice",{"_index":46,"title":{"injectables/AccountsService.html":{}},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["accountupdatetransaction",{"_index":177,"title":{},"body":{"injectables/AccountsService.html":{}}}],["add",{"_index":962,"title":{},"body":{"index.html":{}}}],["addhbartransfer(from",{"_index":706,"title":{},"body":{"injectables/HtsService.html":{}}}],["addhbartransfer(swap.from",{"_index":738,"title":{},"body":{"injectables/HtsService.html":{}}}],["addhbartransfer(swap.to",{"_index":740,"title":{},"body":{"injectables/HtsService.html":{}}}],["addhbartransfer(to",{"_index":708,"title":{},"body":{"injectables/HtsService.html":{}}}],["addmetadata(buffer.from(cid",{"_index":696,"title":{},"body":{"injectables/HtsService.html":{}}}],["addnfttransfer(new",{"_index":748,"title":{},"body":{"injectables/HtsService.html":{}}}],["addtokentransfer(swap.token.id",{"_index":742,"title":{},"body":{"injectables/HtsService.html":{}}}],["addtokentransfer(token_id",{"_index":732,"title":{},"body":{"injectables/HtsService.html":{}}}],["addtokentransfer(tokenid",{"_index":728,"title":{},"body":{"injectables/HtsService.html":{}}}],["admin",{"_index":470,"title":{},"body":{"injectables/HcsService.html":{}}}],["adminkey",{"_index":436,"title":{},"body":{"injectables/HcsService.html":{}}}],["allow",{"_index":718,"title":{},"body":{"injectables/HtsService.html":{}}}],["amount",{"_index":668,"title":{},"body":{"injectables/HtsService.html":{}}}],["amount.tofixed(8",{"_index":707,"title":{},"body":{"injectables/HtsService.html":{}}}],["amount[index",{"_index":733,"title":{},"body":{"injectables/HtsService.html":{}}}],["api",{"_index":759,"title":{},"body":{"interfaces/IMirrorNode.html":{},"injectables/RestService.html":{}}}],["apikey",{"_index":757,"title":{},"body":{"interfaces/IMirrorNode.html":{}}}],["apiproperty",{"_index":15,"title":{},"body":{"classes/AccountBalance.html":{},"classes/TokenBalance.html":{}}}],["apiproperty({type",{"_index":19,"title":{},"body":{"classes/AccountBalance.html":{}}}],["app.controller",{"_index":972,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":966,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":974,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":971,"title":{},"body":{"index.html":{}}}],["append",{"_index":533,"title":{},"body":{"injectables/HfsService.html":{}}}],["append(fileid",{"_index":537,"title":{},"body":{"injectables/HfsService.html":{}}}],["appmodule",{"_index":964,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":973,"title":{},"body":{"index.html":{}}}],["array",{"_index":18,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{}}}],["array(length).keys()].foreach",{"_index":795,"title":{},"body":{"injectables/KeysService.html":{}}}],["array.isarray(amount",{"_index":726,"title":{},"body":{"injectables/HtsService.html":{}}}],["array.isarray(keys",{"_index":694,"title":{},"body":{"injectables/HtsService.html":{}}}],["array.isarray(supplykey",{"_index":697,"title":{},"body":{"injectables/HtsService.html":{}}}],["array.isarray(tokendecimals",{"_index":727,"title":{},"body":{"injectables/HtsService.html":{}}}],["array.isarray(tokenid",{"_index":725,"title":{},"body":{"injectables/HtsService.html":{}}}],["asc",{"_index":401,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["associate",{"_index":641,"title":{},"body":{"injectables/HtsService.html":{}}}],["associatetoken",{"_index":627,"title":{},"body":{"injectables/HtsService.html":{}}}],["associatetoken(accountid",{"_index":639,"title":{},"body":{"injectables/HtsService.html":{}}}],["async",{"_index":111,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["async(message",{"_index":1015,"title":{},"body":{"index.html":{}}}],["atomic",{"_index":644,"title":{},"body":{"injectables/HtsService.html":{}}}],["atomicswap",{"_index":628,"title":{},"body":{"injectables/HtsService.html":{}}}],["atomicswap(swaps",{"_index":642,"title":{},"body":{"injectables/HtsService.html":{}}}],["author",{"_index":1049,"title":{},"body":{"properties.html":{}}}],["available",{"_index":1029,"title":{},"body":{"modules.html":{}}}],["await",{"_index":101,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["axios",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["balance",{"_index":138,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/ITokenBalance.html":{},"classes/TokenBalance.html":{}}}],["boolean",{"_index":130,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{}}}],["break",{"_index":362,"title":{},"body":{"injectables/ClientService.html":{}}}],["browse",{"_index":1027,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1024,"title":{},"body":{"modules.html":{}}}],["bugs",{"_index":1041,"title":{},"body":{"properties.html":{}}}],["burn",{"_index":651,"title":{},"body":{"injectables/HtsService.html":{}}}],["burnnfttoken",{"_index":629,"title":{},"body":{"injectables/HtsService.html":{}}}],["burnnfttoken(tokenid",{"_index":647,"title":{},"body":{"injectables/HtsService.html":{}}}],["bypass",{"_index":334,"title":{},"body":{"injectables/ClientService.html":{}}}],["call",{"_index":804,"title":{},"body":{"injectables/RestService.html":{}}}],["call(`accounts/${accountid",{"_index":103,"title":{},"body":{"injectables/AccountsRestService.html":{}}}],["call(`accounts/${walletid}/nfts",{"_index":621,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`accounts/${walletid}/nfts?${next",{"_index":623,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`schedules/${transactionid",{"_index":867,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`tokens/${tokenid",{"_index":609,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances",{"_index":610,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?${next",{"_index":615,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?account.id=gt:${walletid",{"_index":625,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/nfts",{"_index":617,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/nfts?${next",{"_index":619,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`topics/${topicid}/messages?${next",{"_index":419,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["call(`topics/${topicid}/messages?order=desc",{"_index":405,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["call(`transactions/${transaction_id",{"_index":865,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid",{"_index":866,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&${next",{"_index":860,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&timestamp=gt:${timestamp",{"_index":853,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?timestamp=${timestamp",{"_index":863,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(endpoint",{"_index":807,"title":{},"body":{"injectables/RestService.html":{}}}],["call(url",{"_index":410,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["callback",{"_index":495,"title":{},"body":{"injectables/HcsService.html":{}}}],["callbackerror",{"_index":447,"title":{},"body":{"injectables/HcsService.html":{}}}],["callbackerror(message",{"_index":502,"title":{},"body":{"injectables/HcsService.html":{}}}],["callbacksuccess",{"_index":441,"title":{},"body":{"injectables/HcsService.html":{}}}],["callbacksuccess(message",{"_index":503,"title":{},"body":{"injectables/HcsService.html":{}}}],["calling",{"_index":983,"title":{},"body":{"index.html":{}}}],["case",{"_index":358,"title":{},"body":{"injectables/ClientService.html":{}}}],["catch",{"_index":105,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["catch(error",{"_index":420,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"index.html":{}}}],["choice",{"_index":323,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{}}}],["cid",{"_index":658,"title":{},"body":{"injectables/HtsService.html":{}}}],["class",{"_index":0,"title":{"classes/AccountBalance.html":{},"classes/TokenBalance.html":{}},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AccountBalance.html":{},"classes/TokenBalance.html":{},"overview.html":{}}}],["client",{"_index":193,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client.formainnet",{"_index":363,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.fornetwork(this.custom.node",{"_index":366,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.fornetwork(this.custom.node).setmirrornetwork(this.custom.mirror",{"_index":374,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.fortestnet",{"_index":359,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.service",{"_index":274,"title":{},"body":{"modules/ClientModule.html":{}}}],["client.setmirrornetwork(`mainnet",{"_index":364,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.setmirrornetwork(this.mirrornode.grpc",{"_index":361,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.setoperator(accountid",{"_index":375,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.setoperator(this.operator.accountid",{"_index":370,"title":{},"body":{"injectables/ClientService.html":{}}}],["client/client.module",{"_index":56,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["client/client.service",{"_index":182,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["clientmodule",{"_index":41,"title":{"modules/ClientModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["clientmodule.forroot(options",{"_index":517,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientmodule.forrootasync(options",{"_index":520,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientservice",{"_index":120,"title":{"injectables/ClientService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["cluster_accountsmodule",{"_index":37,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_exports",{"_index":38,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_imports",{"_index":40,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_providers",{"_index":39,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule",{"_index":382,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_exports",{"_index":385,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_imports",{"_index":384,"title":{},"body":{"modules/HcsModule.html":{}}}],["cluster_hcsmodule_providers",{"_index":383,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule",{"_index":525,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_exports",{"_index":527,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_imports",{"_index":526,"title":{},"body":{"modules/HfsModule.html":{}}}],["cluster_hfsmodule_providers",{"_index":528,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_htsmodule",{"_index":580,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_exports",{"_index":582,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_imports",{"_index":581,"title":{},"body":{"modules/HtsModule.html":{}}}],["cluster_htsmodule_providers",{"_index":583,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_keysmodule",{"_index":770,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_exports",{"_index":772,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_providers",{"_index":771,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule",{"_index":824,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_exports",{"_index":826,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_imports",{"_index":825,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["cluster_transactionsmodule_providers",{"_index":827,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["configmodule",{"_index":275,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["configservice",{"_index":981,"title":{},"body":{"index.html":{}}}],["configservice.get('network",{"_index":988,"title":{},"body":{"index.html":{}}}],["configservice.get(`mirrornode",{"_index":987,"title":{},"body":{"index.html":{}}}],["configservice.get>(`operators",{"_index":986,"title":{},"body":{"index.html":{}}}],["connect",{"_index":970,"title":{},"body":{"index.html":{}}}],["connection",{"_index":350,"title":{},"body":{"injectables/ClientService.html":{}}}],["consensus",{"_index":231,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["consensus_timestamp",{"_index":398,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["console.error(error",{"_index":1010,"title":{},"body":{"index.html":{}}}],["console.log(\"account",{"_index":1000,"title":{},"body":{"index.html":{}}}],["console.log(\"subscribed",{"_index":1019,"title":{},"body":{"index.html":{}}}],["console.log(hcsmessage",{"_index":1018,"title":{},"body":{"index.html":{}}}],["console.log(response",{"_index":1009,"title":{},"body":{"index.html":{}}}],["const",{"_index":192,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["constructor",{"_index":70,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["constructor(clientservice",{"_index":119,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["constructor(hederaoptions",{"_index":295,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["constructor(restservice",{"_index":71,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["content",{"_index":539,"title":{},"body":{"injectables/HfsService.html":{}}}],["contents",{"_index":548,"title":{},"body":{"injectables/HfsService.html":{}}}],["controllers",{"_index":62,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["coverage",{"_index":908,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":349,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["create(key",{"_index":542,"title":{},"body":{"injectables/HfsService.html":{}}}],["createaccount",{"_index":112,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createaccount(balance",{"_index":123,"title":{},"body":{"injectables/AccountsService.html":{}}}],["creates",{"_index":133,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createscheduledtransaction",{"_index":869,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createscheduledtransaction(transactiontoschedule",{"_index":876,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createtopic",{"_index":424,"title":{},"body":{"injectables/HcsService.html":{}}}],["createtopic(adminkey",{"_index":431,"title":{},"body":{"injectables/HcsService.html":{}}}],["creating",{"_index":195,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["currentadminkey",{"_index":459,"title":{},"body":{"injectables/HcsService.html":{}}}],["custom",{"_index":286,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{}}}],["decimal",{"_index":190,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/ITokenBalance.html":{}}}],["decimal(0",{"_index":261,"title":{},"body":{"injectables/AccountsService.html":{}}}],["decimal(response.tokendecimals?._map.get(tokenid",{"_index":257,"title":{},"body":{"injectables/AccountsService.html":{}}}],["decimal(response.tokens._map.get(tokenid)?.tostring",{"_index":254,"title":{},"body":{"injectables/AccountsService.html":{}}}],["decimal.js",{"_index":191,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/ITokenBalance.html":{},"dependencies.html":{}}}],["decimals",{"_index":256,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/ITokenBalance.html":{},"classes/TokenBalance.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/ClientService.html":{},"classes/TokenBalance.html":{}}}],["default",{"_index":170,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["delete",{"_index":439,"title":{},"body":{"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["delete(fileid",{"_index":544,"title":{},"body":{"injectables/HfsService.html":{}}}],["deletetopic",{"_index":425,"title":{},"body":{"injectables/HcsService.html":{}}}],["deletetopic(topicid",{"_index":437,"title":{},"body":{"injectables/HcsService.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":400,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["description",{"_index":67,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["dex",{"_index":1038,"title":{},"body":{"properties.html":{}}}],["disassociate",{"_index":654,"title":{},"body":{"injectables/HtsService.html":{}}}],["dissociatetoken",{"_index":630,"title":{},"body":{"injectables/HtsService.html":{}}}],["dissociatetoken(accountid",{"_index":652,"title":{},"body":{"injectables/HtsService.html":{}}}],["documentation",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["double",{"_index":485,"title":{},"body":{"injectables/HcsService.html":{}}}],["dynamicmodule",{"_index":270,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["emitter",{"_index":330,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["end",{"_index":446,"title":{},"body":{"injectables/HcsService.html":{}}}],["endpoint",{"_index":809,"title":{},"body":{"injectables/RestService.html":{}}}],["environment",{"_index":300,"title":{},"body":{"injectables/ClientService.html":{}}}],["error",{"_index":106,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["example",{"_index":992,"title":{},"body":{"index.html":{}}}],["execute",{"_index":478,"title":{},"body":{"injectables/HcsService.html":{}}}],["execute(client",{"_index":704,"title":{},"body":{"injectables/HtsService.html":{}}}],["executed",{"_index":488,"title":{},"body":{"injectables/HcsService.html":{}}}],["executing",{"_index":243,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["export",{"_index":30,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["exports",{"_index":53,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["false",{"_index":413,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{}}}],["fetch",{"_index":83,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["fetches",{"_index":151,"title":{},"body":{"injectables/AccountsService.html":{}}}],["fetching",{"_index":244,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["fileappendtransaction",{"_index":554,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecontentsquery",{"_index":555,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecreatetransaction",{"_index":556,"title":{},"body":{"injectables/HfsService.html":{}}}],["filedeletetransaction",{"_index":557,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileid",{"_index":538,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfo",{"_index":558,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfoquery",{"_index":559,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileupdatetransaction",{"_index":560,"title":{},"body":{"injectables/HfsService.html":{}}}],["filters",{"_index":840,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["finally",{"_index":479,"title":{},"body":{"injectables/HcsService.html":{}}}],["first",{"_index":965,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":265,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forroot(options",{"_index":266,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["forrootasync",{"_index":271,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forrootasync(options",{"_index":272,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["freezeaccount",{"_index":113,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezeaccount(accountid",{"_index":141,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezekey",{"_index":143,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezes",{"_index":145,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezewith(client",{"_index":247,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["freezing",{"_index":474,"title":{},"body":{"injectables/HcsService.html":{}}}],["function",{"_index":450,"title":{},"body":{"injectables/HcsService.html":{}}}],["generate",{"_index":781,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatecustomclient",{"_index":291,"title":{},"body":{"injectables/ClientService.html":{}}}],["generatecustomclient(accountid",{"_index":299,"title":{},"body":{"injectables/ClientService.html":{}}}],["generated",{"_index":1001,"title":{},"body":{"index.html":{}}}],["generatekey",{"_index":776,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist",{"_index":777,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist(publickeys",{"_index":782,"title":{},"body":{"injectables/KeysService.html":{}}}],["generating",{"_index":204,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HtsService.html":{},"index.html":{}}}],["getallholders",{"_index":590,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholders(tokenid",{"_index":595,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet",{"_index":591,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet(tokenid",{"_index":598,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallnftforholder",{"_index":592,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallnftforholder(walletid",{"_index":601,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallnftholders",{"_index":593,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallnftholders(tokenid",{"_index":605,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getalltransactions",{"_index":833,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactions(accountid",{"_index":839,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp",{"_index":834,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp(timestamp",{"_index":842,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getclient",{"_index":292,"title":{},"body":{"injectables/ClientService.html":{}}}],["getclient(ispublicmirror",{"_index":302,"title":{},"body":{"injectables/ClientService.html":{}}}],["getcontents",{"_index":534,"title":{},"body":{"injectables/HfsService.html":{}}}],["getcontents(fileid",{"_index":546,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfo",{"_index":114,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfo(accountid",{"_index":149,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfos",{"_index":69,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HfsService.html":{}}}],["getinfos(accountid",{"_index":80,"title":{},"body":{"injectables/AccountsRestService.html":{}}}],["getinfos(fileid",{"_index":549,"title":{},"body":{"injectables/HfsService.html":{}}}],["geting",{"_index":905,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getkeys",{"_index":115,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getkeys(accountid",{"_index":153,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getlatestmessages",{"_index":391,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["getlatestmessages(topicid",{"_index":394,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["getlatestmessagesfromtimestamp",{"_index":392,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["getlatestmessagesfromtimestamp(topicid",{"_index":397,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["getlatesttransactions",{"_index":835,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getlatesttransactions(accountid",{"_index":844,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getmessages",{"_index":426,"title":{},"body":{"injectables/HcsService.html":{}}}],["getmessages(topicid",{"_index":440,"title":{},"body":{"injectables/HcsService.html":{}}}],["getnftinfo",{"_index":631,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnftinfo(tokenid",{"_index":655,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnodeoperator",{"_index":293,"title":{},"body":{"injectables/ClientService.html":{}}}],["getquerybalance",{"_index":116,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getquerybalance(accountid",{"_index":157,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getrandomnodefornetwork",{"_index":294,"title":{},"body":{"injectables/ClientService.html":{}}}],["gets",{"_index":310,"title":{},"body":{"injectables/ClientService.html":{}}}],["getscheduledtransaction",{"_index":836,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtransaction(transactionid",{"_index":847,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtrasaction",{"_index":870,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getscheduledtrasaction(scheduleid",{"_index":879,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getting",{"_index":900,"title":{"index.html":{}},"body":{"injectables/TransactionsService.html":{}}}],["gettokeninfo",{"_index":594,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettokeninfo(tokenid",{"_index":607,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettransactionbyid",{"_index":837,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["gettransactionbyid(transaction_id",{"_index":849,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["gettransactionbytimestamp",{"_index":838,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["gettransactionbytimestamp(timestamp",{"_index":851,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["gettransactionquery",{"_index":871,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionquery(transactionid",{"_index":882,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt",{"_index":872,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt(transactionid",{"_index":884,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["git+https://github.com/hbarsuite/nestjs",{"_index":1047,"title":{},"body":{"properties.html":{}}}],["given",{"_index":85,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HtsRestService.html":{},"index.html":{}}}],["gives",{"_index":305,"title":{},"body":{"injectables/ClientService.html":{}}}],["global",{"_index":519,"title":{},"body":{"modules/HederaModule.html":{}}}],["graph",{"_index":1028,"title":{},"body":{"modules.html":{}}}],["grpc",{"_index":758,"title":{},"body":{"interfaces/IMirrorNode.html":{}}}],["hashgraph/sdk",{"_index":181,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITransactionDetails.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["hashgraph/sdk/lib/contract/contractcreateflow",{"_index":25,"title":{},"body":{"classes/AccountBalance.html":{},"interfaces/IAccountBalance.html":{}}}],["hbar",{"_index":13,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{}}}],["hbar(amount.tofixed(8",{"_index":709,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbar(balance.tofixed(8",{"_index":242,"title":{},"body":{"injectables/AccountsService.html":{}}}],["hbar(hbaramount.tofixed(8",{"_index":724,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbar(maxtransactionfee.tofixed(8",{"_index":568,"title":{},"body":{"injectables/HfsService.html":{}}}],["hbar(swap.amount.tofixed(8",{"_index":741,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbaramount",{"_index":673,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbaramount.tofixed(8",{"_index":723,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbars",{"_index":9,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/AccountsService.html":{},"interfaces/IAccountBalance.html":{}}}],["hcs",{"_index":335,"title":{},"body":{"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"index.html":{}}}],["hcs.service",{"_index":389,"title":{},"body":{"modules/HcsModule.html":{}}}],["hcs/hcs.module",{"_index":513,"title":{},"body":{"modules/HederaModule.html":{}}}],["hcsmessage",{"_index":1016,"title":{},"body":{"index.html":{}}}],["hcsmodule",{"_index":381,"title":{"modules/HcsModule.html":{}},"body":{"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["hcsrestservice",{"_index":386,"title":{"injectables/HcsRestService.html":{}},"body":{"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"coverage.html":{},"overview.html":{}}}],["hcsservice",{"_index":387,"title":{"injectables/HcsService.html":{}},"body":{"modules/HcsModule.html":{},"injectables/HcsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["headers",{"_index":812,"title":{},"body":{"injectables/RestService.html":{}}}],["hedera",{"_index":297,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["hedera.git",{"_index":1048,"title":{},"body":{"properties.html":{}}}],["hedera.service",{"_index":510,"title":{},"body":{"modules/HederaModule.html":{}}}],["hedera/issues",{"_index":1043,"title":{},"body":{"properties.html":{}}}],["hedera/lib",{"_index":975,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/accounts/accounts.service",{"_index":996,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hcs/hcs.service",{"_index":994,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hfs/hfs.service",{"_index":995,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/keys/keys.service",{"_index":993,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/transactions/transactions",{"_index":997,"title":{},"body":{"index.html":{}}}],["hederaimport",{"_index":963,"title":{},"body":{"index.html":{}}}],["hederainstead",{"_index":960,"title":{},"body":{"index.html":{}}}],["hederamodule",{"_index":505,"title":{"modules/HederaModule.html":{}},"body":{"modules/HederaModule.html":{},"index.html":{},"modules.html":{}}}],["hederamodule.forroot",{"_index":976,"title":{},"body":{"index.html":{}}}],["hederamodule.forrootasync",{"_index":984,"title":{},"body":{"index.html":{}}}],["hederaoptions",{"_index":279,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["hederaservice",{"_index":509,"title":{"injectables/HederaService.html":{}},"body":{"modules/HederaModule.html":{},"injectables/HederaService.html":{},"coverage.html":{}}}],["hfs",{"_index":536,"title":{},"body":{"injectables/HfsService.html":{},"index.html":{}}}],["hfs.service",{"_index":531,"title":{},"body":{"modules/HfsModule.html":{}}}],["hfs/hfs.module",{"_index":515,"title":{},"body":{"modules/HederaModule.html":{}}}],["hfsmodule",{"_index":514,"title":{"modules/HfsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules.html":{},"overview.html":{}}}],["hfsservice",{"_index":529,"title":{"injectables/HfsService.html":{}},"body":{"modules/HfsModule.html":{},"injectables/HfsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["holders",{"_index":597,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["holders.concat(response.balances",{"_index":611,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["holders.concat(response.nfts",{"_index":618,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["homepage",{"_index":1039,"title":{},"body":{"properties.html":{}}}],["hsuite",{"_index":949,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hsuite/nestjs",{"_index":959,"title":{},"body":{"index.html":{}}}],["hts",{"_index":588,"title":{},"body":{"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{}}}],["hts.service",{"_index":587,"title":{},"body":{"modules/HtsModule.html":{}}}],["hts/hts.module",{"_index":59,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["htsmodule",{"_index":42,"title":{"modules/HtsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules.html":{},"overview.html":{}}}],["htsrestservice",{"_index":584,"title":{"injectables/HtsRestService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"coverage.html":{},"overview.html":{}}}],["htsservice",{"_index":585,"title":{"injectables/HtsService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsService.html":{},"coverage.html":{},"overview.html":{}}}],["httpmodule",{"_index":801,"title":{},"body":{"modules/RestModule.html":{}}}],["https://github.com/hbarsuite/nestjs",{"_index":1042,"title":{},"body":{"properties.html":{}}}],["https://hsuite.finance",{"_index":1040,"title":{},"body":{"properties.html":{}}}],["https://mainnet",{"_index":979,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":805,"title":{},"body":{"injectables/RestService.html":{}}}],["iaccountbalance",{"_index":185,"title":{"interfaces/IAccountBalance.html":{}},"body":{"injectables/AccountsService.html":{},"interfaces/IAccountBalance.html":{},"coverage.html":{}}}],["id",{"_index":148,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"interfaces/IOperator.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["identifier",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["if(balance",{"_index":240,"title":{},"body":{"injectables/AccountsService.html":{}}}],["if(hbaramount",{"_index":722,"title":{},"body":{"injectables/HtsService.html":{}}}],["if(isofflinetransaction",{"_index":218,"title":{},"body":{"injectables/AccountsService.html":{}}}],["if(isreceiversignaturerequired",{"_index":215,"title":{},"body":{"injectables/AccountsService.html":{}}}],["if(keys",{"_index":693,"title":{},"body":{"injectables/HtsService.html":{}}}],["if(length",{"_index":794,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(maxautomatictokenassociations",{"_index":213,"title":{},"body":{"injectables/AccountsService.html":{}}}],["if(maxtransactionfee",{"_index":566,"title":{},"body":{"injectables/HfsService.html":{}}}],["if(memo",{"_index":564,"title":{},"body":{"injectables/HfsService.html":{}}}],["if(newkey",{"_index":576,"title":{},"body":{"injectables/HfsService.html":{}}}],["if(publickeys",{"_index":789,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(swap.token.id",{"_index":737,"title":{},"body":{"injectables/HtsService.html":{}}}],["if(this.mirrornode.apikey",{"_index":813,"title":{},"body":{"injectables/RestService.html":{}}}],["if(this.mirrornode.grpc",{"_index":360,"title":{},"body":{"injectables/ClientService.html":{}}}],["if(timeout",{"_index":613,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["ihederaoptions",{"_index":267,"title":{"interfaces/IHederaOptions.html":{}},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/IHederaOptions.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{}}}],["imirrornode",{"_index":318,"title":{"interfaces/IMirrorNode.html":{}},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"injectables/RestService.html":{},"coverage.html":{}}}],["import",{"_index":24,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["imported",{"_index":991,"title":{},"body":{"index.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AccountBalance.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["infos",{"_index":84,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HfsService.html":{}}}],["inject",{"_index":283,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["inject('hederaoptions",{"_index":338,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["injectable",{"_index":63,"title":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":64,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"overview.html":{}}}],["install",{"_index":958,"title":{},"body":{"index.html":{}}}],["installation",{"_index":954,"title":{},"body":{"index.html":{}}}],["interface",{"_index":749,"title":{"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{}},"body":{"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"coverage.html":{}}}],["interfaces",{"_index":750,"title":{},"body":{"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"overview.html":{}}}],["interfaces/token_balance.types",{"_index":27,"title":{},"body":{"classes/AccountBalance.html":{}}}],["invalid",{"_index":306,"title":{},"body":{"injectables/ClientService.html":{}}}],["ioperator",{"_index":311,"title":{"interfaces/IOperator.html":{}},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IOperator.html":{},"coverage.html":{}}}],["ioperators",{"_index":326,"title":{},"body":{"injectables/ClientService.html":{}}}],["iprivatekeylist",{"_index":187,"title":{"interfaces/IPrivateKeyList.html":{}},"body":{"injectables/AccountsService.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{},"coverage.html":{}}}],["isarray",{"_index":21,"title":{},"body":{"classes/AccountBalance.html":{}}}],["isc",{"_index":1045,"title":{},"body":{"properties.html":{}}}],["isofflinetransaction",{"_index":131,"title":{},"body":{"injectables/AccountsService.html":{}}}],["ispublicmirror",{"_index":308,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{}}}],["isreceiversignaturerequired",{"_index":129,"title":{},"body":{"injectables/AccountsService.html":{}}}],["itokenbalance",{"_index":26,"title":{"interfaces/ITokenBalance.html":{}},"body":{"classes/AccountBalance.html":{},"injectables/AccountsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/ITokenBalance.html":{},"coverage.html":{}}}],["itransactiondetails",{"_index":690,"title":{"interfaces/ITransactionDetails.html":{}},"body":{"injectables/HtsService.html":{},"interfaces/ITransactionDetails.html":{},"coverage.html":{}}}],["js",{"_index":951,"title":{},"body":{"index.html":{}}}],["json.parse(buffer.from(message.contents).tostring",{"_index":1017,"title":{},"body":{"index.html":{}}}],["key",{"_index":156,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["key).keylist",{"_index":238,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).publickey",{"_index":239,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).then(response",{"_index":1008,"title":{},"body":{"index.html":{}}}],["keylist",{"_index":433,"title":{},"body":{"injectables/HcsService.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{}}}],["keylist(publickeylist",{"_index":792,"title":{},"body":{"injectables/KeysService.html":{}}}],["keys",{"_index":569,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["keys.service",{"_index":774,"title":{},"body":{"modules/KeysModule.html":{}}}],["keys/keys.module",{"_index":58,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["keys/keys.service",{"_index":183,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keyservice",{"_index":779,"title":{},"body":{"injectables/KeysService.html":{}}}],["keyslength",{"_index":125,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keysmodule",{"_index":43,"title":{"modules/KeysModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules.html":{},"overview.html":{}}}],["keysservice",{"_index":121,"title":{"injectables/KeysService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["keysthreshold",{"_index":127,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keywords",{"_index":1036,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":846,"title":{},"body":{"injectables/TransactionsRestService.html":{},"index.html":{}}}],["length",{"_index":783,"title":{},"body":{"injectables/KeysService.html":{}}}],["license",{"_index":1044,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":402,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HcsService.html":{}}}],["list",{"_index":766,"title":{},"body":{"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{}}}],["list.types",{"_index":189,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["list.types.ts",{"_index":764,"title":{},"body":{"interfaces/IPrivateKeyList.html":{},"coverage.html":{}}}],["literal",{"_index":314,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{}}}],["lodash",{"_index":404,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{}}}],["lodash.get(response.links.next.split",{"_index":418,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{}}}],["logger",{"_index":110,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["logger(\"accounts",{"_index":172,"title":{},"body":{"injectables/AccountsService.html":{}}}],["logger(\"client",{"_index":317,"title":{},"body":{"injectables/ClientService.html":{}}}],["logger(\"hcs",{"_index":461,"title":{},"body":{"injectables/HcsService.html":{}}}],["logger(\"hedera",{"_index":523,"title":{},"body":{"injectables/HederaService.html":{}}}],["logger(\"hfs",{"_index":553,"title":{},"body":{"injectables/HfsService.html":{}}}],["logger(\"hts",{"_index":678,"title":{},"body":{"injectables/HtsService.html":{}}}],["logger(\"keys",{"_index":785,"title":{},"body":{"injectables/KeysService.html":{}}}],["logger(\"rest",{"_index":810,"title":{},"body":{"injectables/RestService.html":{}}}],["logger(\"transactions",{"_index":888,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["mainnet",{"_index":320,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"index.html":{}}}],["matching",{"_index":32,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.floor(math.random",{"_index":378,"title":{},"body":{"injectables/ClientService.html":{}}}],["maxautomatictokenassociations",{"_index":128,"title":{},"body":{"injectables/AccountsService.html":{}}}],["maxtransactionfee",{"_index":540,"title":{},"body":{"injectables/HfsService.html":{}}}],["mechanism",{"_index":721,"title":{},"body":{"injectables/HtsService.html":{}}}],["memo",{"_index":166,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["message",{"_index":442,"title":{},"body":{"injectables/HcsService.html":{}}}],["messages",{"_index":407,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["messages.concat(response.messages",{"_index":411,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["messages.length",{"_index":415,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["metadata",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":967,"title":{},"body":{"index.html":{}}}],["methods",{"_index":68,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["mint",{"_index":660,"title":{},"body":{"injectables/HtsService.html":{}}}],["mintnfttoken",{"_index":632,"title":{},"body":{"injectables/HtsService.html":{}}}],["mintnfttoken(tokenid",{"_index":657,"title":{},"body":{"injectables/HtsService.html":{}}}],["mirror",{"_index":315,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"injectables/RestService.html":{},"index.html":{}}}],["mirror.types",{"_index":754,"title":{},"body":{"interfaces/IHederaOptions.html":{}}}],["mirrornode",{"_index":287,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"injectables/RestService.html":{},"index.html":{}}}],["module",{"_index":33,"title":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["multi",{"_index":135,"title":{},"body":{"injectables/AccountsService.html":{}}}],["multisig",{"_index":719,"title":{},"body":{"injectables/HtsService.html":{}}}],["name",{"_index":78,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["need",{"_index":793,"title":{},"body":{"injectables/KeysService.html":{},"index.html":{}}}],["needed",{"_index":969,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":950,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":802,"title":{},"body":{"modules/RestModule.html":{},"injectables/RestService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":54,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/config",{"_index":276,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["nestjs/event",{"_index":329,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":28,"title":{},"body":{"classes/AccountBalance.html":{},"classes/TokenBalance.html":{},"dependencies.html":{}}}],["network",{"_index":288,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HtsService.html":{},"interfaces/IHederaOptions.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["new",{"_index":94,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["newkey",{"_index":165,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["next",{"_index":417,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["nextarray",{"_index":855,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.length).join",{"_index":858,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.slice(1",{"_index":857,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nft",{"_index":603,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/HtsService.html":{}}}],["nftid",{"_index":686,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftid(tokenid",{"_index":701,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftinfos",{"_index":702,"title":{},"body":{"injectables/HtsService.html":{}}}],["nfts",{"_index":620,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["nfts.concat(response.nfts",{"_index":622,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["node",{"_index":307,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"injectables/RestService.html":{},"index.html":{},"properties.html":{}}}],["nodeaccountid",{"_index":209,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HtsService.html":{}}}],["nodes",{"_index":337,"title":{},"body":{"injectables/ClientService.html":{}}}],["npm",{"_index":955,"title":{},"body":{"index.html":{}}}],["null",{"_index":233,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["number",{"_index":124,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/ITokenBalance.html":{},"injectables/KeysService.html":{},"classes/TokenBalance.html":{}}}],["number(+amount[index",{"_index":735,"title":{},"body":{"injectables/HtsService.html":{}}}],["number(amount",{"_index":730,"title":{},"body":{"injectables/HtsService.html":{}}}],["number(swap.amount",{"_index":747,"title":{},"body":{"injectables/HtsService.html":{}}}],["number(tokendecimals[index",{"_index":734,"title":{},"body":{"injectables/HtsService.html":{}}}],["offline",{"_index":207,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["once",{"_index":990,"title":{},"body":{"index.html":{}}}],["onevent",{"_index":328,"title":{},"body":{"injectables/ClientService.html":{}}}],["onevent('client.invalid_node_operator",{"_index":303,"title":{},"body":{"injectables/ClientService.html":{}}}],["operator",{"_index":225,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/TransactionsService.html":{}}}],["operator.types",{"_index":755,"title":{},"body":{"interfaces/IHederaOptions.html":{}}}],["operators",{"_index":289,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"index.html":{}}}],["optional",{"_index":79,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["options",{"_index":269,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["options.useexisting",{"_index":284,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["options.usefactory",{"_index":282,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["order",{"_index":399,"title":{},"body":{"injectables/HcsRestService.html":{},"index.html":{}}}],["otherwise",{"_index":477,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{}}}],["out",{"_index":49,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["overview",{"_index":1030,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":931,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":91,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["pass",{"_index":968,"title":{},"body":{"index.html":{}}}],["pause",{"_index":664,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausekey",{"_index":662,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken",{"_index":633,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken(tokenid",{"_index":661,"title":{},"body":{"injectables/HtsService.html":{}}}],["private",{"_index":92,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey",{"_index":140,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey.fromstring('your_private_key_here",{"_index":1021,"title":{},"body":{"index.html":{}}}],["privatekey.fromstring(account.key.tostring",{"_index":1007,"title":{},"body":{"index.html":{}}}],["privatekey.generateed25519",{"_index":786,"title":{},"body":{"injectables/KeysService.html":{}}}],["privatekeys",{"_index":765,"title":{},"body":{"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{}}}],["privatekeys.push(key",{"_index":796,"title":{},"body":{"injectables/KeysService.html":{}}}],["promise",{"_index":88,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async",{"_index":95,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async(resolve",{"_index":561,"title":{},"body":{"injectables/HfsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{}}}],["promise(resolve",{"_index":614,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["protect",{"_index":982,"title":{},"body":{"index.html":{}}}],["protected",{"_index":109,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["provide",{"_index":278,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["provided",{"_index":714,"title":{},"body":{"injectables/HtsService.html":{},"injectables/KeysService.html":{}}}],["providers",{"_index":51,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["public",{"_index":155,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/IOperator.html":{}}}],["public.mirrornode.hedera.com",{"_index":980,"title":{},"body":{"index.html":{}}}],["public.mirrornode.hedera.com:443",{"_index":365,"title":{},"body":{"injectables/ClientService.html":{}}}],["publickey",{"_index":762,"title":{},"body":{"interfaces/IOperator.html":{},"injectables/KeysService.html":{}}}],["publickeylist",{"_index":788,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(key.publickey",{"_index":797,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(publickey.fromstring(key",{"_index":791,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys",{"_index":126,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["publickeys.foreach(key",{"_index":790,"title":{},"body":{"injectables/KeysService.html":{}}}],["query",{"_index":159,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/TransactionsService.html":{}}}],["query.execute(client",{"_index":252,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/TransactionsService.html":{}}}],["random",{"_index":205,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HtsService.html":{}}}],["receipt",{"_index":229,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["receipt.accountid",{"_index":245,"title":{},"body":{"injectables/AccountsService.html":{}}}],["receipt.scheduleid",{"_index":906,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["receipt.status",{"_index":249,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["record",{"_index":875,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["reflect",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["reject",{"_index":97,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["reject(error",{"_index":107,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["related",{"_index":146,"title":{},"body":{"injectables/AccountsService.html":{}}}],["repository",{"_index":1046,"title":{},"body":{"properties.html":{}}}],["request",{"_index":228,"title":{},"body":{"injectables/AccountsService.html":{}}}],["requesting",{"_index":572,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["reset",{"_index":48,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["resetconnection",{"_index":336,"title":{},"body":{"injectables/ClientService.html":{}}}],["resolve",{"_index":96,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(accountinfo",{"_index":201,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(accountinfo.key",{"_index":203,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(accountinfos",{"_index":104,"title":{},"body":{"injectables/AccountsRestService.html":{}}}],["resolve(balance",{"_index":262,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(contents.tostring",{"_index":578,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(holders",{"_index":616,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["resolve(info",{"_index":491,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(infos",{"_index":579,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(key",{"_index":787,"title":{},"body":{"injectables/KeysService.html":{}}}],["resolve(messages",{"_index":422,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["resolve(nftinfos",{"_index":705,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(nfts",{"_index":624,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["resolve(receipt",{"_index":700,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.fileid",{"_index":574,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(receipt.status",{"_index":232,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.topicid",{"_index":480,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(receipt.topicsequencenumber?.tostring",{"_index":494,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(response",{"_index":406,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["resolve(response.transactions",{"_index":864,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["resolve(response?.data",{"_index":819,"title":{},"body":{"injectables/RestService.html":{}}}],["resolve(scheduleid",{"_index":907,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["resolve(subscription",{"_index":504,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(transaction",{"_index":221,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["resolve(transactions",{"_index":861,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["resolving",{"_index":199,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{}}}],["response",{"_index":89,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{}}}],["response.hbars",{"_index":258,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.links.next",{"_index":612,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["response.links.next.split",{"_index":856,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["response.tokens?._map.foreach((value",{"_index":259,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.tokens?._map.get(tokenid",{"_index":253,"title":{},"body":{"injectables/AccountsService.html":{}}}],["rest",{"_index":75,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"interfaces/IMirrorNode.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{}}}],["rest.service",{"_index":61,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["rest.service.ts",{"_index":66,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["rest.service.ts:116",{"_index":850,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:128",{"_index":602,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:134",{"_index":845,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:152",{"_index":848,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:172",{"_index":600,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:19",{"_index":395,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["rest.service.ts:23",{"_index":82,"title":{},"body":{"injectables/AccountsRestService.html":{}}}],["rest.service.ts:24",{"_index":608,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:32",{"_index":403,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["rest.service.ts:42",{"_index":596,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:59",{"_index":841,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:8",{"_index":73,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:85",{"_index":606,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:9",{"_index":393,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{}}}],["rest.service.ts:98",{"_index":852,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest/rest.module",{"_index":57,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["rest/rest.service",{"_index":90,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["restmodule",{"_index":44,"title":{"modules/RestModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["restmodule.forroot(options",{"_index":518,"title":{},"body":{"modules/HederaModule.html":{}}}],["restmodule.forrootasync(options",{"_index":521,"title":{},"body":{"modules/HederaModule.html":{}}}],["restservice",{"_index":72,"title":{"injectables/RestService.html":{}},"body":{"injectables/AccountsRestService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["results",{"_index":31,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retry",{"_index":412,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{}}}],["return",{"_index":93,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["returns",{"_index":87,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["run",{"_index":957,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["schedule",{"_index":901,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulecreatetransaction",{"_index":889,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduled",{"_index":717,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["scheduledtransaction",{"_index":902,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction.execute(client",{"_index":904,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleid",{"_index":881,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleinfoquery",{"_index":890,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulesigntransaction",{"_index":891,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["sdk",{"_index":952,"title":{},"body":{"index.html":{}}}],["sender",{"_index":711,"title":{},"body":{"injectables/HtsService.html":{}}}],["serialnumber",{"_index":648,"title":{},"body":{"injectables/HtsService.html":{}}}],["service",{"_index":76,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["setaccountid(accountid",{"_index":196,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["setcontents(content",{"_index":563,"title":{},"body":{"injectables/HfsService.html":{}}}],["setfileid(fileid",{"_index":575,"title":{},"body":{"injectables/HfsService.html":{}}}],["setincludechildren(true",{"_index":897,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setincludeduplicates(true",{"_index":896,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setkey(keyslength",{"_index":237,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkeys([key",{"_index":562,"title":{},"body":{"injectables/HfsService.html":{}}}],["setmessage(message",{"_index":492,"title":{},"body":{"injectables/HcsService.html":{}}}],["setmirrornetwork(\"mainnet",{"_index":373,"title":{},"body":{"injectables/ClientService.html":{}}}],["setmirrornetwork(this.custom.mirror",{"_index":367,"title":{},"body":{"injectables/ClientService.html":{}}}],["setnftid(nftid",{"_index":703,"title":{},"body":{"injectables/HtsService.html":{}}}],["setnodeaccountids([nodeaccountid",{"_index":211,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["setscheduledtransaction(transactiontoschedule",{"_index":903,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setscheduleid(scheduleid",{"_index":898,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setserials([serialnumber",{"_index":698,"title":{},"body":{"injectables/HtsService.html":{}}}],["settimeout(resolve",{"_index":416,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["setting",{"_index":469,"title":{},"body":{"injectables/HcsService.html":{}}}],["settokenid(tokenid",{"_index":246,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["settokenids([tokenid",{"_index":692,"title":{},"body":{"injectables/HtsService.html":{}}}],["settopicid(topicid",{"_index":489,"title":{},"body":{"injectables/HcsService.html":{}}}],["settransactionid(transactionid",{"_index":895,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["shall",{"_index":956,"title":{},"body":{"index.html":{}}}],["sig",{"_index":136,"title":{},"body":{"injectables/AccountsService.html":{}}}],["sign",{"_index":483,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["sign(key",{"_index":899,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signature",{"_index":208,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["signatureclient",{"_index":290,"title":{},"body":{"injectables/ClientService.html":{}}}],["signatures",{"_index":487,"title":{},"body":{"injectables/HcsService.html":{}}}],["signed",{"_index":475,"title":{},"body":{"injectables/HcsService.html":{}}}],["signing",{"_index":197,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["signkey",{"_index":164,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["signscheduledtransaction",{"_index":873,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signscheduledtransaction(scheduleid",{"_index":886,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signtx",{"_index":222,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.execute(client",{"_index":227,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.sign(adminkey",{"_index":486,"title":{},"body":{"injectables/HcsService.html":{}}}],["signtx.sign(newkey",{"_index":224,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["single",{"_index":134,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{}}}],["smart",{"_index":1037,"title":{},"body":{"properties.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["specific",{"_index":152,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts",{"_index":65,"title":{},"body":{"injectables/AccountsRestService.html":{},"coverage.html":{}}}],["src/hedera/accounts/accounts.module.ts",{"_index":50,"title":{},"body":{"modules/AccountsModule.html":{}}}],["src/hedera/accounts/accounts.service.ts",{"_index":108,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["src/hedera/accounts/accounts.service.ts:172",{"_index":132,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:245",{"_index":144,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:275",{"_index":161,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:304",{"_index":158,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:31",{"_index":122,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:48",{"_index":150,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:73",{"_index":154,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:95",{"_index":167,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/client/client.module.ts",{"_index":263,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:22",{"_index":273,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:8",{"_index":268,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.service.ts",{"_index":285,"title":{},"body":{"injectables/ClientService.html":{},"coverage.html":{}}}],["src/hedera/client/client.service.ts:106",{"_index":301,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:130",{"_index":309,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:134",{"_index":312,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:17",{"_index":313,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:19",{"_index":327,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:24",{"_index":324,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:29",{"_index":325,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:34",{"_index":322,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:36",{"_index":316,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:44",{"_index":319,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:49",{"_index":296,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:75",{"_index":304,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/hcs/hcs",{"_index":390,"title":{},"body":{"injectables/HcsRestService.html":{},"coverage.html":{}}}],["src/hedera/hcs/hcs.module.ts",{"_index":388,"title":{},"body":{"modules/HcsModule.html":{}}}],["src/hedera/hcs/hcs.service.ts",{"_index":423,"title":{},"body":{"injectables/HcsService.html":{},"coverage.html":{}}}],["src/hedera/hcs/hcs.service.ts:101",{"_index":460,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:158",{"_index":438,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:188",{"_index":457,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:211",{"_index":454,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:255",{"_index":449,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:29",{"_index":430,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:48",{"_index":434,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hedera.module.ts",{"_index":506,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:15",{"_index":507,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:44",{"_index":508,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.service.ts",{"_index":522,"title":{},"body":{"injectables/HederaService.html":{},"coverage.html":{}}}],["src/hedera/hedera.service.ts:12",{"_index":524,"title":{},"body":{"injectables/HederaService.html":{}}}],["src/hedera/hfs/hfs.module.ts",{"_index":530,"title":{},"body":{"modules/HfsModule.html":{}}}],["src/hedera/hfs/hfs.service.ts",{"_index":532,"title":{},"body":{"injectables/HfsService.html":{},"coverage.html":{}}}],["src/hedera/hfs/hfs.service.ts:135",{"_index":552,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:192",{"_index":545,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:230",{"_index":547,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:25",{"_index":535,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:255",{"_index":550,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:43",{"_index":543,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:90",{"_index":541,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hts/hts",{"_index":589,"title":{},"body":{"injectables/HtsRestService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.module.ts",{"_index":586,"title":{},"body":{"modules/HtsModule.html":{}}}],["src/hedera/hts/hts.service.ts",{"_index":626,"title":{},"body":{"injectables/HtsService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.service.ts:136",{"_index":663,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:161",{"_index":676,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:187",{"_index":659,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:234",{"_index":650,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:265",{"_index":656,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:294",{"_index":666,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:33",{"_index":638,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:354",{"_index":674,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:430",{"_index":643,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:495",{"_index":670,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:50",{"_index":640,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:97",{"_index":653,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/keys/keys.module.ts",{"_index":773,"title":{},"body":{"modules/KeysModule.html":{}}}],["src/hedera/keys/keys.service.ts",{"_index":775,"title":{},"body":{"injectables/KeysService.html":{},"coverage.html":{}}}],["src/hedera/keys/keys.service.ts:14",{"_index":778,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:27",{"_index":780,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:45",{"_index":784,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/rest/rest.module.ts",{"_index":798,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:24",{"_index":800,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:9",{"_index":799,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.service.ts",{"_index":803,"title":{},"body":{"injectables/RestService.html":{},"coverage.html":{}}}],["src/hedera/rest/rest.service.ts:16",{"_index":811,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:21",{"_index":806,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:42",{"_index":808,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/transactions/transactions",{"_index":832,"title":{},"body":{"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.module.ts",{"_index":830,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/hedera/transactions/transactions.service.ts",{"_index":868,"title":{},"body":{"injectables/TransactionsService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.service.ts:119",{"_index":877,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:148",{"_index":880,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:27",{"_index":874,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:43",{"_index":883,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:65",{"_index":885,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:89",{"_index":887,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/types/interfaces/account_balance.types.ts",{"_index":751,"title":{},"body":{"interfaces/IAccountBalance.html":{},"coverage.html":{}}}],["src/types/interfaces/hedera_options.types.ts",{"_index":753,"title":{},"body":{"interfaces/IHederaOptions.html":{},"coverage.html":{}}}],["src/types/interfaces/mirror.types.ts",{"_index":756,"title":{},"body":{"interfaces/IMirrorNode.html":{},"coverage.html":{}}}],["src/types/interfaces/operator.types.ts",{"_index":761,"title":{},"body":{"interfaces/IOperator.html":{},"coverage.html":{}}}],["src/types/interfaces/private",{"_index":763,"title":{},"body":{"interfaces/IPrivateKeyList.html":{},"coverage.html":{}}}],["src/types/interfaces/token_balance.types.ts",{"_index":767,"title":{},"body":{"interfaces/ITokenBalance.html":{},"coverage.html":{}}}],["src/types/interfaces/transaction_details.types.ts",{"_index":768,"title":{},"body":{"interfaces/ITransactionDetails.html":{},"coverage.html":{}}}],["src/types/models/account_balance.class.ts",{"_index":6,"title":{},"body":{"classes/AccountBalance.html":{},"coverage.html":{}}}],["src/types/models/account_balance.class.ts:11",{"_index":23,"title":{},"body":{"classes/AccountBalance.html":{}}}],["src/types/models/account_balance.class.ts:8",{"_index":17,"title":{},"body":{"classes/AccountBalance.html":{}}}],["src/types/models/token_balance.class.ts",{"_index":820,"title":{},"body":{"classes/TokenBalance.html":{},"coverage.html":{}}}],["src/types/models/token_balance.class.ts:11",{"_index":822,"title":{},"body":{"classes/TokenBalance.html":{}}}],["src/types/models/token_balance.class.ts:5",{"_index":823,"title":{},"body":{"classes/TokenBalance.html":{}}}],["src/types/models/token_balance.class.ts:8",{"_index":821,"title":{},"body":{"classes/TokenBalance.html":{}}}],["start",{"_index":445,"title":{},"body":{"injectables/HcsService.html":{}}}],["started",{"_index":948,"title":{"index.html":{}},"body":{}}],["statements",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":264,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["status",{"_index":178,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/ITransactionDetails.html":{},"injectables/TransactionsService.html":{}}}],["string",{"_index":81,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/ITokenBalance.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["submit",{"_index":455,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["submitkey",{"_index":432,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage",{"_index":427,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage(topicid",{"_index":452,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitting",{"_index":712,"title":{},"body":{"injectables/HtsService.html":{}}}],["submittx",{"_index":571,"title":{},"body":{"injectables/HfsService.html":{}}}],["submittx.getreceipt(client",{"_index":573,"title":{},"body":{"injectables/HfsService.html":{}}}],["subscribing",{"_index":1012,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":451,"title":{},"body":{"injectables/HcsService.html":{}}}],["subscriptionhandle",{"_index":468,"title":{},"body":{"injectables/HcsService.html":{}}}],["supplykey",{"_index":649,"title":{},"body":{"injectables/HtsService.html":{}}}],["support",{"_index":1025,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1026,"title":{},"body":{"modules.html":{}}}],["swap",{"_index":645,"title":{},"body":{"injectables/HtsService.html":{}}}],["swap.amount",{"_index":744,"title":{},"body":{"injectables/HtsService.html":{}}}],["swap.amount.tofixed(8",{"_index":739,"title":{},"body":{"injectables/HtsService.html":{}}}],["swap.from",{"_index":743,"title":{},"body":{"injectables/HtsService.html":{}}}],["swap.to",{"_index":746,"title":{},"body":{"injectables/HtsService.html":{}}}],["swap.token.decimals",{"_index":745,"title":{},"body":{"injectables/HtsService.html":{}}}],["swaps",{"_index":646,"title":{},"body":{"injectables/HtsService.html":{}}}],["swaps.foreach(swap",{"_index":736,"title":{},"body":{"injectables/HtsService.html":{}}}],["switch(environment",{"_index":372,"title":{},"body":{"injectables/ClientService.html":{}}}],["switch(this.network",{"_index":357,"title":{},"body":{"injectables/ClientService.html":{}}}],["table",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["temp",{"_index":333,"title":{},"body":{"injectables/ClientService.html":{}}}],["testnet",{"_index":321,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{}}}],["then((response",{"_index":1023,"title":{},"body":{"index.html":{}}}],["this.accountsservice.createaccount(1",{"_index":998,"title":{},"body":{"index.html":{}}}],["this.accountsservice.updateaccount",{"_index":1005,"title":{},"body":{"index.html":{}}}],["this.client",{"_index":351,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.clientservice.getclient",{"_index":194,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["this.clientservice.getclient(ispublicmirror",{"_index":496,"title":{},"body":{"injectables/HcsService.html":{}}}],["this.clientservice.getrandomnodefornetwork",{"_index":210,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["this.custom.mirror",{"_index":345,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.custom.node",{"_index":343,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.getclient",{"_index":352,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.getclient(true",{"_index":354,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.getinfo(accountid",{"_index":202,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.getnodeoperator",{"_index":356,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hcsservice.getmessages",{"_index":1013,"title":{},"body":{"index.html":{}}}],["this.hederaoptions.custom.mirror",{"_index":346,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hederaoptions.custom.node",{"_index":344,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hederaoptions.mirrornode",{"_index":348,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["this.hederaoptions.network",{"_index":340,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hederaoptions.operators",{"_index":342,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hfsservice.create",{"_index":1020,"title":{},"body":{"index.html":{}}}],["this.httpservice",{"_index":816,"title":{},"body":{"injectables/RestService.html":{}}}],["this.keysservice.generatekey",{"_index":236,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.keysservice.generatekey().then(key",{"_index":1003,"title":{},"body":{"index.html":{}}}],["this.keysservice.generatekeylist(publickeys",{"_index":235,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.mirrornode",{"_index":347,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["this.mirrornode.apikey",{"_index":815,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.url}/api/v1/${endpoint",{"_index":817,"title":{},"body":{"injectables/RestService.html":{}}}],["this.network",{"_index":339,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator",{"_index":355,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator.privatekey",{"_index":371,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators",{"_index":341,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators.length",{"_index":369,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators[math.floor(math.random",{"_index":368,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.restservice",{"_index":102,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["this.signatureclient",{"_index":353,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.transactionsservice.getlatesttransactions('your_account_id_here').then(response",{"_index":1011,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":720,"title":{},"body":{"injectables/HtsService.html":{},"injectables/KeysService.html":{}}}],["timeout",{"_index":414,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{}}}],["timestamp",{"_index":843,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["token",{"_index":147,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/ITokenBalance.html":{}}}],["token_balance.class",{"_index":29,"title":{},"body":{"classes/AccountBalance.html":{}}}],["token_balance.types",{"_index":752,"title":{},"body":{"interfaces/IAccountBalance.html":{}}}],["tokenassociatetransaction",{"_index":679,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenbalance",{"_index":20,"title":{"classes/TokenBalance.html":{}},"body":{"classes/AccountBalance.html":{},"classes/TokenBalance.html":{},"coverage.html":{}}}],["tokenburntransaction",{"_index":689,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokendecimals",{"_index":672,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokendissociatetransaction",{"_index":683,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenfreezetransaction",{"_index":179,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenid",{"_index":142,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/ITokenBalance.html":{},"classes/TokenBalance.html":{}}}],["tokenid.foreach((token_id",{"_index":731,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenminttransaction",{"_index":680,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfo",{"_index":688,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfoquery",{"_index":687,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenpausetransaction",{"_index":681,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokens",{"_index":10,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/AccountsService.html":{},"interfaces/IAccountBalance.html":{}}}],["tokens.push",{"_index":260,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunfreezetransaction",{"_index":180,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunpausetransaction",{"_index":682,"title":{},"body":{"injectables/HtsService.html":{}}}],["topic",{"_index":435,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topiccreatetransaction",{"_index":462,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicdeletetransaction",{"_index":464,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicid",{"_index":396,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"index.html":{}}}],["topicid.fromstring('your_hcs_topic_id_here",{"_index":1014,"title":{},"body":{"index.html":{}}}],["topicinfo",{"_index":428,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfo(topicid",{"_index":456,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery",{"_index":467,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery().settopicid(topicid",{"_index":490,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessage",{"_index":443,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessage,error",{"_index":448,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagequery",{"_index":466,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagesubmittransaction",{"_index":465,"title":{},"body":{"injectables/HcsService.html":{}}}],["topics/${topicid}/messages?order=${order}&timestamp=gte:${consensus_timestamp",{"_index":409,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["topicupdatetransaction",{"_index":463,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction().settopicid(topicid",{"_index":481,"title":{},"body":{"injectables/HcsService.html":{}}}],["topromise",{"_index":818,"title":{},"body":{"injectables/RestService.html":{}}}],["transaction",{"_index":74,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/ITransactionDetails.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.execute(client",{"_index":198,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.freezewith(client",{"_index":220,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.setaccountmemo(memo",{"_index":212,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setadminkey(adminkey",{"_index":471,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setendtime(end",{"_index":499,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setfilememo(memo",{"_index":565,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setinitialbalance(new",{"_index":241,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setkey(newkey",{"_index":217,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setkeys([newkey",{"_index":577,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setlimit(limit",{"_index":500,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setmaxautomatictokenassociations(maxautomatictokenassociations",{"_index":214,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setmaxtransactionfee(new",{"_index":567,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setnodeaccountids([nodeaccountid",{"_index":219,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setreceiversignaturerequired(true",{"_index":216,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setstarttime(start",{"_index":498,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setsubmitkey(submitkey",{"_index":472,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settopicmemo(memo",{"_index":473,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settransactionmemo(memo",{"_index":710,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(adminkey",{"_index":476,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(currentadminkey",{"_index":484,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(key",{"_index":570,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.sign(pausekey",{"_index":695,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(privatekey.fromstring(freezekey",{"_index":248,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.sign(signkey",{"_index":223,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["transaction.sign(submitkey",{"_index":493,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(supplykey",{"_index":699,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.subscribe",{"_index":501,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction_id",{"_index":250,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/ITransactionDetails.html":{},"injectables/TransactionsRestService.html":{}}}],["transactionid",{"_index":769,"title":{},"body":{"interfaces/ITransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceipt",{"_index":685,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceiptquery",{"_index":892,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionrecordquery",{"_index":893,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionresponse",{"_index":894,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactions",{"_index":99,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["transactions.concat(response.transactions",{"_index":854,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions.service",{"_index":831,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["transactions/?account.id=${accountid",{"_index":862,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions/transactions.module",{"_index":512,"title":{},"body":{"modules/HederaModule.html":{}}}],["transactionsmodule",{"_index":511,"title":{"modules/TransactionsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["transactionsrestservice",{"_index":828,"title":{"injectables/TransactionsRestService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactionsservice",{"_index":829,"title":{"injectables/TransactionsService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactiontoschedule",{"_index":878,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transasction",{"_index":715,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfer",{"_index":667,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar",{"_index":634,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar(amount",{"_index":665,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken",{"_index":635,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken(tokenid",{"_index":669,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken",{"_index":636,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken(tokenid",{"_index":671,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertransaction",{"_index":684,"title":{},"body":{"injectables/HtsService.html":{}}}],["true",{"_index":22,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/HcsRestService.html":{},"modules/HederaModule.html":{},"injectables/HtsRestService.html":{}}}],["try",{"_index":98,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse",{"_index":226,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.getreceipt(client",{"_index":230,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.transactionid",{"_index":713,"title":{},"body":{"injectables/HtsService.html":{}}}],["txresponse.transactionid.tostring",{"_index":251,"title":{},"body":{"injectables/AccountsService.html":{}}}],["type",{"_index":11,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["types/interfaces/account_balance.types",{"_index":186,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/interfaces/hedera_options.types",{"_index":277,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/interfaces/mirror.types",{"_index":332,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["types/interfaces/operator.types",{"_index":331,"title":{},"body":{"injectables/ClientService.html":{}}}],["types/interfaces/private",{"_index":188,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["types/interfaces/token_balance.types",{"_index":184,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/interfaces/transaction_details.types",{"_index":691,"title":{},"body":{"injectables/HtsService.html":{}}}],["uint8array",{"_index":453,"title":{},"body":{"injectables/HcsService.html":{}}}],["ulr",{"_index":760,"title":{},"body":{"interfaces/IMirrorNode.html":{}}}],["undefined",{"_index":497,"title":{},"body":{"injectables/HcsService.html":{}}}],["unfreezeaccount",{"_index":117,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezeaccount(accountid",{"_index":160,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezes",{"_index":162,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unpause",{"_index":677,"title":{},"body":{"injectables/HtsService.html":{}}}],["unpausetoken",{"_index":637,"title":{},"body":{"injectables/HtsService.html":{}}}],["unpausetoken(tokenid",{"_index":675,"title":{},"body":{"injectables/HtsService.html":{}}}],["update",{"_index":169,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["update(fileid",{"_index":551,"title":{},"body":{"injectables/HfsService.html":{}}}],["updateaccount",{"_index":118,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updateaccount(accountid",{"_index":163,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updates",{"_index":168,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updatetopic",{"_index":429,"title":{},"body":{"injectables/HcsService.html":{}}}],["updatetopic(topicid",{"_index":458,"title":{},"body":{"injectables/HcsService.html":{}}}],["updating",{"_index":1004,"title":{},"body":{"index.html":{}}}],["url",{"_index":408,"title":{},"body":{"injectables/HcsRestService.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["usage",{"_index":989,"title":{},"body":{"index.html":{}}}],["use",{"_index":482,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["useexisting",{"_index":985,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":281,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["usevalue",{"_index":280,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["value",{"_index":171,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["variables",{"_index":298,"title":{},"body":{"injectables/ClientService.html":{},"index.html":{}}}],["version",{"_index":1034,"title":{},"body":{"properties.html":{}}}],["void",{"_index":444,"title":{},"body":{"injectables/HcsService.html":{}}}],["wallet",{"_index":604,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["walletid",{"_index":599,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["workound",{"_index":206,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["wrapped",{"_index":716,"title":{},"body":{"injectables/HtsService.html":{}}}],["wrapper",{"_index":953,"title":{},"body":{"index.html":{}}}],["x",{"_index":814,"title":{},"body":{"injectables/RestService.html":{}}}],["yarn",{"_index":961,"title":{},"body":{"index.html":{}}}],["yes",{"_index":139,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsRestService.html":{}}}],["your_content_here",{"_index":1022,"title":{},"body":{"index.html":{}}}],["your_operator_account_id",{"_index":977,"title":{},"body":{"index.html":{}}}],["your_operator_private_key",{"_index":978,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":47,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AccountBalance.html":{"url":"classes/AccountBalance.html","title":"class - AccountBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccountBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/models/account_balance.class.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hbars\n                            \n                            \n                                tokens\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        hbars\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Hbar\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/types/models/account_balance.class.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: TokenBalance, isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/types/models/account_balance.class.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Hbar } from \"@hashgraph/sdk/lib/contract/ContractCreateFlow\";\nimport { ITokenBalance } from \"../interfaces/token_balance.types\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { TokenBalance } from \"./token_balance.class\";\n\nexport class AccountBalance {\n  @ApiProperty()\n  hbars: Hbar\n\n  @ApiProperty({type: TokenBalance, isArray: true})\n  tokens: Array  \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountsModule.html":{"url":"modules/AccountsModule.html","title":"module - AccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AccountsModule_imports\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHtsModule\n\nHtsModule\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\n\n\nAccountsRestService \n\nAccountsRestService \n\nAccountsRestService  -->\n\nAccountsModule->AccountsRestService \n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsRestService\n\nAccountsRestService\n\nAccountsModule -->\n\nAccountsRestService->AccountsModule\n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/accounts/accounts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsRestService\n                        \n                        \n                            AccountsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            HtsModule\n                        \n                        \n                            KeysModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountsRestService\n                        \n                        \n                            AccountsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\nimport { KeysModule } from '../keys/keys.module';\nimport { HtsModule } from '../hts/hts.module';\nimport { AccountsRestService } from './accounts-rest.service';\n\n@Module({\n  imports: [ClientModule, RestModule, KeysModule, HtsModule],\n  controllers: [],\n  providers: [AccountsService, AccountsRestService],\n  exports: [AccountsService, AccountsRestService]\n})\nexport class AccountsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsRestService.html":{"url":"injectables/AccountsRestService.html","title":"injectable - AccountsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/accounts/accounts-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getInfos\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/accounts/accounts-rest.service.ts:8\n                            \n                        \n\n                \n                    \n                            Transaction Rest Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getInfos\n                        \n                    \n                \n            \n            \n                \ngetInfos(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts-rest.service.ts:23\n                \n            \n\n\n            \n                \n                    Fetch infos for a given AccountId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class AccountsRestService {\n\n  /**\n   * Transaction Rest Service\n   * @param {RestService} restService \n   */\n  constructor(\n    private restService: RestService\n  ) { }\n\n  /**\n   * Fetch infos for a given AccountId\n   * @param {string} accountId \n   * @returns {any} response\n   */\n  getInfos(accountId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transactions: any = [];\n\n        let accountInfos = await this.restService\n          .call(`accounts/${accountId}`);\n\n        resolve(accountInfos);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsService.html":{"url":"injectables/AccountsService.html","title":"injectable - AccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/accounts/accounts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                freezeAccount\n                            \n                            \n                                    Async\n                                getInfo\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                getQueryBalance\n                            \n                            \n                                    Async\n                                unfreezeAccount\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService, keysService: KeysService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/accounts/accounts.service.ts:31\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keysService\n                                                  \n                                                        \n                                                                        KeysService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(balance: number, keysLength: number, publicKeys?: Array, keysThreshold?: number, maxAutomaticTokenAssociations?: number, isReceiverSignatureRequired?: boolean, isOfflineTransaction?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:172\n                \n            \n\n\n            \n                \n                    Creates a single or multi-sig account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    balance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keysLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    publicKeys\n                                    \n                                            Array\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    keysThreshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxAutomaticTokenAssociations\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    isReceiverSignatureRequired\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    isOfflineTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        , PrivateKey} single or multi-sig account\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        freezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:245\n                \n            \n\n\n            \n                \n                    Freezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:48\n                \n            \n\n\n            \n                \n                    Fetches specific Account Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:73\n                \n            \n\n\n            \n                \n                    Fetches Specific account public key\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Public Key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getQueryBalance\n                        \n                    \n                \n            \n            \n                \ngetQueryBalance(accountId: string | AccountId, tokenId?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:304\n                \n            \n\n\n            \n                \n                    Get query balance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            string | AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfreezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:275\n                \n            \n\n\n            \n                \n                    Unfreezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(accountId: AccountId, signKey: PrivateKey, newKey?: PrivateKey, memo?: string, maxAutomaticTokenAssociations?: number, isReceiverSignatureRequired?: boolean, isOfflineTransaction?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:95\n                \n            \n\n\n            \n                \n                    Updates Account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxAutomaticTokenAssociations\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    isReceiverSignatureRequired\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    isOfflineTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Update\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Accounts Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/accounts/accounts.service.ts:31\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  AccountBalanceQuery,\n  AccountCreateTransaction,\n  AccountId,\n  AccountInfo,\n  AccountInfoQuery,\n  AccountUpdateTransaction,\n  Hbar,\n  PrivateKey,\n  Status,\n  TokenFreezeTransaction,\n  TokenId,\n  TokenUnfreezeTransaction\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { KeysService } from '../keys/keys.service';\nimport { ITokenBalance } from '../../types/interfaces/token_balance.types';\nimport { IAccountBalance } from '../../types/interfaces/account_balance.types';\nimport { IPrivateKeyList } from '../../types/interfaces/private-key-list.types';\nimport { Decimal } from 'decimal.js';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class AccountsService {\n  /**\n  * Logger Service\n  */\n  protected logger: Logger = new Logger(\"Accounts Service\");\n\n  /**\n   * Constructor\n   * @param {ClientService} clientService \n   * @param {KeysService} keysService \n   */\n  constructor(\n    private clientService: ClientService,\n    private keysService: KeysService\n  ) { }\n\n  /**\n   * Fetches specific Account Info\n   * @param {AccountId} accountId \n   * @returns {AccountInfo}\n   */\n  async getInfo(accountId: AccountId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = new AccountInfoQuery()\n          .setAccountId(accountId);\n\n        // Signing the transaction...\n        const accountInfo = await transaction.execute(client);\n\n        // resolving the account's info...\n        resolve(accountInfo);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Fetches Specific account public key\n * @param {AccountId} accountId \n * @returns {any} Account Public Key\n */\n  async getKeys(accountId: AccountId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const accountInfo = await this.getInfo(accountId);\n        resolve(accountInfo.key);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Updates Account\n   * @param {AccountId} accountId \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @returns {Status} Account Update\n   */\n  async updateAccount(\n    accountId: AccountId,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,\n    memo?: string,\n    maxAutomaticTokenAssociations?: number,\n    isReceiverSignatureRequired?: boolean,\n    isOfflineTransaction?: boolean\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // generating random number, as a workound for offline signature...\n        let nodeAccountId = this.clientService.getRandomNodeForNetwork();\n\n        // Creating the transaction...\n        const transaction = await new AccountUpdateTransaction()\n          .setNodeAccountIds([nodeAccountId])\n          .setAccountId(accountId);\n\n        if (memo) {\n          transaction.setAccountMemo(memo);\n        }\n\n        if(maxAutomaticTokenAssociations) {\n          transaction.setMaxAutomaticTokenAssociations(maxAutomaticTokenAssociations);\n        }\n\n        if(isReceiverSignatureRequired) {\n          transaction.setReceiverSignatureRequired(true);\n        }        \n\n        if (newKey) {\n          transaction.setKey(newKey);\n        }\n\n        if(isOfflineTransaction) {\n          // generating random number, as a workound for offline signature...\n          let nodeAccountId = this.clientService.getRandomNodeForNetwork();\n          transaction.setNodeAccountIds([nodeAccountId]);\n        }\n\n        transaction.freezeWith(client);\n\n        if(isOfflineTransaction) {\n          resolve(transaction);\n        } else {\n        // Signing the transaction...\n        let signTx = await transaction.sign(signKey);\n\n        if (newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n\n        // Signing the transaction with the client operator...\n        const txResponse = await signTx.execute(client);\n\n        // Request the receipt of the transaction...\n        const receipt = await txResponse.getReceipt(client);\n\n        // Get the transaction consensus status...\n        resolve(receipt.status);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Creates a single or multi-sig account\n * @param {number} balance \n * @param {number} keysLength \n * @param {number} keysThreshold \n * @returns {AccountId, PrivateKey} single or multi-sig account\n */\n  async createAccount(\n    balance: number,\n    keysLength: number,\n    publicKeys?: Array,\n    keysThreshold?: number,\n    maxAutomaticTokenAssociations?: number,\n    isReceiverSignatureRequired?: boolean,\n    isOfflineTransaction?: boolean\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let key = null;\n\n        if (keysLength > 1) {\n          key = await this.keysService.generateKeyList(publicKeys, keysLength, keysThreshold);\n        } else {\n          key = await this.keysService.generateKey();\n        }\n\n        //Creating the transaction...\n        const transaction = new AccountCreateTransaction()\n          .setKey(keysLength > 1 ? (key).keyList : (key).publicKey);\n\n        if(balance) {\n          transaction.setInitialBalance(new Hbar(balance.toFixed(8)));\n        }\n\n        if(maxAutomaticTokenAssociations) {\n          transaction.setMaxAutomaticTokenAssociations(maxAutomaticTokenAssociations);\n        }\n\n        if(isReceiverSignatureRequired) {\n          transaction.setReceiverSignatureRequired(true);\n        }\n\n        if(isOfflineTransaction) {\n          // generating random number, as a workound for offline signature...\n          let nodeAccountId = this.clientService.getRandomNodeForNetwork();\n          transaction.setNodeAccountIds([nodeAccountId]);\n        }\n\n        transaction.freezeWith(client);\n\n        if(isOfflineTransaction) {\n          resolve(transaction);\n        } else {\n          // Executing the transactions...\n          const txResponse = await transaction.execute(client);\n\n          // Fetching the receipt...\n          const receipt = await txResponse.getReceipt(client);\n\n          // resolving the accountId...\n          resolve({\n            accountId: receipt.accountId,\n            key: key\n          });\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Freezes account related to token ID\n * @param {AccountId} accountId \n * @param {TokenId} tokenId \n * @param {string} freezeKey \n * @returns {Status}\n */\n  async freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = await new TokenFreezeTransaction()\n          .setAccountId(accountId)\n          .setTokenId(tokenId)\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Unfreezes account related to token ID\n * @param {AccountId} accountId \n * @param {TokenId} tokenId \n * @param {string} freezeKey \n * @returns {Status}\n */\n  async unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = await new TokenUnfreezeTransaction()\n          .setAccountId(accountId)\n          .setTokenId(tokenId)\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Get query balance\n * @param {string} accountId \n * @param {string} tokenId \n * @returns {IAccountBalance}\n */\n  getQueryBalance(accountId: string | AccountId, tokenId?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const query = new AccountBalanceQuery()\n          .setAccountId(accountId);\n\n        const response = await query.execute(client);\n        let balance = null;\n\n        if (tokenId) {\n          balance = {\n            tokens: [{\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? new Decimal(response.tokens._map.get(tokenId)?.toString()) : 0,\n              decimals: response.tokens?._map.get(tokenId) ? new Decimal(response.tokenDecimals?._map.get(tokenId)) : 0\n            }],\n            hbars: response.hbars\n          };\n        } else {\n          let tokens = new Array();\n\n          response.tokens?._map.forEach((value, tokenId) => {\n            tokens.push({\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? new Decimal(response.tokens._map.get(tokenId)?.toString()) : new Decimal(0),\n              decimals: response.tokens?._map.get(tokenId) ? new Decimal(response.tokenDecimals?._map.get(tokenId)) : new Decimal(0)\n            });\n          });\n\n          balance = {\n            tokens: tokens,\n            hbars: response.hbars\n          };\n        }\n\n        resolve(balance);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientModule.html":{"url":"modules/ClientModule.html","title":"module - ClientModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/client/client.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: IHederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                IHederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { ClientService } from './client.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { IHederaOptions } from '../../types/interfaces/hedera_options.types';\n\n@Module({})\nexport class ClientModule {\n  static forRoot(options: IHederaOptions): DynamicModule {\n    return {\n      module: ClientModule,\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: ClientModule,\n      imports: [ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/client/client.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                custom\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    Private\n                                mirrorNode\n                            \n                            \n                                    Private\n                                network\n                            \n                            \n                                    Private\n                                operator\n                            \n                            \n                                    Private\n                                operators\n                            \n                            \n                                    Private\n                                signatureClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateCustomClient\n                            \n                            \n                                getClient\n                            \n                            \n                                getNodeOperator\n                            \n                            \n                                getRandomNodeForNetwork\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: IHederaOptions)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/client/client.service.ts:49\n                            \n                        \n\n                \n                    \n                            Hedera Network variables\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        IHederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateCustomClient\n                        \n                    \n                \n            \n            \n                \ngenerateCustomClient(accountId: string, privateKey: string, environment: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    privateKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    environment\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient(isPublicMirror?: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('client.invalid_node_operator')\n                \n            \n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:75\n                \n            \n\n\n            \n                \n                    If the client gives invalid node error...\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isPublicMirror\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        random operator...\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeOperator\n                        \n                    \n                \n            \n            \n                \ngetNodeOperator()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:130\n                \n            \n\n\n            \n                \n                    Gets a node operator\n\n\n                    \n                    \n                    \n                        Returns :         IOperator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomNodeForNetwork\n                        \n                    \n                \n            \n            \n                \ngetRandomNodeForNetwork()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     AccountId\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:17\n                        \n                    \n\n            \n                \n                    Client\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        custom\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    node: null,\n    mirror: null\n  }\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Client Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:49\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mirrorNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IMirrorNode\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"mainnet\" | \"testnet\" | \"custom\"\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:34\n                        \n                    \n\n            \n                \n                    Network choice\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IOperator\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:24\n                        \n                    \n\n            \n                \n                    Single IOperator\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operators\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:29\n                        \n                    \n\n            \n                \n                    Array of IOperators\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        signatureClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { IOperator } from '../../types/interfaces/operator.types';\nimport { IHederaOptions } from '../../types/interfaces/hedera_options.types';\nimport { AccountId, Client } from '@hashgraph/sdk';\nimport { IMirrorNode } from \"../../types/interfaces/mirror.types\";\n\n/**\n * Injectable\n */\n@Injectable()\nexport class ClientService {\n\n  /**\n   * Client\n   */\n  private client: Client;\n  // temp bypass to resolve HCS ResetConnection from custom mirror nodes...\n  private signatureClient: Client;\n\n  /**\n   * Single IOperator\n   */\n  private operator: IOperator;\n\n  /**\n   * Array of IOperators\n   */\n  private operators: Array;\n\n  /**\n   * Network choice\n   */\n  private network: 'mainnet' | 'testnet' | 'custom';\n\n  private custom: {\n    node: { [key: string]: string | AccountId },\n    mirror: string\n  } = {\n    node: null,\n    mirror: null\n  };\n\n  private mirrorNode: IMirrorNode;\n\n  /**\n   * Logger Service\n   */\n  private logger: Logger = new Logger(\"Client Service\");\n\n  /**\n   * Hedera Network variables\n   * @param {IHederaOptions} hederaOptions \n   */\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: IHederaOptions\n  ) {\n    this.network = this.hederaOptions.network;\n    this.operators = this.hederaOptions.operators;\n    this.custom.node = this.hederaOptions.custom.node;\n    this.custom.mirror = this.hederaOptions.custom.mirror;\n    this.mirrorNode = this.hederaOptions.mirrorNode;\n\n    // Create our connection to the Hedera network...\n    this.client = this.getClient();\n    this.signatureClient = this.getClient(true);\n    this.operator = this.getNodeOperator();\n  }\n\n  /**\n   * If the client gives invalid node error...\n   * @returns random operator...\n   */\n  @OnEvent('client.invalid_node_operator')\n  getClient(isPublicMirror?: boolean): Client {\n    let client = null;\n\n    switch(this.network)  {\n      case 'testnet':\n        client = Client.forTestnet();\n\n        if(this.mirrorNode.grpc && !isPublicMirror) {\n          client.setMirrorNetwork(this.mirrorNode.grpc);\n        }\n        break;\n      case 'mainnet':\n        client = Client.forMainnet();\n\n        if(this.mirrorNode.grpc && !isPublicMirror) {\n          client.setMirrorNetwork(this.mirrorNode.grpc);\n        } else {\n          client.setMirrorNetwork(`mainnet-public.mirrornode.hedera.com:443`);\n        }\n        break;\n      case 'custom':\n        client = Client.forNetwork(this.custom.node)\n          .setMirrorNetwork(this.custom.mirror);\n        break;\n    }\n\n    this.operator = this.operators[Math.floor(Math.random() * this.operators.length)];\n    client.setOperator(this.operator.accountId, this.operator.privateKey);\n    return client;\n  }\n\n  generateCustomClient(accountId: string, privateKey: string, environment: string): Client {\n    let client = null;\n\n    switch(environment)  {\n      case 'testnet':\n        client = Client.forTestnet();\n        break;\n      case 'mainnet':\n        client = Client.forMainnet()\n          .setMirrorNetwork(\"mainnet-public.mirrornode.hedera.com:443\");\n        break;\n      case 'custom':\n        client = Client.forNetwork(this.custom.node).setMirrorNetwork(this.custom.mirror);\n        break;\n    }\n\n    client.setOperator(accountId, privateKey);\n    return client;\n  }\n\n  /**\n   * Gets a node operator\n   * @returns {IOperator}\n   */\n  getNodeOperator(): IOperator {\n    return this.operator;\n  }\n\n  getRandomNodeForNetwork(): AccountId {\n    let nodeAccountId = 0;\n\n    switch(this.network) {\n      case 'mainnet':\n        // generating random number from 3 to 28...\n        nodeAccountId = Math.floor(Math.random() * (28 - 3 + 1) + 3);\n        break;\n      case 'testnet':\n        // generating random number from 3 to 9...\n        nodeAccountId = Math.floor(Math.random() * (9 - 3 + 1) + 3);\n        break;\n    }\n\n    return new AccountId(nodeAccountId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HcsModule.html":{"url":"modules/HcsModule.html","title":"module - HcsModule","body":"\n                   \n\n\n\n\n    Modules\n    HcsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_providers\n\n\n\ncluster_HcsModule_imports\n\n\n\ncluster_HcsModule_exports\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\n\n\nHcsRestService \n\nHcsRestService \n\nHcsRestService  -->\n\nHcsModule->HcsRestService \n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsRestService\n\nHcsRestService\n\nHcsModule -->\n\nHcsRestService->HcsModule\n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hcs/hcs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HcsRestService\n                        \n                        \n                            HcsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HcsRestService\n                        \n                        \n                            HcsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HcsService } from './hcs.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\nimport { HcsRestService } from './hcs-rest.service';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [HcsService, HcsRestService],\n  exports: [HcsService, HcsRestService]\n})\nexport class HcsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HcsRestService.html":{"url":"injectables/HcsRestService.html","title":"injectable - HcsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HcsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hcs/hcs-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getLatestMessages\n                            \n                            \n                                getLatestMessagesFromTimestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hcs/hcs-rest.service.ts:9\n                            \n                        \n\n                \n                    \n                            Transaction Rest Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getLatestMessages\n                        \n                    \n                \n            \n            \n                \ngetLatestMessages(topicId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs-rest.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLatestMessagesFromTimestamp\n                        \n                    \n                \n            \n            \n                \ngetLatestMessagesFromTimestamp(topicId: string, consensus_timestamp: string, order: \"desc\" | \"asc\", limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs-rest.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    consensus_timestamp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    order\n                                    \n                                            \"desc\" | \"asc\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\nimport * as lodash from 'lodash';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HcsRestService {\n\n  /**\n   * Transaction Rest Service\n   * @param {RestService} restService \n   */\n  constructor(\n    private restService: RestService\n  ) { }\n\n  getLatestMessages(topicId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`topics/${topicId}/messages?order=desc`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  getLatestMessagesFromTimestamp(topicId: string, consensus_timestamp: string, order: 'desc' | 'asc', limit?: number): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let messages = [];\n        let url = `topics/${topicId}/messages?order=${order}&timestamp=gte:${consensus_timestamp}`;\n\n        let response = await this.restService\n          .call(url);\n\n        messages = messages.concat(response.messages);\n        let retry = false;\n        let timeout = 0;\n\n        while ((messages.length  setTimeout(resolve, timeout));\n          }\n\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          try {\n            response = await this.restService\n            .call(`topics/${topicId}/messages?${next}`);\n\n            messages = messages.concat(response.messages);\n            retry = false;\n          } catch(error) {\n            timeout += 100;\n            retry = true;\n          }\n        }          \n\n        resolve(messages);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HcsService.html":{"url":"injectables/HcsService.html","title":"injectable - HcsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HcsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hcs/hcs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTopic\n                            \n                            \n                                deleteTopic\n                            \n                            \n                                getMessages\n                            \n                            \n                                submitMessage\n                            \n                            \n                                topicInfo\n                            \n                            \n                                updateTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hcs/hcs.service.ts:29\n                            \n                        \n\n                \n                    \n                            HCS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTopic\n                        \n                    \n                \n            \n            \n                \ncreateTopic(adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:48\n                \n            \n\n\n            \n                \n                    Create topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTopic\n                        \n                    \n                \n            \n            \n                \ndeleteTopic(topicId: TopicId, adminKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:158\n                \n            \n\n\n            \n                \n                    Delete topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMessages\n                        \n                    \n                \n            \n            \n                \ngetMessages(topicId: TopicId, callbackSuccess: (message: TopicMessage) => void, start?: number, end?: number, limit?: number, callbackError?: (message?: TopicMessage,error?: Error) => void, isPublicMirror?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:255\n                \n            \n\n\n            \n                \n                    Get topic message\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callbackSuccess\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    callbackError\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    isPublicMirror\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Subscription Message\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitMessage\n                        \n                    \n                \n            \n            \n                \nsubmitMessage(topicId: TopicId, message: string | Uint8Array, submitKey?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:211\n                \n            \n\n\n            \n                \n                    Submit Message\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            string | Uint8Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topicInfo\n                        \n                    \n                \n            \n            \n                \ntopicInfo(topicId: TopicId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:188\n                \n            \n\n\n            \n                \n                    Get topic info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTopic\n                        \n                    \n                \n            \n            \n                \nupdateTopic(topicId: TopicId, currentAdminKey?: PrivateKey, adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:101\n                \n            \n\n\n            \n                \n                    Update topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentAdminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HCS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hcs/hcs.service.ts:29\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  TopicCreateTransaction,\n  TopicUpdateTransaction,\n  TopicDeleteTransaction,\n  TopicMessageSubmitTransaction,\n  TopicMessageQuery,\n  TopicMessage,\n  TopicInfoQuery,\n  TopicInfo,\n  TopicId,\n  PrivateKey,\n  Status,\n  Key,\n  KeyList,\n  SubscriptionHandle\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HcsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HCS Service\");\n\n  /**\n   * HCS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) {\n  }\n\n\n  /**\n   * Create topic\n   * @param {PrivateKey} adminKey \n   * @param {Key} submitKey \n   * @param {string} memo \n   * @returns {TopicId}\n   */\n  createTopic(\n    adminKey?: PrivateKey,\n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // creating the transaction...\n        const transaction = new TopicCreateTransaction();\n        let txResponse = null;\n        // setting the admin key, if any...\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n        // setting the submit key, if any...\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n        // setting the topic memo, if any...\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n        // freezing the transaction...\n        transaction.freezeWith(client);\n        // if there is an admin key, transaction must be signed...\n        if (adminKey) {\n          const signTx = await transaction.sign(adminKey);\n          txResponse = await signTx.execute(client);\n        }\n        // otherwise, we can just execute it...\n        else {\n          txResponse = await transaction.execute(client);\n        }\n        // finally, fetching the topicId from the response...\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.topicId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Update topic\n   * @param {TopicId} topicId \n   * @param {PrivateKey} currentAdminKey \n   * @param {PrivateKey} adminKey \n   * @param {Key} submitKey \n   * @param {string} memo \n   * @returns {Status}\n   */\n  updateTopic(\n    topicId: TopicId,\n    currentAdminKey?: PrivateKey,\n    adminKey?: PrivateKey,\n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // creating the transaction...\n        const transaction = new TopicUpdateTransaction().setTopicId(topicId);\n        let txResponse = null;\n        // setting the new admin key, if any...\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n        // setting the new submit key, if any...\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n        // setting the new topic memo, if any...\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n        // freezing the transaction...\n        transaction.freezeWith(client);\n        // if the transaction has got an admin key, we must use it to sign...\n        if (currentAdminKey) {\n          let signTx = await transaction.sign(currentAdminKey);\n          // if there is a new admin key, we must use it to double sign it...\n          if (adminKey) {\n            signTx = await signTx.sign(adminKey);\n          }\n          // executing the transaction, after signatures...\n          txResponse = await signTx.execute(client);\n        }\n        // otherwise we can just sign the transaction...\n        else {\n          txResponse = await transaction.execute(client);\n        }\n        // fetching the status of the executed transaction...\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Delete topic\n   * @param {TopicId} topicId \n   * @param {PrivateKey} adminKey \n   * @returns {Status}\n   */\n  deleteTopic(\n    topicId: TopicId,\n    adminKey: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // creating the transaction, and freezing it...\n        const transaction = new TopicDeleteTransaction()\n          .setTopicId(topicId)\n          .freezeWith(client);\n        // signing the transaction with admin key...\n        const signTx = await transaction.sign(adminKey);\n        // fetching response...\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        // resolving status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get topic info\n   * @param {TopicId} topicId \n   * @returns {TopicInfo}\n   */\n  topicInfo(\n    topicId: TopicId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = new TopicInfoQuery().setTopicId(topicId);\n        const info = await transaction.execute(client);\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Submit Message\n   * @param {TopicId} topicId \n   * @param {string} message \n   * @param {PrivateKey} submitKey \n   * @returns {string} \n   */\n  submitMessage(\n    topicId: TopicId,\n    message: string | Uint8Array,\n    submitKey?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let txResponse = null;\n        // creating the transaction, setting topic and message...\n        const transaction = new TopicMessageSubmitTransaction()\n          .setTopicId(topicId)\n          .setMessage(message);\n        // freezing the transaction...\n        transaction.freezeWith(client);\n        // if there is an submit key, transaction must be signed...\n        if (submitKey) {\n          const signTx = await transaction.sign(submitKey);\n          txResponse = await signTx.execute(client);\n        }\n        // otherwise, we can just execute it...\n        else {\n          txResponse = await transaction.execute(client);\n        }\n        // finally, fetching the status...\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.topicSequenceNumber?.toString());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Get topic message\n   * @param {TopicId} topicId \n   * @param {any} callback \n   * @param {number} start \n   * @param {number} end \n   * @param {number} limit \n   * @returns {any} Subscription Message\n   */\n  getMessages(\n    topicId: TopicId,\n    callbackSuccess: (message: TopicMessage) => void,\n    start?: number,\n    end?: number,\n    limit?: number,\n    callbackError?: (message: TopicMessage, error: Error) => void,\n    isPublicMirror?: boolean\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient(isPublicMirror);\n\n        // creating the transaction...\n        const transaction = new TopicMessageQuery()\n          .setTopicId(topicId);\n\n        if (start !== undefined) {\n          transaction.setStartTime(start);\n        }\n\n        if (end !== undefined) {\n          transaction.setEndTime(end);\n        }\n\n        if (limit !== undefined) {\n          transaction.setLimit(limit);\n        }\n\n        let subscription = transaction.subscribe(\n          client,\n          (message, error) => callbackError(message, error),\n          (message) => callbackSuccess(message)\n        );\n\n        resolve(subscription);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HederaModule.html":{"url":"modules/HederaModule.html","title":"module - HederaModule","body":"\n                   \n\n\n\n\n    Modules\n    HederaModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hedera.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: IHederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                IHederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { HederaService } from './hedera.service';\nimport { KeysModule } from './keys/keys.module';\nimport { TransactionsModule } from './transactions/transactions.module';\nimport { ClientModule } from './client/client.module';\nimport { RestModule } from './rest/rest.module';\nimport { HcsModule } from './hcs/hcs.module';\nimport { HfsModule } from './hfs/hfs.module';\nimport { HtsModule } from './hts/hts.module';\nimport { AccountsModule } from './accounts/accounts.module';\nimport { IHederaOptions } from '../types/interfaces/hedera_options.types';\n\n@Module({})\nexport class HederaModule {\n  static forRoot(options: IHederaOptions): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HederaService.html":{"url":"injectables/HederaService.html","title":"injectable - HederaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HederaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hedera.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Hedera Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hedera.service.ts:12\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HederaService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Hedera Service\");\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HfsModule.html":{"url":"modules/HfsModule.html","title":"module - HfsModule","body":"\n                   \n\n\n\n\n    Modules\n    HfsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_imports\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hfs/hfs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HfsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HfsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HfsService } from './hfs.service';\nimport { ClientModule } from '../client/client.module';\n\n@Module({\n  imports: [ClientModule],\n  controllers: [],\n  providers: [HfsService],\n  exports: [HfsService]\n})\nexport class HfsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HfsService.html":{"url":"injectables/HfsService.html","title":"injectable - HfsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HfsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hfs/hfs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                append\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getContents\n                            \n                            \n                                    Async\n                                getInfos\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hfs/hfs.service.ts:25\n                            \n                        \n\n                \n                    \n                            HFS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        append\n                        \n                    \n                \n            \n            \n                \n                    \n                    append(fileId: FileId, key: PrivateKey, content: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:90\n                \n            \n\n\n            \n                \n                    Append File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(key: PrivateKey, content: string, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:43\n                \n            \n\n\n            \n                \n                    Create File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(fileId: FileId, key: PrivateKey, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:192\n                \n            \n\n\n            \n                \n                    Delete File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContents(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:230\n                \n            \n\n\n            \n                \n                    Get contents\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfos(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:255\n                \n            \n\n\n            \n                \n                    Get Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(fileId: FileId, content: string, signKey: PrivateKey, newKey?: PrivateKey, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:135\n                \n            \n\n\n            \n                \n                    Update File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HFS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hfs/hfs.service.ts:25\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { \n  FileAppendTransaction, \n  FileContentsQuery, \n  FileCreateTransaction, \n  FileDeleteTransaction, \n  FileId, \n  FileInfo, \n  FileInfoQuery, \n  FileUpdateTransaction, \n  Hbar, \n  PrivateKey, \n  Status \n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HfsService {\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HFS Service\");\n\n  /**\n   * HFS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  /**\n   * Create File\n   * @param {PrivateKey} key \n   * @param {string} content \n   * @param {string} memo \n   * @param {number} maxTransactionFee \n   * @returns {FileId} \n   */\n  async create(\n    key: PrivateKey,\n    content: string,\n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = await new FileCreateTransaction()\n          .setKeys([key])\n          .setContents(content);\n\n        if(memo) {\n          transaction.setFileMemo(memo);\n        }\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee.toFixed(8)));\n        }\n\n        transaction.freezeWith(client);\n\n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(client);\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(client);\n        // Get the file ID\n        resolve(receipt.fileId);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Append File\n   * @param {FileId} fileId \n   * @param {PrivateKey} key \n   * @param {string} content \n   * @param {number} maxTransactionFee \n   * @returns {Status}\n   */\n  async append(\n    fileId: FileId,\n    key: PrivateKey,\n    content: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n        \n        // Creating the transaction...\n        const transaction = await new FileAppendTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee.toFixed(8)));\n        }\n\n        transaction.freezeWith(client);\n        \n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(client);\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(client);\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Update File\n   * @param {FileId} fileId \n   * @param {string} content \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @param {number} maxTransactionFee \n   * @returns {Status} \n   */\n  async update(\n    fileId: FileId,\n    content: string,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,    \n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = await new FileUpdateTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if(memo) {\n          transaction.setFileMemo(memo);\n        }          \n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee.toFixed(8)));\n        }\n\n        if(newKey) {\n          transaction.setKeys([newKey]);\n        }\n\n        transaction.freezeWith(client);\n        \n        // Signing the transaction...\n        let signTx = await transaction.sign(signKey);\n\n        if(newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n        \n        // Executing the transaction...\n        const submitTx = await signTx.execute(client);\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(client);\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Delete File\n   * @param {FileId} fileId \n   * @param {PrivateKey} key \n   * @param {number} maxTransactionFee \n   * @returns {Status} \n   */\n  async delete(\n    fileId: FileId,\n    key: PrivateKey,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = await new FileDeleteTransaction()\n          .setFileId(fileId);\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee.toFixed(8)));\n        }\n\n        transaction.freezeWith(client);\n        \n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(client);\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(client);\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get contents\n   * @param {FileId} fileId \n   * @returns {string}\n   */\n  async getContents(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = new FileContentsQuery()\n            .setFileId(fileId);\n\n        // Signing the transaction...\n        const contents = await transaction.execute(client);\n        resolve(contents.toString());\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get Info\n   * @param {FileId} fileId \n   * @returns {FileInfo}\n   */\n  async getInfos(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n        \n        // Creating the transaction...\n        const transaction = new FileInfoQuery()\n            .setFileId(fileId);\n\n        // Signing the transaction...\n        const infos = await transaction.execute(client);\n        resolve(infos);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HtsModule.html":{"url":"modules/HtsModule.html","title":"module - HtsModule","body":"\n                   \n\n\n\n\n    Modules\n    HtsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_imports\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hts/hts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HtsService } from './hts.service';\nimport { HtsRestService } from './hts-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule, ClientModule],\n  controllers: [],\n  providers: [HtsService, HtsRestService],\n  exports: [HtsService, HtsRestService]\n})\nexport class HtsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsRestService.html":{"url":"injectables/HtsRestService.html","title":"injectable - HtsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllHolders\n                            \n                            \n                                getAllHoldersFromWallet\n                            \n                            \n                                getAllNftForHolder\n                            \n                            \n                                getAllNftHolders\n                            \n                            \n                                getTokenInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts-rest.service.ts:9\n                            \n                        \n\n                \n                    \n                            HTS REST Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHolders\n                        \n                    \n                \n            \n            \n                \ngetAllHolders(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:42\n                \n            \n\n\n            \n                \n                    Get array of holders by tokenId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHoldersFromWallet\n                        \n                    \n                \n            \n            \n                \ngetAllHoldersFromWallet(tokenId: string, walletId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:172\n                \n            \n\n\n            \n                \n                    Get array of holders from walletId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    walletId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllNftForHolder\n                        \n                    \n                \n            \n            \n                \ngetAllNftForHolder(walletId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:128\n                \n            \n\n\n            \n                \n                    Get array of NFT for a given wallet\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    walletId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllNftHolders\n                        \n                    \n                \n            \n            \n                \ngetAllNftHolders(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:85\n                \n            \n\n\n            \n                \n                    Get array of NFT holders by tokenId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTokenInfo\n                        \n                    \n                \n            \n            \n                \ngetTokenInfo(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:24\n                \n            \n\n\n            \n                \n                    Get Token Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\nimport * as lodash from 'lodash';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HtsRestService {\n\n  /**\n   * HTS REST Service\n   * @param restService \n   */\n  constructor(\n    private restService: RestService\n  ) { }\n\n  /**\n   * Get Token Info\n   * @param {string} tokenId \n   * @returns {any} response\n   */\n  getTokenInfo(tokenId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`tokens/${tokenId}`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get array of holders by tokenId\n   * @param {string} tokenId \n   * @returns {Array}\n   */\n  getAllHolders(tokenId: string): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n          .call(`tokens/${tokenId}/balances`);\n\n        holders = holders.concat(response.balances);\n        let retry = false;\n        let timeout = 0;\n\n        while (response.links.next || retry) {\n          if(timeout) {\n            await new Promise(resolve => setTimeout(resolve, timeout));\n          }\n\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          try {\n            response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n            holders = holders.concat(response.balances);\n            retry = false;\n          } catch(error) {\n            timeout += 100;\n            retry = true;\n          }\n        }\n\n        resolve(holders);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Get array of NFT holders by tokenId\n * @param {string} tokenId \n * @returns {Array}\n */\n  getAllNftHolders(tokenId: string): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n          .call(`tokens/${tokenId}/nfts`);\n\n        holders = holders.concat(response.nfts);\n        let retry = false;\n        let timeout = 0;\n\n        while (response.links.next || retry) {\n          if(timeout) {\n            await new Promise(resolve => setTimeout(resolve, timeout));\n          }\n          \n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          try {  \n            response = await this.restService\n            .call(`tokens/${tokenId}/nfts?${next}`);\n\n          holders = holders.concat(response.nfts);\n          retry = false;\n          } catch(error) {\n            timeout += 100;\n            retry = true;\n          }\n        }\n\n        resolve(holders);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n* Get array of NFT for a given wallet\n* @param {string} walletId \n* @returns {Array}\n*/\n  getAllNftForHolder(walletId: string): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let nfts: any = [];\n\n        let response = await this.restService\n          .call(`accounts/${walletId}/nfts`);\n\n        nfts = nfts.concat(response.nfts);\n        let retry = false;\n        let timeout = 0;        \n\n        while (response.links.next || retry) {\n          if(timeout) {\n            await new Promise(resolve => setTimeout(resolve, timeout));\n          }\n\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          try {  \n            response = await this.restService\n            .call(`accounts/${walletId}/nfts?${next}`);\n\n            nfts = nfts.concat(response.nfts);\n          retry = false;\n          } catch(error) {\n            timeout += 100;\n            retry = true;\n          }\n        }\n\n        resolve(nfts);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get array of holders from walletId\n   * @param {string} tokenId \n   * @param {string} walletId \n   * @returns {Array}\n   */\n  getAllHoldersFromWallet(tokenId: string, walletId: string): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n          .call(`tokens/${tokenId}/balances?account.id=gt:${walletId}`);\n\n        holders = holders.concat(response.balances);\n\n        while (response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsService.html":{"url":"injectables/HtsService.html","title":"injectable - HtsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                associateToken\n                            \n                            \n                                    Async\n                                atomicSwap\n                            \n                            \n                                    Async\n                                burnNftToken\n                            \n                            \n                                    Async\n                                dissociateToken\n                            \n                            \n                                    Async\n                                getNftInfo\n                            \n                            \n                                    Async\n                                mintNftToken\n                            \n                            \n                                    Async\n                                pauseToken\n                            \n                            \n                                    Async\n                                transferHbar\n                            \n                            \n                                    Async\n                                transferNftToken\n                            \n                            \n                                    Async\n                                transferToken\n                            \n                            \n                                    Async\n                                unpauseToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts.service.ts:33\n                            \n                        \n\n                \n                    \n                            HTS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        associateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    associateToken(accountId: AccountId, tokenId: TokenId, keys: PrivateKey | Array)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:50\n                \n            \n\n\n            \n                \n                    Associate Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keys\n                                    \n                                            PrivateKey | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        atomicSwap\n                        \n                    \n                \n            \n            \n                \n                    \n                    atomicSwap(swaps: Array, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:430\n                \n            \n\n\n            \n                \n                    Atomic Swap\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    swaps\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        burnNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    burnNftToken(tokenId: TokenId, serialNumber: number, supplyKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:234\n                \n            \n\n\n            \n                \n                    Burn NFT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    supplyKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        dissociateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    dissociateToken(accountId: AccountId, tokenId: TokenId, keys: PrivateKey | Array)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:97\n                \n            \n\n\n            \n                \n                    Disassociate Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keys\n                                    \n                                            PrivateKey | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNftInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNftInfo(tokenId: TokenId, serialNumber: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:265\n                \n            \n\n\n            \n                \n                    Get NFT Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        mintNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    mintNftToken(tokenId: TokenId, CID: string, supplyKey?: PrivateKey | Array)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:187\n                \n            \n\n\n            \n                \n                    Mint NFT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    CID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    supplyKey\n                                    \n                                            PrivateKey | Array\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    pauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:136\n                \n            \n\n\n            \n                \n                    Pause Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferHbar\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferHbar(amount: number, from: AccountId, to: AccountId, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:294\n                \n            \n\n\n            \n                \n                    Transfer HBAR\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferNftToken(tokenId: TokenId, from: AccountId, to: AccountId, serialNumber: number, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:495\n                \n            \n\n\n            \n                \n                    Transfer NFT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferToken(tokenId: TokenId | Array, from: AccountId, to: AccountId, amount: number | Array, tokenDecimals: number | Array, memo?: string, key?: PrivateKey, hbarAmount?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:354\n                \n            \n\n\n            \n                \n                    Transfer Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    amount\n                                    \n                                            number | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenDecimals\n                                    \n                                            number | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    hbarAmount\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unpauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    unpauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:161\n                \n            \n\n\n            \n                \n                    Unpause Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HTS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hts/hts.service.ts:33\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  AccountId,\n  Hbar,\n  PrivateKey,\n  Status,\n  TokenAssociateTransaction,\n  TokenId,\n  TokenMintTransaction,\n  TokenPauseTransaction,\n  TokenUnpauseTransaction,\n  TokenDissociateTransaction,\n  Transaction,\n  TransferTransaction,\n  TransactionReceipt,\n  NftId,\n  TokenNftInfoQuery,\n  TokenNftInfo,\n  TokenBurnTransaction\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ITransactionDetails } from '../../types/interfaces/transaction_details.types';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HtsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HTS Service\");\n\n  /**\n   * HTS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) { }\n\n  /**\n   * Associate Token\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {PrivateKey} key \n   * @returns {Status}\n   */\n  async associateToken(\n    accountId: AccountId,\n    tokenId: TokenId,\n    keys: PrivateKey | Array\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n        // generating random number, as a workound for offline signature...\n        let nodeAccountId = this.clientService.getRandomNodeForNetwork();\n        \n        const transaction = await new TokenAssociateTransaction()\n          .setNodeAccountIds([nodeAccountId])\n          .setAccountId(accountId)\n          .setTokenIds([tokenId])\n          .freezeWith(client);\n\n        let signTx = null;\n\n        if(keys) {\n          if (Array.isArray(keys)) {\n            for (let i = 0; i \n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = await new TokenDissociateTransaction()\n          .setAccountId(accountId)\n          .setTokenIds([tokenId])\n          .freezeWith(client);\n\n        let signTx = null;\n\n        if (Array.isArray(keys)) {\n          for (let i = 0; i  {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = new TokenPauseTransaction()\n          .setTokenId(tokenId)\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Unpause Token\n   * @param {TokenId} tokenId \n   * @param {PrivateKey} pauseKey \n   * @returns {Status} \n   */\n  async unpauseToken(tokenId: TokenId, pauseKey: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = new TokenUnpauseTransaction()\n          .setTokenId(tokenId)\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Mint NFT\n   * @param {TokenId} tokenId \n   * @param {PrivateKey} supplyKey \n   * @param {string} CID \n   * @returns {TransactionReceipt} \n   */\n  async mintNftToken(\n    tokenId: TokenId,\n    CID: string,\n    supplyKey?: PrivateKey | Array\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = new TokenMintTransaction()\n          .setTokenId(tokenId)\n          .addMetadata(Buffer.from(CID));\n\n        if (supplyKey) {\n          transaction.freezeWith(client);\n\n          let signTx = null;\n\n          if (Array.isArray(supplyKey)) {\n            for (let i = 0; i  {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let transaction = await new TokenBurnTransaction()\n          .setTokenId(tokenId)\n          .setSerials([serialNumber])\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(supplyKey);\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n\n        resolve(receipt);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get NFT Info\n   * @param {TokenId} tokenId \n   * @param {number} serialNumber \n   * @returns {TokenNftInfo[]} \n   */\n  async getNftInfo(\n    tokenId: TokenId,\n    serialNumber: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let nftId = new NftId(tokenId, serialNumber);\n        let nftInfos = await new TokenNftInfoQuery()\n          .setNftId(nftId)\n          .execute(client);\n\n        resolve(nftInfos);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Transfer HBAR\n   * @param {number} amount \n   * @param {AccountId} from \n   * @param {AccountId} to \n   * @param {string} memo \n   * @param {PrivateKey} key \n   * @returns {ITransactionDetails} \n   */\n  async transferHbar(\n    amount: number,\n    from: AccountId,\n    to: AccountId,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating a transaction...\n        const transaction = new TransferTransaction()\n          .addHbarTransfer(from, new Hbar(-amount.toFixed(8)))\n          .addHbarTransfer(to, new Hbar(amount.toFixed(8)));\n\n        if (memo) {\n          transaction.setTransactionMemo(memo);\n        }\n\n        if (key) {\n          transaction.freezeWith(client);\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n\n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(client);\n\n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(client);\n\n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          // if no key has been provided, we return the transasction to be wrapped\n          // into a scheduled transaction to allow multisig threshold mechanism...          \n          resolve(transaction);\n        }\n\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Transfer Token\n   * @param {TokenId | Array} tokenId \n   * @param {AccountId} from \n   * @param {AccountId} to \n   * @param {number | Array} amount \n   * @param {number | Array} tokenDecimals \n   * @param {string} memo \n   * @param {PrivateKey} key \n   * @returns {ITransactionDetails | Transaction} \n   */\n  async transferToken(\n    tokenId: TokenId | Array,\n    from: AccountId,\n    to: AccountId,\n    amount: number | Array,\n    tokenDecimals: number | Array,\n    memo?: string,\n    key?: PrivateKey,\n    hbarAmount?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction();\n\n        if(hbarAmount) {\n          transaction\n          .addHbarTransfer(from, new Hbar(-hbarAmount.toFixed(8)))\n          .addHbarTransfer(to, new Hbar(hbarAmount.toFixed(8)))\n        }\n\n        if (!Array.isArray(tokenId) && !Array.isArray(amount) && !Array.isArray(tokenDecimals)) {\n          transaction\n            .addTokenTransfer(tokenId, from, Number(-amount * (10 ** tokenDecimals)))\n            .addTokenTransfer(tokenId, to, Number(amount * (10 ** tokenDecimals)));\n        } else {\n          if (Array.isArray(tokenId) && Array.isArray(amount) && Array.isArray(tokenDecimals)) {\n            tokenId.forEach((token_id, index) => {\n              transaction\n                .addTokenTransfer(token_id, from, Number(-amount[index] * (10 ** Number(tokenDecimals[index]))))\n                .addTokenTransfer(token_id, to, Number(+amount[index] * (10 ** Number(tokenDecimals[index]))));\n            });\n          }\n        }\n\n        if (memo) {\n          transaction.setTransactionMemo(memo);\n        }\n\n        if (key) {\n          transaction.freezeWith(client);\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n\n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(client);\n\n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(client);\n\n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          // if no key has been provided, we return the transasction to be wrapped\n          // into a scheduled transaction to allow multisig threshold mechanism...\n          resolve(transaction);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Atomic Swap\n   * @param {Array} swaps \n   * @param {string} memo \n   * @param {PrivateKey} key \n   * @returns {ITransactionDetails | Transaction} \n   */\n  async atomicSwap(\n    swaps: Array,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction();\n\n        swaps.forEach(swap => {\n          if(swap.token.id == 'HBAR') {\n            transaction\n            .addHbarTransfer(swap.from, new Hbar(-swap.amount.toFixed(8)))\n            .addHbarTransfer(swap.to, new Hbar(swap.amount.toFixed(8)));\n          } else {\n            transaction\n            .addTokenTransfer(swap.token.id, swap.from, Number(-swap.amount * (10 ** swap.token.decimals)))\n            .addTokenTransfer(swap.token.id, swap.to, Number(swap.amount * (10 ** swap.token.decimals)));\n          }\n        });\n\n        if (memo) {\n          transaction.setTransactionMemo(memo);\n        }\n\n        if (key) {\n          transaction.freezeWith(client);\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n\n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(client);\n\n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(client);\n\n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          // if no key has been provided, we return the transasction to be wrapped\n          // into a scheduled transaction to allow multisig threshold mechanism...\n          resolve(transaction);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Transfer NFT\n   * @param {TokenId} tokenId \n   * @param {AccountId} from \n   * @param {AccountId} to \n   * @param {number} serialNumber \n   * @param {PrivateKey} key \n   * @returns {ITransactionDetails} \n   */\n  async transferNftToken(\n    tokenId: TokenId,\n    from: AccountId,\n    to: AccountId,\n    serialNumber: number,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction()\n          .addNftTransfer(new NftId(tokenId, serialNumber), from, to);\n\n        if (key) {\n          transaction.freezeWith(client);\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n\n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(client);\n\n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(client);\n\n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          // if no key has been provided, we return the transasction to be wrapped\n          // into a scheduled transaction to allow multisig threshold mechanism...\n          resolve(transaction);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAccountBalance.html":{"url":"interfaces/IAccountBalance.html","title":"interface - IAccountBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAccountBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/account_balance.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hbars\n                                        \n                                \n                                \n                                        \n                                            tokens\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hbars\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hbars:     Hbar\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Hbar\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    HBAR\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokens\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokens:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of custom tokens\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Hbar } from \"@hashgraph/sdk/lib/contract/ContractCreateFlow\";\nimport { ITokenBalance } from \"./token_balance.types\";\n\n/**\n * Interface\n */\nexport interface IAccountBalance {\n\n  /**\n   * HBAR\n   */\n  hbars: Hbar\n\n\n  /**\n   * Array of custom tokens\n   */\n  tokens: Array\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHederaOptions.html":{"url":"interfaces/IHederaOptions.html","title":"interface - IHederaOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IHederaOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/hedera_options.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            custom\n                                        \n                                \n                                \n                                        \n                                            mirrorNode\n                                        \n                                \n                                \n                                        \n                                            network\n                                        \n                                \n                                \n                                        \n                                            operators\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        custom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        custom:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mirrorNode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mirrorNode:         IMirrorNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IMirrorNode\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mirror Node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        network\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        network:     \"mainnet\" | \"testnet\" | \"custom\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"mainnet\" | \"testnet\" | \"custom\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Network choice\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operators\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operators:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of operators\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AccountId } from \"@hashgraph/sdk\";\nimport { IMirrorNode } from \"./mirror.types\";\nimport { IOperator } from \"./operator.types\";\n\n/**\n * Interface\n */\nexport interface IHederaOptions {\n\n\n  /**\n   * Array of operators\n   */\n  operators: Array\n\n  /**\n   * Mirror Node\n   */\n  mirrorNode: IMirrorNode\n\n  /**\n   * Network choice\n   */\n  network: 'mainnet' | 'testnet' | 'custom'\n\n  custom: {\n    node: { [key: string]: string | AccountId },\n    mirror: string\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMirrorNode.html":{"url":"interfaces/IMirrorNode.html","title":"interface - IMirrorNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IMirrorNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/mirror.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            grpc\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    API string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grpc\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grpc:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    GRPC ULR string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    REST URL string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IMirrorNode {\n\n  /**\n   * REST URL string\n   */\n  url: string\n\n  /**\n   * API string\n   */\n  apiKey?: string\n\n    /**\n   * GRPC ULR string\n   */\n  grpc?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IOperator.html":{"url":"interfaces/IOperator.html","title":"interface - IOperator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IOperator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/operator.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountId\n                                        \n                                \n                                \n                                        \n                                            privateKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            publicKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Account id string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Private key string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Public key string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    url string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IOperator {\n\n  /**\n   * Account id string\n   */\n  accountId: string\n\n  /**\n   * Private key string\n   */\n  privateKey: string\n\n  /**\n   * Public key string\n   */\n  publicKey?: string\n\n  /**\n   * url string\n   */\n   url?: string  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPrivateKeyList.html":{"url":"interfaces/IPrivateKeyList.html","title":"interface - IPrivateKeyList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPrivateKeyList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/private-key-list.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            keyList\n                                        \n                                \n                                \n                                        \n                                            privateKeys\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyList:     KeyList\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyList\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of keys\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKeys\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKeys:     PrivateKey[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrivateKey[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of Private keys\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { KeyList, PrivateKey } from \"@hashgraph/sdk\";\n\n\n/**\n * Interface\n */\nexport interface IPrivateKeyList {\n\n  /**\n   * Array of Private keys\n   */\n  privateKeys: PrivateKey[]\n\n  /**\n   * List of keys\n   */\n  keyList: KeyList\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITokenBalance.html":{"url":"interfaces/ITokenBalance.html","title":"interface - ITokenBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITokenBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/token_balance.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            balance\n                                        \n                                \n                                \n                                        \n                                            decimals\n                                        \n                                \n                                \n                                        \n                                            tokenId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        balance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        balance:     Decimal\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Decimal\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token balance\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        decimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        decimals:     Decimal\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Decimal\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token decimals number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokenId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token id string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Decimal } from 'decimal.js';\n\n/**\n * Interface\n */\nexport interface ITokenBalance {\n\n  /**\n   * Token id string\n   */\n  tokenId: string\n\n  /**\n    * Token balance\n    */\n  balance: Decimal\n\n  /**\n    * Token decimals number\n    */\n  decimals: Decimal\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITransactionDetails.html":{"url":"interfaces/ITransactionDetails.html","title":"interface - ITransactionDetails","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITransactionDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/transaction_details.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            transaction_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:     Status\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Status\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Transaction status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transaction_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transaction_id:     TransactionId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TransactionId\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Transaction id\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Status, TransactionId } from \"@hashgraph/sdk\";\n\n/**\n * Interface\n */\nexport interface ITransactionDetails {\n\n  /**\n   * Transaction status\n   */\n  status: Status\n\n  /**\n   * Transaction id\n   */\n  transaction_id: TransactionId\n} \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeysModule.html":{"url":"modules/KeysModule.html","title":"module - KeysModule","body":"\n                   \n\n\n\n\n    Modules\n    KeysModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_KeysModule_exports\n\n\n\n\nKeysService \n\nKeysService \n\n\n\nKeysModule\n\nKeysModule\n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/keys/keys.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KeysService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KeysService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KeysService } from './keys.service';\n\n@Module({\n  controllers: [],\n  providers: [KeysService],\n  exports: [KeysService]\n})\nexport class KeysModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KeysService.html":{"url":"injectables/KeysService.html","title":"injectable - KeysService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KeysService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/keys/keys.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateKey\n                            \n                            \n                                generateKeyList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/hedera/keys/keys.service.ts:14\n                            \n                        \n\n                \n                    \n                            KeyService class\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKey\n                        \n                    \n                \n            \n            \n                \ngenerateKey()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:27\n                \n            \n\n\n            \n                \n                    Generate Private Key\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyList\n                        \n                    \n                \n            \n            \n                \ngenerateKeyList(publicKeys?: string[], length?: number, threshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:45\n                \n            \n\n\n            \n                \n                    Generate a list of Keys\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    publicKeys\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    threshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Keys Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/keys/keys.service.ts:14\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { PrivateKey, KeyList, PublicKey } from '@hashgraph/sdk';\nimport { IPrivateKeyList } from '../../types/interfaces/private-key-list.types';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class KeysService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Keys Service\");\n\n\n  /**\n   * KeyService class\n   */\n  constructor() {\n  }\n\n  /**\n   * Generate Private Key\n   * @returns {PrivateKey}\n   */\n  generateKey(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const key = await PrivateKey.generateED25519();\n        resolve(key);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Generate a list of Keys\n   * @param {string} publicKeys \n   * @param {number} length \n   * @param {number} threshold \n   * @returns {IPrivateKeyList} \n   */\n  generateKeyList(\n    publicKeys?: string[],\n    length?: number,\n    threshold?: number\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let publicKeyList: any = [];\n        // if an array of keys is provided, we use it...\n        if(publicKeys) {\n          publicKeys.forEach(key => {\n            publicKeyList.push(PublicKey.fromString(key));\n          });\n\n          resolve({\n            privateKeys: [], \n            keyList: new KeyList(publicKeyList, threshold? threshold : null)\n          });          \n        }\n        // otherwise, we generate the keys we need...\n        else {\n          let privateKeys: any = [];\n\n          if(length) {\n            [...Array(length).keys()].forEach(() => {\n              let key = PrivateKey.generateED25519();\n              privateKeys.push(key);\n              publicKeyList.push(key.publicKey);\n            });\n\n            resolve({\n              privateKeys: privateKeys, \n              keyList: new KeyList(publicKeyList, threshold? threshold : null)\n            });\n          } else {\n            resolve({\n              privateKeys: [], \n              keyList: new KeyList([])\n            });\n          }\n        }\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestModule.html":{"url":"modules/RestModule.html","title":"module - RestModule","body":"\n                   \n\n\n\n\n    Modules\n    RestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/rest/rest.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: IHederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                IHederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { RestService } from './rest.service';\nimport { HttpModule } from '@nestjs/axios';\nimport { ConfigModule } from '@nestjs/config';\nimport { IHederaOptions } from '../../types/interfaces/hedera_options.types';\n\n@Module({})\nexport class RestModule {\n  static forRoot(options: IHederaOptions): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule, ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestService.html":{"url":"injectables/RestService.html","title":"injectable - RestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/rest/rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                            \n                                    Private\n                                mirrorNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                call\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: IHederaOptions, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/rest/rest.service.ts:21\n                            \n                        \n\n                \n                    \n                            Rest Transaction Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        IHederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        call\n                        \n                    \n                \n            \n            \n                \n                    \n                    call(endpoint: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.service.ts:42\n                \n            \n\n\n            \n                \n                    Call Mirror Node\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Rest Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:21\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mirrorNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IMirrorNode\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:16\n                        \n                    \n\n            \n                \n                    Mirror Node\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { IMirrorNode } from '../../types/interfaces/mirror.types';\nimport { IHederaOptions } from '../../types/interfaces/hedera_options.types';\n\n\n/**\n * Injectable\n */\n@Injectable()\nexport class RestService {\n\n  /**\n   * Mirror Node\n   */\n  private mirrorNode: IMirrorNode;\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Rest Transactions Service\");\n\n\n  /**\n   * Rest Transaction Service\n   * @param {IHederaOptions} hederaOptions \n   * @param {HttpService} httpService \n   */\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: IHederaOptions,\n    private httpService: HttpService\n  ) {\n    this.mirrorNode = this.hederaOptions.mirrorNode;\n  }\n\n\n  /**\n   * Call Mirror Node\n   * @param {string} endpoint \n   * @returns {any}\n   */\n  async call(endpoint: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let headers = {};\n\n        if(this.mirrorNode.apiKey) {\n          headers = {\n            'x-api-key': this.mirrorNode.apiKey\n          }\n        }\n\n        let response = await this.httpService\n        .get(\n          `${this.mirrorNode.url}/api/v1/${endpoint}`,\n          { headers: headers }).toPromise();\n  \n        resolve(response?.data);\n      } catch(error) {\n        reject(error);\n      }      \n    });   \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenBalance.html":{"url":"classes/TokenBalance.html","title":"class - TokenBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/models/token_balance.class.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                balance\n                            \n                            \n                                decimals\n                            \n                            \n                                tokenId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        balance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/types/models/token_balance.class.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decimals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/types/models/token_balance.class.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tokenId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/types/models/token_balance.class.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class TokenBalance {\n  @ApiProperty()\n  tokenId: string\n\n  @ApiProperty()\n  balance: number\n\n  @ApiProperty()\n  decimals: number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransactionsModule.html":{"url":"modules/TransactionsModule.html","title":"module - TransactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_imports\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/transactions/transactions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TransactionsService } from './transactions.service';\nimport { TransactionsRestService } from './transactions-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [TransactionsService, TransactionsRestService],\n  exports: [TransactionsService, TransactionsRestService]\n})\nexport class TransactionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsRestService.html":{"url":"injectables/TransactionsRestService.html","title":"injectable - TransactionsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllTransactions\n                            \n                            \n                                getAllTransactionsFromTimestamp\n                            \n                            \n                                getLatestTransactions\n                            \n                            \n                                getScheduledTransaction\n                            \n                            \n                                getTransactionById\n                            \n                            \n                                getTransactionByTimestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions-rest.service.ts:8\n                            \n                        \n\n                \n                    \n                            Transaction Rest Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactions\n                        \n                    \n                \n            \n            \n                \ngetAllTransactions(accountId: string, filters?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:59\n                \n            \n\n\n            \n                \n                    Fetch all transactions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filters\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactionsFromTimestamp\n                        \n                    \n                \n            \n            \n                \ngetAllTransactionsFromTimestamp(timestamp: string, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:24\n                \n            \n\n\n            \n                \n                    Fetch all transactions from timestamp\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timestamp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLatestTransactions\n                        \n                    \n                \n            \n            \n                \ngetLatestTransactions(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:134\n                \n            \n\n\n            \n                \n                    Fetch latest transactions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getScheduledTransaction\n                        \n                    \n                \n            \n            \n                \ngetScheduledTransaction(transactionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:152\n                \n            \n\n\n            \n                \n                    Fetch scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTransactionById\n                        \n                    \n                \n            \n            \n                \ngetTransactionById(transaction_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:116\n                \n            \n\n\n            \n                \n                    Fetch transaction by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transaction_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTransactionByTimestamp\n                        \n                    \n                \n            \n            \n                \ngetTransactionByTimestamp(timestamp: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:98\n                \n            \n\n\n            \n                \n                    Fetch transaction by timestamp\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timestamp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class TransactionsRestService {\n\n  /**\n   * Transaction Rest Service\n   * @param {RestService} restService \n   */\n  constructor(\n    private restService: RestService\n  ) { }\n\n  /**\n   * Fetch all transactions from timestamp\n   * @param {string} timestamp \n   * @param {string} accountId \n   * @returns {any} response\n   */\n  getAllTransactionsFromTimestamp(timestamp: string, accountId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transactions: any = [];\n\n        let response = await this.restService\n          .call(`transactions/?account.id=${accountId}&timestamp=gt:${timestamp}`);\n\n        transactions = transactions.concat(response.transactions);\n\n        while (response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch all transactions\n   * @param {string} accountId \n   * @param {string} filters \n   * @returns {any} response\n   */\n  getAllTransactions(accountId: string, filters?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transactions: any = [];\n        let url = `transactions/?account.id=${accountId}`;\n\n        if (filters) {\n          url += `&${filters}`;\n        }\n\n        let response = await this.restService\n          .call(url);\n\n        transactions = transactions.concat(response.transactions);\n\n        while (response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch transaction by timestamp\n   * @param {string} timestamp \n   * @returns {any} response\n   */\n  getTransactionByTimestamp(timestamp: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`transactions/?timestamp=${timestamp}`);\n\n        resolve(response.transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch transaction by id\n   * @param {string} transaction_id \n   * @returns {any} response\n   */\n  getTransactionById(transaction_id: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`transactions/${transaction_id}`);\n\n        resolve(response.transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch latest transactions\n   * @param {string} accountId \n   * @returns {any} response\n   */\n  getLatestTransactions(accountId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`transactions/?account.id=${accountId}`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch scheduled transaction\n   * @param {string} transactionId \n   * @returns {any} response\n   */\n  getScheduledTransaction(transactionId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`schedules/${transactionId}`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsService.html":{"url":"injectables/TransactionsService.html","title":"injectable - TransactionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createScheduledTransaction\n                            \n                            \n                                    Async\n                                getScheduledTrasaction\n                            \n                            \n                                    Async\n                                getTransactionQuery\n                            \n                            \n                                    Async\n                                getTransactionReceipt\n                            \n                            \n                                    Async\n                                signScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions.service.ts:27\n                            \n                        \n\n                \n                    \n                            Fetch transaction record query\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createScheduledTransaction(transactionToSchedule: Transaction)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:119\n                \n            \n\n\n            \n                \n                    Create scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionToSchedule\n                                    \n                                            Transaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getScheduledTrasaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getScheduledTrasaction(scheduleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:148\n                \n            \n\n\n            \n                \n                    Get scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionQuery(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:43\n                \n            \n\n\n            \n                \n                    Fetch transaction query\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        receipt\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionReceipt(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:65\n                \n            \n\n\n            \n                \n                    Fetch transaction receipt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        receipt\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:89\n                \n            \n\n\n            \n                \n                    Sign scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                            ScheduleId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/transactions/transactions.service.ts:27\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport {\n  PrivateKey,\n  ScheduleCreateTransaction,\n  ScheduleId,\n  ScheduleInfoQuery,\n  ScheduleSignTransaction,\n  Status,\n  Transaction,\n  TransactionId,\n  TransactionReceipt,\n  TransactionReceiptQuery,\n  TransactionRecordQuery,\n  TransactionResponse\n} from '@hashgraph/sdk';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class TransactionsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Transactions Service\");\n\n  /**\n   * Fetch transaction record query\n   * @param {TransactionId} transactionId \n   * @returns {any} receipt\n   */\n  constructor(\n    private clientService: ClientService\n  ) { }\n\n  /**\n   * Fetch transaction query\n   * @param {TransactionId} transactionId \n   * @returns {any} receipt\n   */\n  async getTransactionQuery(transactionId: TransactionId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let transaction = new TransactionRecordQuery()\n          .setTransactionId(transactionId)\n          .setIncludeDuplicates(true);\n\n        let receipt = await transaction.execute(client);\n        resolve(receipt);\n      } catch (error: any) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch transaction receipt\n   * @param {TransactionId} transactionId \n   * @returns {any} receipt\n   */\n  async getTransactionReceipt(transactionId: TransactionId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let transaction = new TransactionReceiptQuery()\n          .setTransactionId(transactionId)\n          .setIncludeDuplicates(true)\n          .setIncludeChildren(true);\n\n        let receipt = await transaction.execute(client);\n        resolve(receipt);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Sign scheduled transaction\n   * @param {ScheduleId} scheduleId \n   * @param {PrivateKey} key \n   * @returns {Status}\n   */\n  async signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = await new ScheduleSignTransaction()\n          .setScheduleId(scheduleId)\n          .freezeWith(client)\n          .sign(key);\n\n        // Signing with the client operator key...\n        const txResponse = await transaction.execute(client);\n\n        // Getting the receipt of the transaction...\n        const receipt = await txResponse.getReceipt(client);\n\n        // Getting the transaction status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Create scheduled transaction\n   * @param {Transaction} transactionToSchedule \n   * @returns {ScheduleId}\n   */\n  async createScheduledTransaction(transactionToSchedule: Transaction): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating a schedule transaction...\n        let scheduledTransaction: ScheduleCreateTransaction = new ScheduleCreateTransaction()\n          .setScheduledTransaction(transactionToSchedule);\n\n        // Signing with the client operator key and submit the transaction to a Hedera network...\n        let txResponse: TransactionResponse = await scheduledTransaction.execute(client);\n\n        // Requesting the receipt of the transaction...\n        let receipt: TransactionReceipt = await txResponse.getReceipt(client);\n\n        // Geting the schedule ID...\n        let scheduleId: ScheduleId | null = receipt.scheduleId;\n        resolve(scheduleId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get scheduled transaction\n   * @param {string} scheduleId \n   * @returns {any} info\n   */\n  async getScheduledTrasaction(scheduleId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const query = new ScheduleInfoQuery()\n          .setScheduleId(scheduleId);\n\n        const info = await query.execute(client);\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/hedera/accounts/accounts-rest.service.ts\n            \n            injectable\n            AccountsRestService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/hedera/accounts/accounts.service.ts\n            \n            injectable\n            AccountsService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/hedera/client/client.service.ts\n            \n            injectable\n            ClientService\n            \n                64 %\n                (9/14)\n            \n        \n        \n            \n                \n                src/hedera/hcs/hcs-rest.service.ts\n            \n            injectable\n            HcsRestService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/hedera/hcs/hcs.service.ts\n            \n            injectable\n            HcsService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hedera.service.ts\n            \n            injectable\n            HederaService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/hedera/hfs/hfs.service.ts\n            \n            injectable\n            HfsService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts-rest.service.ts\n            \n            injectable\n            HtsRestService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts.service.ts\n            \n            injectable\n            HtsService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/hedera/keys/keys.service.ts\n            \n            injectable\n            KeysService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/hedera/rest/rest.service.ts\n            \n            injectable\n            RestService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions-rest.service.ts\n            \n            injectable\n            TransactionsRestService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions.service.ts\n            \n            injectable\n            TransactionsService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/types/interfaces/account_balance.types.ts\n            \n            interface\n            IAccountBalance\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/interfaces/hedera_options.types.ts\n            \n            interface\n            IHederaOptions\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/types/interfaces/mirror.types.ts\n            \n            interface\n            IMirrorNode\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/types/interfaces/operator.types.ts\n            \n            interface\n            IOperator\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/types/interfaces/private-key-list.types.ts\n            \n            interface\n            IPrivateKeyList\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/interfaces/token_balance.types.ts\n            \n            interface\n            ITokenBalance\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/types/interfaces/transaction_details.types.ts\n            \n            interface\n            ITransactionDetails\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/models/account_balance.class.ts\n            \n            class\n            AccountBalance\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/models/token_balance.class.ts\n            \n            class\n            TokenBalance\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hashgraph/sdk : ^2.18.1\n        \n            @nestjs/axios : ^0.0.7\n        \n            @nestjs/common : ^8.4.5\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.4.6\n        \n            @nestjs/event-emitter : ^1.1.1\n        \n            @nestjs/swagger : ^6.0.5\n        \n            axios : ^0.27.2\n        \n            decimal.js : ^10.3.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.5.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHSuite - Hedera for NestJS\nAn hedera-js-sdk wrapper for NestJS.\nInstallation\nIf you use npm, you shall run:\nnpm install @hsuite/nestjs-hederainstead, if you use yarn:\nyarn add @hsuite/nestjs-hederaImport into your AppModule\nFirst you need to import the HederaModule into your app.module.ts.\nYou can use the forRoot method in order to pass the needed variables to create the Hedera Client and to connect to a Mirror Node, like this:\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { HederaModule } from '@hsuite/nestjs-hedera/lib';\n\n@Module({\n  imports: [\n    HederaModule.forRoot({\n      operators: [\n          {\n            accountId: 'YOUR_OPERATOR_ACCOUNT_ID', \n            privateKey: 'YOUR_OPERATOR_PRIVATE_KEY'\n          }\n        ], \n        mirrorNode: {\n          url: 'https://mainnet-public.mirrornode.hedera.com'\n        }, \n        network: 'mainnet'\n      }),\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\nexport class AppModule {}You can also use NestJS ConfigService, to protect your keys by calling the forRootAsync method, like this:\nHederaModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n  useFactory: async (configService: ConfigService) => ({\n    operators: configService.get>(`operators`),\n    mirrorNode: configService.get(`mirrorNode`),\n    network: configService.get('network')\n  }),\n}),Usage\nOnce imported, you can then import the service you need, and use it.\nFor example:\nimport { Injectable } from '@nestjs/common';\nimport { KeysService } from '@hsuite/nestjs-hedera/lib/hedera/keys/keys.service';\nimport { HcsService } from '@hsuite/nestjs-hedera/lib/hedera/hcs/hcs.service';\nimport { HfsService } from '@hsuite/nestjs-hedera/lib/hedera/hfs/hfs.service';\nimport { AccountsService } from '@hsuite/nestjs-hedera/lib/hedera/accounts/accounts.service';\nimport { TransactionsRestService } from '@hsuite/nestjs-hedera/lib/hedera/transactions/transactions-rest.service';\nimport { TopicId, PrivateKey } from '@hashgraph/sdk';\n\n@Injectable()\nexport class AppService {\n  constructor(\n    private keysService: KeysService,\n    private hcsService: HcsService,\n    private hfsService: HfsService,\n    private transactionsService: TransactionsRestService,\n    private accountsService: AccountsService\n  ) {\n    // creating an hedera account...\n    this.accountsService.createAccount(1, 1).then(account => {\n      console.log(\"account generated\", account.key.toString());\n      // generating a new private key...\n      this.keysService.generateKey().then(key => {\n        // updating the account with the new generated private key...\n        this.accountsService.updateAccount(\n          account.accountId, \n          PrivateKey.fromString(account.key.toString()),\n          key).then(response => {\n            console.log(response);\n          }).catch(error => {\n            console.error(error);\n          });\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(error => {\n      console.error(error);\n    })\n\n    // fetching latest transactions from mirror node for a given accountId...\n    this.transactionsService.getLatestTransactions('YOUR_ACCOUNT_ID_HERE').then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    // subscribing to a HCS Topic...\n    this.hcsService.getMessages(\n      TopicId.fromString('YOUR_HCS_TOPIC_ID_HERE'),\n      async(message) => {\n        let hcsMessage = JSON.parse(Buffer.from(message.contents).toString());\n        console.log(hcsMessage);\n      }\n      ).then(() => {\n        console.log(\"subscribed\");\n      }).catch(error => {\n        console.error(error);\n      })\n\n    // creating an HFS file...\n    this.hfsService.create(\n      PrivateKey.fromString('YOUR_PRIVATE_KEY_HERE'),\n      'YOUR_CONTENT_HERE'\n    ).then((response) => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    })\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HcsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HederaModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HfsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HtsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeysModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_imports\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_providers\n\n\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_exports\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nKeysService \n\nKeysService \n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nAccountsRestService \n\nAccountsRestService \n\nAccountsRestService  -->\n\nAccountsModule->AccountsRestService \n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsRestService\n\nAccountsRestService\n\nAccountsModule -->\n\nAccountsRestService->AccountsModule\n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nHcsRestService \n\nHcsRestService \n\nHcsRestService  -->\n\nHcsModule->HcsRestService \n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsRestService\n\nHcsRestService\n\nHcsModule -->\n\nHcsRestService->HcsModule\n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.21\n        \n            Description : \n        \n            Keywords : hsuite, smart-node, nestjs-hedera, hsuite-network, hedera, dex\n        \n            Homepage : https://hsuite.finance\n        \n            Bugs : https://github.com/HbarSuite/nestjs-hedera/issues\n        \n            License : ISC\n        \n            Repository : git+https://github.com/HbarSuite/nestjs-hedera.git\n        \n            Author : HSuite\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
