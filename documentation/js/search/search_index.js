var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AccountBalance.html",[0,0.292,1,2.423]],["body/classes/AccountBalance.html",[0,0.411,1,4.129,2,3.403,3,0.268,4,0.268,5,0.18,6,3.884,7,0.686,8,1.068,9,4.444,10,4.444,11,0.624,12,0.028,13,3.602,14,4.129,15,5.071,16,1.246,17,4.613,18,2.4,19,5.595,20,3.976,21,5.595,22,4.129,23,4.613,24,0.426,25,3.884,26,2.52,27,4.613,28,3.403,29,4.613,30,0.223,31,0.023,32,0.023]],["title/modules/AccountsModule.html",[33,0.678,34,1.964]],["body/modules/AccountsModule.html",[0,0.359,3,0.234,4,0.234,5,0.157,12,0.028,24,0.436,30,0.195,31,0.021,32,0.021,33,1.062,34,4.079,35,1.387,36,2.208,37,3.396,38,3.396,39,3.396,40,3.396,41,2.51,42,3.446,43,3.446,44,2.706,45,3.998,46,3.652,47,2.584,48,2.025,49,2.025,50,4.033,51,2.048,52,2.208,53,2.208,54,0.548,55,4.033,56,2.203,57,2.412,58,3.396,59,3.396,60,4.033,61,2.203,62,2.025]],["title/injectables/AccountsRestService.html",[45,1.964,63,0.292]],["body/injectables/AccountsRestService.html",[0,0.36,3,0.235,4,0.235,5,0.158,7,0.601,11,0.575,12,0.029,16,1.148,24,0.351,30,0.195,31,0.021,32,0.021,45,3.082,54,0.549,63,0.532,64,1.204,65,4.777,66,2.416,67,0.712,68,1.43,69,4.339,70,1.65,71,2.667,72,3.009,73,2.982,74,2.051,75,3.082,76,1.536,77,1.43,78,1.43,79,1.236,80,5.153,81,1.434,82,4.041,83,3.802,84,4.339,85,3.802,86,2.769,87,1.43,88,1.906,89,2.587,90,2.667,91,1.773,92,1.121,93,1.121,94,1.121,95,1.872,96,1.733,97,1.494,98,1.494,99,2.208,100,4.041,101,1.494,102,2.667,103,4.041,104,4.041,105,1.872,106,1.733,107,1.494]],["title/injectables/AccountsService.html",[46,1.794,63,0.292]],["body/injectables/AccountsService.html",[0,0.125,3,0.205,4,0.081,5,0.055,7,0.208,8,0.447,9,1.728,10,2.6,11,0.546,12,0.029,13,0.838,16,1.09,18,1.511,24,0.321,26,0.766,30,0.068,31,0.01,32,0.01,46,1.28,54,0.19,63,0.314,64,0.418,67,0.247,68,0.65,70,1.128,74,2.155,76,1.05,77,1.307,78,1.307,79,1.13,81,1.417,86,2.99,87,1.528,88,2.037,89,0.704,91,2.014,92,0.65,93,1.247,94,1.665,95,2.083,96,2.167,97,1.663,98,1.663,99,0.766,101,2.185,105,2.083,106,1.928,107,1.663,108,1.18,109,1.398,110,2.021,111,3.168,112,3.017,113,2.342,114,2.342,115,2.342,116,2.342,117,2.342,118,3.017,119,0.838,120,2.021,121,2.458,122,2.342,123,1.402,124,2.76,125,4.236,126,2.54,127,3.919,128,4.236,129,4.236,130,5.309,131,4.236,132,1.402,133,2.342,134,2.967,135,3.524,136,3.524,137,4.279,138,3.729,139,2.835,140,2.065,141,2.342,142,3.695,143,4.712,144,1.402,145,2.342,146,3.524,147,2.326,148,1.769,149,2.342,150,1.402,151,3.524,152,3.524,153,2.342,154,1.402,155,2.967,156,1.738,157,2.342,158,1.402,159,2.54,160,2.342,161,1.402,162,2.342,163,1.402,164,2.967,165,3.567,166,2.587,167,1.402,168,2.342,169,1.728,170,0.601,171,0.601,172,2.342,173,2.342,174,2.342,175,3.524,176,2.342,177,2.342,178,2.456,179,2.342,180,2.342,181,0.482,182,0.838,183,1.402,184,1.402,185,1.546,186,1.402,187,0.838,188,1.18,189,1.18,190,1.18,191,1.035,192,3.359,193,2.366,194,2.688,195,1.648,196,3.3,197,1.804,198,1.546,199,1.728,200,1.402,201,1.402,202,1.402,203,1.402,204,1.991,205,2.226,206,2.54,207,2.54,208,2.54,209,2.226,210,2.54,211,1.18,212,1.402,213,2.342,214,2.342,215,2.342,216,2.342,217,1.402,218,3.524,219,2.342,220,1.546,221,1.972,222,2.326,223,1.18,224,1.18,225,1.035,226,2.326,227,1.991,228,1.402,229,2.533,230,2.326,231,1.18,232,0.838,233,1.28,234,1.728,235,1.402,236,1.402,237,1.402,238,1.402,239,1.402,240,1.402,241,1.402,242,1.402,243,1.035,244,1.035,245,1.402,246,1.972,247,1.546,248,2.342,249,1.972,250,1.546,251,2.342,252,1.18,253,3.524,254,2.342,255,1.401,256,1.728,257,2.342,258,2.342,259,1.402,260,1.402,261,2.342,262,1.402]],["title/modules/ClientModule.html",[33,0.678,41,1.307]],["body/modules/ClientModule.html",[0,0.372,3,0.243,4,0.243,5,0.163,11,0.588,12,0.029,16,1.173,24,0.412,30,0.202,31,0.022,32,0.022,33,1.249,35,1.439,41,2.409,51,2.097,52,1.795,53,2.26,54,0.568,68,1.161,77,1.462,78,1.462,79,1.264,87,1.462,93,1.462,120,2.676,263,4.184,264,4.466,265,2.762,266,3.887,267,2.804,268,4.184,269,4.255,270,4.603,271,2.762,272,3.887,273,4.184,274,4.184,275,3.887,276,3.088,277,2.502,278,4.436,279,3.478,280,3.523,281,3.088,282,3.523,283,2.762,284,3.523]],["title/injectables/ClientService.html",[63,0.292,120,1.409]],["body/injectables/ClientService.html",[0,0.213,3,0.139,4,0.139,5,0.093,7,0.356,8,0.684,11,0.663,12,0.029,14,1.768,16,1.361,18,2.044,24,0.364,30,0.116,31,0.015,32,0.015,54,0.325,63,0.424,64,0.714,67,0.422,68,0.994,70,1.148,76,1.421,77,0.994,78,0.994,79,0.86,81,1.466,86,2.364,87,1.486,91,0.824,92,1.811,93,1.322,94,1.191,106,1.537,110,2.448,120,1.537,124,1.661,134,3.018,140,1.897,156,0.824,170,1.537,171,1.537,181,0.824,193,3.235,204,2.366,205,3.517,209,3.168,225,4.095,233,2.788,234,2.645,255,1.433,267,2.364,277,1.433,279,2.835,283,1.582,285,2.017,286,4.095,287,2.835,288,3.118,289,3.168,290,3.584,291,4.766,292,4.766,293,4.766,294,2.017,295,3.584,296,2.568,297,3.018,298,3.584,299,4.294,300,2.396,301,3.584,302,2.396,303,3.584,304,3.584,305,3.319,306,2.396,307,3.584,308,3.413,309,2.396,310,2.396,311,2.017,312,2.835,313,2.396,314,3.584,315,2.346,316,2.396,317,3.765,318,4.296,319,2.396,320,3.018,321,2.396,322,2.396,323,3.584,324,2.396,325,2.017,326,2.017,327,2.396,328,2.017,329,2.017,330,2.396,331,2.396,332,2.396,333,2.396,334,2.396,335,2.396,336,2.396,337,2.396,338,1.433,339,2.396,340,5.103,341,2.396,342,4.294,343,2.396,344,3.584,345,5.707,346,3.584,347,5.707,348,3.584,349,3.584,350,3.584,351,3.584,352,2.396,353,2.396,354,2.396,355,2.396,356,2.396,357,2.396,358,5.355,359,3.584,360,3.584,361,3.018,362,2.396]],["title/modules/HcsModule.html",[33,0.678,363,1.964]],["body/modules/HcsModule.html",[0,0.378,3,0.246,4,0.246,5,0.165,12,0.028,24,0.426,30,0.205,31,0.022,32,0.022,33,1.097,35,1.46,36,2.28,41,2.543,44,2.741,47,2.668,48,2.13,49,2.13,51,2.115,52,2.28,53,2.28,54,0.576,56,2.318,57,2.537,61,2.318,62,2.13,363,4.056,364,3.572,365,3.572,366,4.243,367,3.572,368,4.026,369,3.678,370,4.243,371,4.243,372,3.131]],["title/injectables/HcsRestService.html",[63,0.292,368,1.964]],["body/injectables/HcsRestService.html",[0,0.375,3,0.245,4,0.245,5,0.164,7,0.627,11,0.59,12,0.029,16,1.179,24,0.36,30,0.204,31,0.022,32,0.022,54,0.573,63,0.54,64,1.257,66,2.522,67,0.743,68,1.469,70,1.695,71,2.784,72,3.034,73,3.112,74,2.107,75,3.166,76,1.578,77,1.469,78,1.469,79,1.27,81,1.388,87,1.17,88,1.958,89,2.118,90,2.784,91,1.451,92,1.17,93,1.17,94,1.17,95,1.954,96,1.809,97,1.56,98,1.56,101,1.56,102,2.784,105,1.954,106,1.809,107,1.56,368,3.166,373,4.873,374,5.295,375,5.295,376,4.218,377,3.112,378,4.218,379,3.112]],["title/injectables/HcsService.html",[63,0.292,369,1.794]],["body/injectables/HcsService.html",[0,0.142,3,0.221,4,0.092,5,0.062,7,0.237,8,0.497,11,0.553,12,0.029,16,1.105,24,0.224,30,0.077,31,0.011,32,0.011,54,0.216,63,0.339,64,0.474,67,0.28,68,0.722,70,0.833,74,2.429,76,1.343,77,1.319,78,1.319,79,1.141,81,1.347,87,1.531,88,2.04,89,1.306,91,2.085,92,0.442,93,1.25,94,1.654,95,2.088,96,1.933,97,1.666,98,1.666,101,2.184,105,2.088,106,2.04,107,1.666,109,1.528,110,2.128,119,0.952,120,2.128,124,2.556,139,2.954,140,2.429,156,2.051,166,3.641,169,1.919,170,0.683,171,0.683,178,2.462,181,0.548,182,0.952,192,3.334,193,2.387,194,2.695,195,2.294,197,0.952,198,2.514,199,1.174,220,2.177,222,2.772,226,3.485,227,2.514,229,2.278,230,2.514,232,1.555,233,1.802,243,1.174,244,2.81,247,1.051,338,1.555,369,1.421,372,1.919,377,4.808,380,1.34,381,3.298,382,3.298,383,3.298,384,3.298,385,4.199,386,3.298,387,2.601,388,1.592,389,5.776,390,3.509,391,1.592,392,4.726,393,5.776,394,1.592,395,1.592,396,2.19,397,1.592,398,3.809,399,5.699,400,2.601,401,4.199,402,4.199,403,4.199,404,1.592,405,1.592,406,3.298,407,1.592,408,3.298,409,1.592,410,3.535,411,1.592,412,1.592,413,1.592,414,4.199,415,1.592,416,2.601,417,2.601,418,1.592,419,2.601,420,2.601,421,2.601,422,1.592,423,1.592,424,4.755,425,4.506,426,2.601,427,2.601,428,2.601,429,3.809,430,2.601,431,2.601,432,2.777,433,2.601,434,2.601,435,1.592,436,1.592,437,1.919,438,2.777,439,1.592,440,1.592,441,1.592,442,1.592,443,1.592,444,3.298,445,1.592,446,1.34,447,1.592,448,1.592,449,1.592,450,3.298,451,1.592,452,1.592,453,1.592,454,1.592,455,1.592,456,1.592,457,1.592,458,1.592,459,1.592]],["title/modules/HederaModule.html",[33,0.678,460,2.168]],["body/modules/HederaModule.html",[0,0.332,3,0.217,4,0.217,5,0.146,11,0.546,12,0.029,16,1.091,22,3.613,24,0.447,30,0.181,31,0.02,32,0.02,33,1.197,34,3.601,35,1.285,41,1.486,42,3.29,43,3.29,44,1.602,51,1.949,52,2.1,53,2.1,54,0.507,56,2.04,57,2.233,58,3.144,59,3.144,68,1.036,77,1.359,78,1.359,79,1.175,87,1.359,93,1.359,264,4.279,265,2.465,266,3.613,267,2.687,269,3.613,270,4.443,271,2.465,272,3.613,277,2.233,363,3.601,460,3.828,461,3.735,462,3.735,463,3.735,464,3.975,465,3.735,466,3.601,467,3.735,468,3.735,469,3.601,470,3.735,471,3.735,472,4.897,473,4.897,474,4.897,475,4.897,476,4.897]],["title/injectables/HederaService.html",[63,0.292,464,2.168]],["body/injectables/HederaService.html",[0,0.42,3,0.274,4,0.274,5,0.184,7,0.701,8,1.083,11,0.526,12,0.028,16,1.05,24,0.321,30,0.228,31,0.023,32,0.023,54,0.64,63,0.562,64,1.406,67,0.831,76,1.881,94,1.573,109,2.817,110,2.868,170,2.022,171,2.022,464,3.743,477,3.97,478,5.67,479,4.715]],["title/modules/HfsModule.html",[33,0.678,469,1.964]],["body/modules/HfsModule.html",[0,0.406,3,0.265,4,0.265,5,0.178,12,0.028,24,0.408,30,0.221,31,0.023,32,0.023,33,1.147,35,1.57,36,2.384,41,2.589,47,2.791,48,2.291,49,2.291,51,2.212,52,2.384,53,2.384,54,0.62,56,2.493,62,2.291,469,4.004,480,3.842,481,4.563,482,3.842,483,3.842,484,3.712,485,4.563,486,4.563]],["title/injectables/HfsService.html",[63,0.292,484,1.794]],["body/injectables/HfsService.html",[0,0.155,3,0.203,4,0.101,5,0.224,7,0.258,8,0.533,11,0.572,12,0.029,13,1.038,16,1.142,24,0.238,30,0.084,31,0.011,32,0.011,54,0.236,63,0.357,64,0.518,67,0.306,68,0.774,69,2.947,70,0.894,74,2.481,76,1.398,77,1.368,78,1.368,79,1.183,81,1.487,84,1.462,87,1.568,88,2.09,91,2.118,92,1.112,93,1.301,94,1.616,97,1.735,98,1.735,101,2.261,107,1.735,109,1.622,110,2.199,111,3.315,119,1.038,120,2.199,124,2.761,139,2.694,140,2.466,148,0.872,156,1.909,164,3.375,165,3.375,166,3.384,169,3.241,170,0.745,171,0.745,178,2.694,181,0.597,182,1.038,192,3.457,193,2.355,194,2.805,195,2.563,197,2.805,198,1.842,220,2.646,222,2.899,223,1.462,224,1.462,227,2.646,229,3.066,232,2.093,243,2.958,338,2.626,396,3.698,484,1.525,487,1.462,488,4.392,489,3.5,490,2.791,491,2.35,492,1.736,493,6.562,494,5.653,495,5.958,496,1.736,497,1.736,498,1.736,499,1.736,500,1.736,501,1.736,502,1.736,503,3.5,504,1.736,505,1.736,506,1.736,507,1.736,508,2.791,509,2.791,510,2.791,511,2.791,512,2.791,513,2.791,514,2.791,515,2.791,516,3.461,517,1.736,518,3.5,519,2.791,520,2.791,521,4.009,522,4.009,523,4.009,524,2.093,525,2.947,526,4.009,527,2.958,528,4.009,529,1.736,530,2.805,531,4.392,532,2.791,533,1.736,534,1.736,535,1.736]],["title/modules/HtsModule.html",[33,0.678,42,1.794]],["body/modules/HtsModule.html",[0,0.373,3,0.243,4,0.243,5,0.164,12,0.028,24,0.425,30,0.203,31,0.022,32,0.022,33,1.089,35,1.442,36,2.263,41,2.627,42,3.723,44,2.733,47,2.648,48,2.105,49,2.105,51,2.099,52,2.263,53,2.263,54,0.569,56,2.291,57,2.507,61,2.291,62,2.105,536,3.53,537,4.193,538,3.53,539,3.53,540,4.019,541,4.019,542,4.193,543,4.193,544,3.094]],["title/injectables/HtsRestService.html",[63,0.292,540,1.964]],["body/injectables/HtsRestService.html",[0,0.198,3,0.238,4,0.129,5,0.087,7,0.33,11,0.58,12,0.029,16,1.158,18,2.577,22,3.025,24,0.279,30,0.107,31,0.014,32,0.014,54,0.302,63,0.408,64,0.662,66,1.328,67,0.391,68,0.939,70,1.084,71,1.466,72,2.506,75,2.024,76,1.009,77,1.443,78,1.443,79,1.248,81,1.562,85,2.497,87,1.617,88,2.155,89,2.974,90,1.466,91,1.861,92,0.616,93,1.37,94,1.547,95,2.287,96,2.117,97,1.825,98,2.062,101,2.222,102,3.771,105,2.287,106,2.117,107,1.825,142,3.593,147,2.234,234,3.384,255,2.452,379,1.638,530,2.452,540,2.024,544,2.497,545,4.554,546,3.384,547,3.384,548,3.384,549,3.384,550,3.384,551,2.22,552,3.384,553,2.22,554,6.2,555,3.384,556,5.576,557,2.22,558,3.384,559,2.22,560,3.861,561,3.384,562,3.384,563,2.22,564,3.384,565,1.869,566,3.384,567,2.22,568,2.22,569,4.586,570,6.008,571,5.201,572,5.713,573,3.861,574,4.1,575,3.452,576,3.452,577,3.861,578,4.586,579,3.384,580,3.452,581,4.1,582,2.22,583,3.384,584,2.22,585,4.1,586,2.22,587,3.384,588,2.22,589,2.22,590,2.22]],["title/injectables/HtsService.html",[63,0.292,541,1.964]],["body/injectables/HtsService.html",[0,0.099,3,0.148,4,0.065,5,0.043,7,0.286,8,0.367,11,0.56,12,0.029,13,2.402,16,1.119,18,2.49,24,0.206,30,0.054,31,0.008,32,0.008,54,0.151,63,0.27,64,0.332,67,0.196,68,0.534,70,0.616,74,2.508,76,1.116,77,1.361,78,1.361,79,1.177,81,1.276,86,2.855,87,1.537,88,2.071,91,2.084,92,0.309,93,1.451,94,1.68,95,2.211,96,2.243,97,1.764,98,1.764,101,2.205,105,1.968,106,1.822,107,1.571,109,1.178,110,1.822,111,3.293,119,0.665,120,1.822,124,2.778,139,2.429,140,2.452,142,3.859,147,2.804,156,2.062,166,3.452,170,0.477,171,0.477,178,2.607,181,0.383,182,0.665,192,3.39,193,2.395,194,2.853,195,1.654,196,1.619,197,1.811,199,2.234,204,0.734,205,0.821,206,0.936,207,0.936,208,0.936,209,0.821,210,0.936,211,0.936,220,2.258,221,2.549,222,3.049,226,2.651,227,2.651,229,2.853,230,2.651,231,2.549,232,1.15,233,1.388,246,2.549,247,2.258,249,2.549,250,1.999,255,1.52,288,1.654,296,1.811,524,2.046,525,2.549,527,2.234,541,1.15,544,1.419,560,3.381,591,0.936,592,2.541,593,2.541,594,1.923,595,1.923,596,2.541,597,2.541,598,1.923,599,2.541,600,2.541,601,2.541,602,1.923,603,1.923,604,1.112,605,1.112,606,1.923,607,1.112,608,1.112,609,1.923,610,1.923,611,2.541,612,1.112,613,4.906,614,4.016,615,1.112,616,1.112,617,1.112,618,1.112,619,1.112,620,1.112,621,1.112,622,1.112,623,3.028,624,1.112,625,1.923,626,1.112,627,3.745,628,1.112,629,1.112,630,1.112,631,1.112,632,4.446,633,4.247,634,1.112,635,1.112,636,1.112,637,3.745,638,2.541,639,1.112,640,1.923,641,1.112,642,1.923,643,1.923,644,1.923,645,1.923,646,1.923,647,1.923,648,1.923,649,3.421,650,1.619,651,1.923,652,1.923,653,1.923,654,1.923,655,2.258,656,1.112,657,1.923,658,1.112,659,1.923,660,1.923,661,1.112,662,1.112,663,1.112,664,1.112,665,0.936,666,1.923,667,1.112,668,1.112,669,1.112,670,1.112,671,1.923,672,1.112,673,1.923,674,1.112,675,2.541,676,3.028,677,3.028,678,3.028,679,2.549,680,3.028,681,3.028,682,2.234,683,3.028,684,3.028,685,2.549,686,3.028,687,1.112,688,1.112,689,1.112,690,1.923,691,1.923,692,1.923,693,1.923,694,3.745,695,1.112,696,1.112,697,1.923,698,1.112,699,1.923,700,1.112,701,1.112,702,1.112,703,1.112,704,1.112,705,1.112,706,1.112,707,1.923,708,1.112,709,1.112,710,1.923,711,1.112,712,1.112,713,1.112]],["title/interfaces/IAccountBalance.html",[185,2.168,714,0.911]],["body/interfaces/IAccountBalance.html",[3,0.27,4,0.27,5,0.181,7,0.692,8,1.074,9,4.635,10,4.822,11,0.627,12,0.028,13,3.908,18,2.758,24,0.383,25,3.918,26,2.542,30,0.225,31,0.023,32,0.023,67,0.82,185,3.713,286,4.151,714,1.678,715,2.156,716,3.918,717,4.653]],["title/interfaces/IHederaOptions.html",[267,1.522,714,0.911]],["body/interfaces/IHederaOptions.html",[3,0.241,4,0.241,5,0.162,7,0.617,8,1.001,11,0.709,12,0.029,18,2.669,24,0.391,30,0.201,31,0.021,32,0.021,67,0.732,81,1.378,86,2.429,156,1.428,181,1.428,267,2.429,286,4.762,287,3.984,288,3.472,289,4.69,305,3.436,308,2.483,311,4.414,312,3.793,315,3.297,317,4.239,318,4.838,320,4.414,714,1.594,715,1.924,718,3.496,719,4.152,720,4.152]],["title/interfaces/IMirrorNode.html",[315,1.794,714,0.911]],["body/interfaces/IMirrorNode.html",[3,0.277,4,0.277,5,0.186,7,0.711,8,1.091,11,0.637,12,0.028,30,0.231,31,0.023,32,0.023,67,0.842,79,1.371,81,1.626,315,3.123,714,1.586,715,2.214,721,4.024,722,6.338,723,4.341,724,5.716]],["title/interfaces/IOperator.html",[308,1.964,714,0.911]],["body/interfaces/IOperator.html",[3,0.254,4,0.254,5,0.171,7,0.652,8,1.036,11,0.686,12,0.028,30,0.212,31,0.022,32,0.022,67,0.772,79,1.476,81,1.654,86,2.851,92,1.505,137,4.002,140,2.449,148,2.723,155,4.566,156,2.117,308,3.243,714,1.505,715,2.031,723,4.253,725,3.691,726,5.181]],["title/interfaces/IPrivateKeyList.html",[187,1.964,714,0.911]],["body/interfaces/IPrivateKeyList.html",[3,0.27,4,0.27,5,0.181,7,0.692,8,1.074,11,0.627,12,0.028,18,2.413,24,0.317,30,0.225,31,0.023,32,0.023,67,0.82,92,1.561,140,2.5,156,1.601,181,1.601,187,3.364,390,4.922,524,3.756,714,1.678,715,2.156,727,3.918,728,3.918,729,5.289,730,4.736]],["title/interfaces/ITokenBalance.html",[26,1.794,714,0.911]],["body/interfaces/ITokenBalance.html",[3,0.261,4,0.261,5,0.176,7,0.67,8,1.053,11,0.665,12,0.028,24,0.306,26,3.013,30,0.218,31,0.023,32,0.023,67,0.794,81,1.529,124,2.555,138,4.785,142,3.715,147,4.281,148,2.769,190,5.53,191,3.324,256,4.785,714,1.654,715,2.087,731,3.793]],["title/interfaces/ITransactionDetails.html",[655,2.168,714,0.911]],["body/interfaces/ITransactionDetails.html",[3,0.272,4,0.272,5,0.183,7,0.698,8,1.08,11,0.631,12,0.028,24,0.319,30,0.227,31,0.023,32,0.023,67,0.827,74,2.507,148,2.839,178,3.695,181,1.615,250,4.159,655,3.733,714,1.684,715,2.175,732,3.952,733,4.648]],["title/modules/KeysModule.html",[33,0.678,43,1.794]],["body/modules/KeysModule.html",[0,0.421,3,0.274,4,0.274,5,0.184,12,0.028,24,0.386,30,0.229,31,0.023,32,0.023,33,1.172,35,1.626,36,2.435,43,3.623,47,2.851,48,2.373,49,2.373,51,2.259,53,2.435,54,0.642,62,2.373,121,3.426,734,3.979,735,3.979,736,3.979,737,4.726,738,4.726]],["title/injectables/KeysService.html",[63,0.292,121,1.649]],["body/injectables/KeysService.html",[0,0.448,3,0.184,4,0.184,5,0.124,7,0.471,8,0.837,11,0.489,12,0.029,16,1.208,18,1.36,24,0.342,30,0.153,31,0.018,32,0.018,54,0.431,63,0.483,64,0.945,67,0.559,68,1.217,70,1.61,76,1.617,77,0.88,78,0.88,79,0.761,81,1.301,87,1.505,88,2.006,91,1.73,92,1.217,93,1.217,94,1.675,96,2.156,97,1.622,98,1.622,101,1.172,107,1.622,109,2.329,110,2.64,121,2.202,124,2.852,126,4.233,139,2.747,140,1.745,156,1.959,170,1.36,171,1.36,181,1.091,187,2.622,188,2.669,189,2.669,192,1.732,233,2.396,390,4.202,432,2.669,437,2.339,516,3.236,524,3.244,530,2.622,679,2.669,685,5.182,726,2.669,729,4.795,730,3.692,739,2.669,740,5.425,741,5.028,742,4.385,743,4.385,744,3.17,745,5.695,746,3.17,747,5.425,748,3.17,749,4.385,750,4.385,751,3.17,752,3.17,753,3.17,754,3.17,755,3.17,756,4.385,757,2.669,758,3.17,759,3.17,760,3.17,761,3.17]],["title/modules/RestModule.html",[33,0.678,44,1.409]],["body/modules/RestModule.html",[0,0.367,3,0.239,4,0.239,5,0.161,11,0.582,12,0.029,16,1.162,24,0.422,30,0.199,31,0.021,32,0.021,33,1.242,35,1.417,44,2.581,51,2.076,52,2.237,53,2.237,54,0.559,61,2.251,68,1.143,72,2.877,77,1.447,78,1.447,79,1.251,87,1.447,93,1.447,264,4.44,265,2.719,266,3.849,267,2.788,269,4.224,270,4.581,271,2.719,272,3.849,275,3.849,276,3.039,277,2.463,278,4.392,279,3.443,280,3.468,281,3.039,282,3.468,283,2.719,284,3.468,762,4.119,763,4.119,764,4.119,765,5.725,766,3.039]],["title/injectables/RestService.html",[63,0.292,72,1.522]],["body/injectables/RestService.html",[0,0.309,3,0.201,4,0.201,5,0.135,7,0.516,8,0.891,11,0.628,12,0.029,16,1.255,24,0.383,30,0.168,31,0.019,32,0.019,54,0.471,63,0.501,64,1.035,67,0.612,68,1.294,70,1.494,72,2.162,74,1.857,75,2.79,76,1.804,77,1.294,78,1.294,79,1.119,81,1.352,87,1.294,88,1.725,89,1.743,91,1.813,92,1.631,93,0.963,94,1.462,97,1.284,98,1.284,99,2.549,101,1.284,107,1.284,109,2.441,110,2.697,111,2.879,170,1.489,171,1.489,267,2.724,277,2.076,279,3.478,283,2.292,287,3.478,294,2.923,305,3.369,312,3.719,315,2.879,328,2.923,329,2.923,516,2.561,530,2.076,766,2.561,767,2.923,768,5.634,769,6.369,770,4.665,771,4.665,772,3.472,773,4.665,774,4.665,775,3.472,776,3.472,777,3.472,778,5.634,779,3.472,780,3.472,781,3.472,782,3.472,783,3.472,784,3.472,785,3.472]],["title/classes/TokenBalance.html",[0,0.292,20,2.168]],["body/classes/TokenBalance.html",[0,0.418,2,3.464,3,0.272,4,0.272,5,0.183,7,0.698,8,1.08,11,0.677,12,0.028,14,4.478,15,5.577,16,1.352,20,3.733,24,0.319,28,3.464,30,0.227,31,0.023,32,0.023,81,1.357,124,2.919,138,4.478,142,3.629,256,4.478,786,3.952,787,4.694,788,4.694,789,4.694]],["title/modules/TransactionsModule.html",[33,0.678,466,1.964]],["body/modules/TransactionsModule.html",[0,0.378,3,0.246,4,0.246,5,0.165,12,0.028,24,0.426,30,0.205,31,0.022,32,0.022,33,1.097,35,1.46,36,2.28,41,2.543,44,2.741,47,2.668,48,2.13,49,2.13,51,2.115,52,2.28,53,2.28,54,0.576,56,2.318,57,2.537,61,2.318,62,2.13,99,2.318,466,4.056,790,3.572,791,4.243,792,3.572,793,3.572,794,3.678,795,3.678,796,4.243,797,4.243]],["title/injectables/TransactionsRestService.html",[63,0.292,794,1.794]],["body/injectables/TransactionsRestService.html",[0,0.207,3,0.135,4,0.135,5,0.091,7,0.345,11,0.613,12,0.029,16,1.223,24,0.238,30,0.112,31,0.014,32,0.014,54,0.315,63,0.418,64,0.692,66,1.389,67,0.409,68,0.971,70,1.121,71,1.533,72,2.619,73,1.714,74,2.25,75,2.094,76,1.044,77,1.524,78,1.524,79,1.318,81,1.603,83,4.477,86,2.619,87,1.684,88,2.244,89,3.236,90,1.533,91,1.99,92,0.644,93,1.468,94,1.569,95,2.452,96,2.27,97,1.957,98,1.957,99,3.315,101,2.18,102,3.732,105,2.452,106,2.27,107,1.957,139,1.269,148,1.758,250,2.311,379,2.583,565,1.955,573,2.948,575,2.948,576,2.948,577,2.948,682,2.583,723,2.311,733,2.583,794,1.913,798,4.76,799,3.501,800,3.501,801,3.501,802,3.501,803,3.501,804,3.501,805,3.501,806,5.292,807,2.323,808,3.501,809,5.654,810,3.501,811,2.323,812,2.948,813,3.501,814,2.323,815,3.501,816,2.323,817,3.501,818,2.323,819,2.323,820,4.692,821,3.501,822,3.501,823,3.501,824,3.501,825,3.501,826,3.501,827,3.501,828,2.323,829,2.323,830,2.323,831,3.501,832,2.323,833,2.323,834,2.323]],["title/injectables/TransactionsService.html",[63,0.292,795,1.794]],["body/injectables/TransactionsService.html",[0,0.202,3,0.269,4,0.131,5,0.088,7,0.337,8,0.656,11,0.607,12,0.029,16,1.213,24,0.282,30,0.11,31,0.014,32,0.014,54,0.308,63,0.412,64,0.675,67,0.399,68,0.953,70,1.1,74,2.615,76,1.381,77,1.454,78,1.454,79,1.258,81,1.112,83,3.868,87,1.652,88,2.166,91,1.874,92,0.629,93,1.382,94,1.674,95,2.307,96,2.136,97,1.842,98,1.842,101,2.075,105,2.307,106,2.136,107,1.842,109,1.923,110,2.406,111,3.4,119,1.355,120,2.248,140,1.982,148,1.137,156,1.803,159,4.193,170,0.972,171,0.972,178,2.268,181,0.779,182,1.355,192,3.2,193,2.734,194,2.978,195,1.877,197,2.055,198,2.74,225,2.535,226,2.268,229,3.651,230,2.268,232,1.355,233,1.238,247,1.495,252,1.907,288,1.238,296,1.355,338,2.055,410,1.907,438,2.893,446,1.907,527,1.672,650,2.893,665,2.893,682,3.868,733,4.592,795,1.877,835,1.907,836,3.436,837,3.436,838,3.436,839,3.436,840,3.436,841,3.436,842,3.436,843,3.436,844,2.265,845,3.436,846,3.436,847,2.265,848,6.035,849,3.436,850,2.265,851,3.436,852,2.265,853,3.436,854,2.265,855,3.436,856,4.151,857,3.436,858,3.436,859,3.436,860,3.436,861,3.436,862,3.436,863,3.436,864,2.265,865,3.436,866,2.265,867,2.893,868,3.436,869,2.265,870,2.265,871,2.265,872,2.265,873,2.265,874,2.265]],["title/coverage.html",[875,3.783]],["body/coverage.html",[0,0.45,1,2.893,5,0.153,6,3.301,11,0.437,12,0.028,20,2.588,26,2.142,31,0.021,32,0.021,45,2.345,46,2.142,63,0.596,65,3.301,66,3.534,72,1.817,94,1.088,108,3.301,120,1.682,121,1.969,156,1.349,185,2.588,187,2.345,255,3.023,267,1.817,285,3.301,308,2.345,315,2.142,368,2.345,369,2.142,373,3.301,380,3.301,464,2.588,477,3.301,484,2.142,487,3.301,540,2.345,541,2.345,545,3.301,580,5.713,591,3.301,655,2.588,714,1.767,716,3.301,718,3.301,721,3.301,725,3.301,727,3.301,728,3.301,731,3.301,732,3.301,739,3.301,767,3.301,786,3.301,794,2.142,795,2.142,798,3.301,835,3.301,875,3.301,876,3.921,877,3.921,878,3.921,879,6.116,880,3.921,881,3.921,882,3.921,883,3.921,884,3.921,885,5.055,886,3.921,887,3.921,888,3.921,889,5.594,890,5.055,891,3.921,892,3.921,893,3.921,894,3.921,895,3.921,896,3.921,897,3.921]],["title/dependencies.html",[36,1.696,898,2.305]],["body/dependencies.html",[12,0.028,28,3.641,31,0.024,32,0.024,36,2.117,54,0.67,181,1.698,191,3.641,276,3.641,325,4.155,326,4.155,766,3.641,899,4.935,900,4.935,901,4.935,902,4.935,903,4.935,904,4.935,905,4.935,906,4.935,907,4.935,908,4.935,909,4.935,910,4.935,911,4.935,912,4.935,913,4.935,914,4.935]],["title/index.html",[7,0.407,867,2.305,915,2.738]],["body/index.html",[0,0.381,5,0.12,12,0.029,24,0.439,30,0.207,31,0.018,32,0.018,33,0.884,46,2.698,51,1.22,52,1.837,54,0.582,61,1.674,62,1.539,63,0.381,70,0.981,76,0.914,85,2.261,86,1.985,92,1.66,94,1.188,99,1.674,111,1.674,121,2.479,137,3.161,140,1.705,156,1.474,181,1.054,193,1.539,195,2.34,204,2.023,244,2.261,265,2.023,271,2.023,275,2.261,281,2.261,287,2.827,288,2.34,289,3.161,296,3.197,297,2.58,305,2.562,312,2.827,317,2.261,338,1.833,369,2.698,372,2.261,377,2.261,392,2.58,437,4.151,460,2.827,484,2.698,491,2.58,524,1.833,530,3.485,723,2.023,757,3.606,794,2.34,795,1.674,812,2.58,916,2.58,917,4.157,918,3.065,919,3.065,920,3.065,921,3.065,922,4.283,923,3.065,924,3.065,925,3.065,926,6.104,927,3.065,928,4.283,929,3.065,930,3.065,931,4.283,932,3.065,933,3.065,934,4.283,935,3.065,936,3.065,937,3.065,938,3.065,939,4.283,940,3.065,941,4.938,942,3.065,943,3.065,944,3.065,945,3.065,946,3.065,947,3.065,948,3.065,949,5.346,950,3.065,951,3.065,952,3.065,953,3.065,954,3.065,955,3.065,956,3.065,957,3.065,958,3.065,959,3.065,960,3.065,961,3.065,962,3.065,963,3.065,964,3.065,965,3.065,966,3.065,967,3.065,968,3.065,969,4.283,970,3.065,971,3.065,972,3.065,973,3.065,974,3.065,975,3.065,976,3.065,977,4.938,978,5.828,979,3.065,980,3.065,981,3.065,982,3.065,983,3.065,984,3.065,985,3.065,986,3.065,987,3.065,988,3.065,989,3.065,990,3.065,991,3.065]],["title/modules.html",[35,1.546]],["body/modules.html",[12,0.024,31,0.024,32,0.024,34,2.904,35,1.67,41,1.932,42,2.653,43,2.653,44,2.083,363,2.904,460,3.205,466,2.904,469,2.904,992,6.6,993,6.6,994,6.6,995,6.762,996,6.157,997,6.157]],["title/overview.html",[998,3.783]],["body/overview.html",[2,2.557,12,0.028,31,0.019,32,0.019,34,3.99,35,1.192,36,1.999,37,2.918,38,2.918,39,2.918,40,2.918,41,2.501,42,3.63,43,3.305,44,2.595,45,3.697,46,3.377,47,2.34,48,1.74,49,1.74,64,1.033,121,3.104,361,2.918,363,3.91,364,2.918,365,2.918,367,2.918,368,3.697,369,3.377,466,3.91,469,3.697,480,2.918,482,2.918,483,2.918,484,3.377,536,2.918,538,2.918,539,2.918,540,3.697,541,3.697,715,1.606,734,2.918,735,2.918,736,2.918,790,2.918,792,2.918,793,2.918,794,3.377,795,3.377,998,2.918,999,3.466,1000,3.466,1001,3.466]],["title/properties.html",[8,0.755,898,2.305]],["body/properties.html",[8,0.947,12,0.028,31,0.024,32,0.024,67,0.874,288,2.709,296,3.494,305,2.965,916,5.23,917,4.174,1002,4.958,1003,4.958,1004,4.958,1005,4.958,1006,4.958,1007,4.958,1008,4.958,1009,4.958,1010,4.958,1011,4.958,1012,4.958,1013,4.958,1014,4.958,1015,4.958,1016,4.958,1017,4.958]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":255,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"coverage.html":{}}}],["0.0.7",{"_index":900,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["0/3",{"_index":894,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":895,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":234,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HtsRestService.html":{}}}],["1).then(account",{"_index":967,"title":{},"body":{"index.html":{}}}],["1.0.0",{"_index":1003,"title":{},"body":{"properties.html":{}}}],["1.1.1",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":694,"title":{},"body":{"injectables/HtsService.html":{}}}],["10.3.1",{"_index":909,"title":{},"body":{"dependencies.html":{}}}],["10/10",{"_index":880,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":580,"title":{},"body":{"injectables/HtsRestService.html":{},"coverage.html":{}}}],["1000",{"_index":825,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["13",{"_index":999,"title":{},"body":{"overview.html":{}}}],["14/14",{"_index":888,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":1000,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["2.18.0",{"_index":899,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":886,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":884,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":359,"title":{},"body":{"injectables/ClientService.html":{}}}],["3",{"_index":358,"title":{},"body":{"injectables/ClientService.html":{}}}],["3/3",{"_index":879,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":893,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":892,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":889,"title":{},"body":{"coverage.html":{}}}],["6.0.5",{"_index":906,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":883,"title":{},"body":{"coverage.html":{}}}],["69",{"_index":881,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1001,"title":{},"body":{"overview.html":{}}}],["7.5.5",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":887,"title":{},"body":{"coverage.html":{}}}],["8.4.5",{"_index":901,"title":{},"body":{"dependencies.html":{}}}],["8.4.6",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":890,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":891,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":361,"title":{},"body":{"injectables/ClientService.html":{},"overview.html":{}}}],["9/13",{"_index":882,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":885,"title":{},"body":{"coverage.html":{}}}],["account",{"_index":137,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/IOperator.html":{},"index.html":{}}}],["account's",{"_index":200,"title":{},"body":{"injectables/AccountsService.html":{}}}],["account.accountid",{"_index":974,"title":{},"body":{"index.html":{}}}],["account.key.tostring",{"_index":970,"title":{},"body":{"index.html":{}}}],["accountbalance",{"_index":1,"title":{"classes/AccountBalance.html":{}},"body":{"classes/AccountBalance.html":{},"coverage.html":{}}}],["accountbalancequery",{"_index":173,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountcreatetransaction",{"_index":174,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountid",{"_index":86,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HtsService.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IOperator.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["accountid(nodeaccountid",{"_index":362,"title":{},"body":{"injectables/ClientService.html":{}}}],["accountinfo",{"_index":175,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfoquery",{"_index":176,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfos",{"_index":100,"title":{},"body":{"injectables/AccountsRestService.html":{}}}],["accounts",{"_index":60,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts.service",{"_index":55,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts/accounts.module",{"_index":471,"title":{},"body":{"modules/HederaModule.html":{}}}],["accountsmodule",{"_index":34,"title":{"modules/AccountsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["accountsrestservice",{"_index":45,"title":{"injectables/AccountsRestService.html":{}},"body":{"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"coverage.html":{},"overview.html":{}}}],["accountsservice",{"_index":46,"title":{"injectables/AccountsService.html":{}},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["accountupdatetransaction",{"_index":177,"title":{},"body":{"injectables/AccountsService.html":{}}}],["add",{"_index":929,"title":{},"body":{"index.html":{}}}],["addhbartransfer(from",{"_index":671,"title":{},"body":{"injectables/HtsService.html":{}}}],["addhbartransfer(swap.from",{"_index":703,"title":{},"body":{"injectables/HtsService.html":{}}}],["addhbartransfer(swap.to",{"_index":705,"title":{},"body":{"injectables/HtsService.html":{}}}],["addhbartransfer(to",{"_index":673,"title":{},"body":{"injectables/HtsService.html":{}}}],["addmetadata(buffer.from(cid",{"_index":661,"title":{},"body":{"injectables/HtsService.html":{}}}],["addnfttransfer(new",{"_index":713,"title":{},"body":{"injectables/HtsService.html":{}}}],["addtokentransfer(swap.token.id",{"_index":707,"title":{},"body":{"injectables/HtsService.html":{}}}],["addtokentransfer(token_id",{"_index":697,"title":{},"body":{"injectables/HtsService.html":{}}}],["addtokentransfer(tokenid",{"_index":693,"title":{},"body":{"injectables/HtsService.html":{}}}],["admin",{"_index":425,"title":{},"body":{"injectables/HcsService.html":{}}}],["adminkey",{"_index":393,"title":{},"body":{"injectables/HcsService.html":{}}}],["allow",{"_index":683,"title":{},"body":{"injectables/HtsService.html":{}}}],["amount",{"_index":633,"title":{},"body":{"injectables/HtsService.html":{}}}],["amount.tofixed(8",{"_index":672,"title":{},"body":{"injectables/HtsService.html":{}}}],["amount[index",{"_index":698,"title":{},"body":{"injectables/HtsService.html":{}}}],["api",{"_index":724,"title":{},"body":{"interfaces/IMirrorNode.html":{}}}],["apikey",{"_index":722,"title":{},"body":{"interfaces/IMirrorNode.html":{}}}],["apiproperty",{"_index":15,"title":{},"body":{"classes/AccountBalance.html":{},"classes/TokenBalance.html":{}}}],["apiproperty({type",{"_index":19,"title":{},"body":{"classes/AccountBalance.html":{}}}],["app.controller",{"_index":940,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":933,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":942,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":939,"title":{},"body":{"index.html":{}}}],["append",{"_index":488,"title":{},"body":{"injectables/HfsService.html":{}}}],["append(fileid",{"_index":492,"title":{},"body":{"injectables/HfsService.html":{}}}],["appmodule",{"_index":931,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":941,"title":{},"body":{"index.html":{}}}],["array",{"_index":18,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{}}}],["array(length).keys()].foreach",{"_index":759,"title":{},"body":{"injectables/KeysService.html":{}}}],["array.isarray(amount",{"_index":691,"title":{},"body":{"injectables/HtsService.html":{}}}],["array.isarray(keys",{"_index":659,"title":{},"body":{"injectables/HtsService.html":{}}}],["array.isarray(supplykey",{"_index":662,"title":{},"body":{"injectables/HtsService.html":{}}}],["array.isarray(tokendecimals",{"_index":692,"title":{},"body":{"injectables/HtsService.html":{}}}],["array.isarray(tokenid",{"_index":690,"title":{},"body":{"injectables/HtsService.html":{}}}],["associate",{"_index":606,"title":{},"body":{"injectables/HtsService.html":{}}}],["associatetoken",{"_index":592,"title":{},"body":{"injectables/HtsService.html":{}}}],["associatetoken(accountid",{"_index":604,"title":{},"body":{"injectables/HtsService.html":{}}}],["async",{"_index":111,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["async(message",{"_index":983,"title":{},"body":{"index.html":{}}}],["atomic",{"_index":609,"title":{},"body":{"injectables/HtsService.html":{}}}],["atomicswap",{"_index":593,"title":{},"body":{"injectables/HtsService.html":{}}}],["atomicswap(swaps",{"_index":607,"title":{},"body":{"injectables/HtsService.html":{}}}],["author",{"_index":1017,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":780,"title":{},"body":{"injectables/RestService.html":{}}}],["available",{"_index":997,"title":{},"body":{"modules.html":{}}}],["await",{"_index":101,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["axios",{"_index":907,"title":{},"body":{"dependencies.html":{}}}],["balance",{"_index":138,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/ITokenBalance.html":{},"classes/TokenBalance.html":{}}}],["boolean",{"_index":130,"title":{},"body":{"injectables/AccountsService.html":{}}}],["break",{"_index":347,"title":{},"body":{"injectables/ClientService.html":{}}}],["browse",{"_index":995,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":992,"title":{},"body":{"modules.html":{}}}],["bugs",{"_index":1009,"title":{},"body":{"properties.html":{}}}],["burn",{"_index":616,"title":{},"body":{"injectables/HtsService.html":{}}}],["burnnfttoken",{"_index":594,"title":{},"body":{"injectables/HtsService.html":{}}}],["burnnfttoken(tokenid",{"_index":612,"title":{},"body":{"injectables/HtsService.html":{}}}],["call",{"_index":768,"title":{},"body":{"injectables/RestService.html":{}}}],["call(`accounts/${accountid",{"_index":103,"title":{},"body":{"injectables/AccountsRestService.html":{}}}],["call(`accounts/${walletid}/nfts",{"_index":586,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`accounts/${walletid}/nfts?${next",{"_index":588,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`schedules/${transactionid",{"_index":834,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`tokens/${tokenid",{"_index":567,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances",{"_index":568,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?${next",{"_index":579,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?account.id=gt:${walletid",{"_index":590,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/nfts",{"_index":582,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/nfts?${next",{"_index":584,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`topics/${topicid}/messages?order=desc",{"_index":378,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["call(`transactions/${transaction_id",{"_index":832,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid",{"_index":833,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&${next",{"_index":826,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&timestamp=gt:${timestamp",{"_index":819,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?timestamp=${timestamp",{"_index":830,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(endpoint",{"_index":771,"title":{},"body":{"injectables/RestService.html":{}}}],["call(url",{"_index":829,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["callback",{"_index":398,"title":{},"body":{"injectables/HcsService.html":{}}}],["callback(message",{"_index":458,"title":{},"body":{"injectables/HcsService.html":{}}}],["calling",{"_index":951,"title":{},"body":{"index.html":{}}}],["case",{"_index":345,"title":{},"body":{"injectables/ClientService.html":{}}}],["catch",{"_index":105,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["catch(error",{"_index":530,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"index.html":{}}}],["choice",{"_index":320,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{}}}],["cid",{"_index":623,"title":{},"body":{"injectables/HtsService.html":{}}}],["class",{"_index":0,"title":{"classes/AccountBalance.html":{},"classes/TokenBalance.html":{}},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AccountBalance.html":{},"classes/TokenBalance.html":{},"overview.html":{}}}],["client",{"_index":193,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client.formainnet",{"_index":348,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.fornetwork(this.custom.node).setmirrornetwork(this.custom.mirror",{"_index":351,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.fortestnet",{"_index":346,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.service",{"_index":274,"title":{},"body":{"modules/ClientModule.html":{}}}],["client.setoperator(accountid",{"_index":357,"title":{},"body":{"injectables/ClientService.html":{}}}],["client/client.module",{"_index":56,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["client/client.service",{"_index":182,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["clientmodule",{"_index":41,"title":{"modules/ClientModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["clientmodule.forroot(options",{"_index":472,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientmodule.forrootasync(options",{"_index":475,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientservice",{"_index":120,"title":{"injectables/ClientService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["cluster_accountsmodule",{"_index":37,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_exports",{"_index":38,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_imports",{"_index":40,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_providers",{"_index":39,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule",{"_index":364,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_exports",{"_index":367,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_imports",{"_index":366,"title":{},"body":{"modules/HcsModule.html":{}}}],["cluster_hcsmodule_providers",{"_index":365,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule",{"_index":480,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_exports",{"_index":482,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_imports",{"_index":481,"title":{},"body":{"modules/HfsModule.html":{}}}],["cluster_hfsmodule_providers",{"_index":483,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_htsmodule",{"_index":536,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_exports",{"_index":538,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_imports",{"_index":537,"title":{},"body":{"modules/HtsModule.html":{}}}],["cluster_htsmodule_providers",{"_index":539,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_keysmodule",{"_index":734,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_exports",{"_index":736,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_providers",{"_index":735,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule",{"_index":790,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_exports",{"_index":792,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_imports",{"_index":791,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["cluster_transactionsmodule_providers",{"_index":793,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["configmodule",{"_index":275,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["configservice",{"_index":949,"title":{},"body":{"index.html":{}}}],["configservice.get('network",{"_index":956,"title":{},"body":{"index.html":{}}}],["configservice.get(`mirrornode",{"_index":955,"title":{},"body":{"index.html":{}}}],["configservice.get>(`operators",{"_index":954,"title":{},"body":{"index.html":{}}}],["connect",{"_index":938,"title":{},"body":{"index.html":{}}}],["connection",{"_index":339,"title":{},"body":{"injectables/ClientService.html":{}}}],["consensus",{"_index":231,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["console.error(\"error",{"_index":456,"title":{},"body":{"injectables/HcsService.html":{}}}],["console.error(error",{"_index":978,"title":{},"body":{"index.html":{}}}],["console.log(\"account",{"_index":968,"title":{},"body":{"index.html":{}}}],["console.log(\"subscribed",{"_index":987,"title":{},"body":{"index.html":{}}}],["console.log(hcsmessage",{"_index":986,"title":{},"body":{"index.html":{}}}],["console.log(response",{"_index":977,"title":{},"body":{"index.html":{}}}],["const",{"_index":192,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["constructor",{"_index":70,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["constructor(clientservice",{"_index":119,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["constructor(hederaoptions",{"_index":294,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["constructor(restservice",{"_index":71,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["content",{"_index":494,"title":{},"body":{"injectables/HfsService.html":{}}}],["contents",{"_index":503,"title":{},"body":{"injectables/HfsService.html":{}}}],["controllers",{"_index":62,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["coverage",{"_index":875,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":338,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["create(key",{"_index":497,"title":{},"body":{"injectables/HfsService.html":{}}}],["createaccount",{"_index":112,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createaccount(balance",{"_index":123,"title":{},"body":{"injectables/AccountsService.html":{}}}],["creates",{"_index":133,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createscheduledtransaction",{"_index":836,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createscheduledtransaction(transactiontoschedule",{"_index":843,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createtopic",{"_index":381,"title":{},"body":{"injectables/HcsService.html":{}}}],["createtopic(adminkey",{"_index":388,"title":{},"body":{"injectables/HcsService.html":{}}}],["creating",{"_index":195,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["currentadminkey",{"_index":414,"title":{},"body":{"injectables/HcsService.html":{}}}],["custom",{"_index":286,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{}}}],["decimal",{"_index":190,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/ITokenBalance.html":{}}}],["decimal(0",{"_index":261,"title":{},"body":{"injectables/AccountsService.html":{}}}],["decimal(response.tokendecimals?._map.get(tokenid",{"_index":257,"title":{},"body":{"injectables/AccountsService.html":{}}}],["decimal(response.tokens._map.get(tokenid)?.tostring",{"_index":254,"title":{},"body":{"injectables/AccountsService.html":{}}}],["decimal.js",{"_index":191,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/ITokenBalance.html":{},"dependencies.html":{}}}],["decimals",{"_index":256,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/ITokenBalance.html":{},"classes/TokenBalance.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/ClientService.html":{},"classes/TokenBalance.html":{}}}],["default",{"_index":170,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["delete",{"_index":396,"title":{},"body":{"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["delete(fileid",{"_index":499,"title":{},"body":{"injectables/HfsService.html":{}}}],["deletetopic",{"_index":382,"title":{},"body":{"injectables/HcsService.html":{}}}],["deletetopic(topicid",{"_index":394,"title":{},"body":{"injectables/HcsService.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":67,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["dex",{"_index":1006,"title":{},"body":{"properties.html":{}}}],["disassociate",{"_index":619,"title":{},"body":{"injectables/HtsService.html":{}}}],["dissociatetoken",{"_index":595,"title":{},"body":{"injectables/HtsService.html":{}}}],["dissociatetoken(accountid",{"_index":617,"title":{},"body":{"injectables/HtsService.html":{}}}],["documentation",{"_index":876,"title":{},"body":{"coverage.html":{}}}],["double",{"_index":440,"title":{},"body":{"injectables/HcsService.html":{}}}],["dynamicmodule",{"_index":270,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["emitter",{"_index":326,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["end",{"_index":402,"title":{},"body":{"injectables/HcsService.html":{}}}],["endpoint",{"_index":773,"title":{},"body":{"injectables/RestService.html":{}}}],["environment",{"_index":299,"title":{},"body":{"injectables/ClientService.html":{}}}],["error",{"_index":106,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["example",{"_index":960,"title":{},"body":{"index.html":{}}}],["execute",{"_index":433,"title":{},"body":{"injectables/HcsService.html":{}}}],["execute(client",{"_index":669,"title":{},"body":{"injectables/HtsService.html":{}}}],["executed",{"_index":443,"title":{},"body":{"injectables/HcsService.html":{}}}],["executing",{"_index":243,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["export",{"_index":30,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["exports",{"_index":53,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["false",{"_index":571,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["fetch",{"_index":83,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["fetches",{"_index":151,"title":{},"body":{"injectables/AccountsService.html":{}}}],["fetching",{"_index":244,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["fileappendtransaction",{"_index":509,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecontentsquery",{"_index":510,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecreatetransaction",{"_index":511,"title":{},"body":{"injectables/HfsService.html":{}}}],["filedeletetransaction",{"_index":512,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileid",{"_index":493,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfo",{"_index":513,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfoquery",{"_index":514,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileupdatetransaction",{"_index":515,"title":{},"body":{"injectables/HfsService.html":{}}}],["filters",{"_index":806,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["finally",{"_index":434,"title":{},"body":{"injectables/HcsService.html":{}}}],["first",{"_index":932,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":265,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forroot(options",{"_index":266,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["forrootasync",{"_index":271,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forrootasync(options",{"_index":272,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["freezeaccount",{"_index":113,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezeaccount(accountid",{"_index":141,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezekey",{"_index":143,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezes",{"_index":145,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezewith(client",{"_index":247,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["freezing",{"_index":429,"title":{},"body":{"injectables/HcsService.html":{}}}],["function",{"_index":405,"title":{},"body":{"injectables/HcsService.html":{}}}],["function(message",{"_index":455,"title":{},"body":{"injectables/HcsService.html":{}}}],["generate",{"_index":745,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatecustomclient",{"_index":290,"title":{},"body":{"injectables/ClientService.html":{}}}],["generatecustomclient(accountid",{"_index":298,"title":{},"body":{"injectables/ClientService.html":{}}}],["generated",{"_index":969,"title":{},"body":{"index.html":{}}}],["generatekey",{"_index":740,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist",{"_index":741,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist(publickeys",{"_index":746,"title":{},"body":{"injectables/KeysService.html":{}}}],["generating",{"_index":204,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HtsService.html":{},"index.html":{}}}],["getallholders",{"_index":546,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholders(tokenid",{"_index":552,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet",{"_index":547,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet(tokenid",{"_index":555,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallnftforholder",{"_index":548,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallnftforholder(walletid",{"_index":558,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallnftholders",{"_index":549,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallnftholders(tokenid",{"_index":562,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getalltransactions",{"_index":799,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactions(accountid",{"_index":805,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp",{"_index":800,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp(timestamp",{"_index":808,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getclient",{"_index":291,"title":{},"body":{"injectables/ClientService.html":{}}}],["getcontents",{"_index":489,"title":{},"body":{"injectables/HfsService.html":{}}}],["getcontents(fileid",{"_index":501,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfo",{"_index":114,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfo(accountid",{"_index":149,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfos",{"_index":69,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HfsService.html":{}}}],["getinfos(accountid",{"_index":80,"title":{},"body":{"injectables/AccountsRestService.html":{}}}],["getinfos(fileid",{"_index":504,"title":{},"body":{"injectables/HfsService.html":{}}}],["geting",{"_index":872,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getkeys",{"_index":115,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getkeys(accountid",{"_index":153,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getlatestmessages",{"_index":374,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["getlatestmessages(topicid",{"_index":375,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["getlatesttransactions",{"_index":801,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getlatesttransactions(accountid",{"_index":810,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getmessages",{"_index":383,"title":{},"body":{"injectables/HcsService.html":{}}}],["getmessages(topicid",{"_index":397,"title":{},"body":{"injectables/HcsService.html":{}}}],["getnftinfo",{"_index":596,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnftinfo(tokenid",{"_index":620,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnodeoperator",{"_index":292,"title":{},"body":{"injectables/ClientService.html":{}}}],["getquerybalance",{"_index":116,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getquerybalance(accountid",{"_index":157,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getrandomnodefornetwork",{"_index":293,"title":{},"body":{"injectables/ClientService.html":{}}}],["gets",{"_index":307,"title":{},"body":{"injectables/ClientService.html":{}}}],["getscheduledtransaction",{"_index":802,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtransaction(transactionid",{"_index":813,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtrasaction",{"_index":837,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getscheduledtrasaction(scheduleid",{"_index":846,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getting",{"_index":867,"title":{"index.html":{}},"body":{"injectables/TransactionsService.html":{}}}],["gettokeninfo",{"_index":550,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettokeninfo(tokenid",{"_index":564,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettransactionbyid",{"_index":803,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["gettransactionbyid(transaction_id",{"_index":815,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["gettransactionbytimestamp",{"_index":804,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["gettransactionbytimestamp(timestamp",{"_index":817,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["gettransactionquery",{"_index":838,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionquery(transactionid",{"_index":849,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt",{"_index":839,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt(transactionid",{"_index":851,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["git+https://github.com/hbarsuite/nestjs",{"_index":1015,"title":{},"body":{"properties.html":{}}}],["given",{"_index":85,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HtsRestService.html":{},"index.html":{}}}],["gives",{"_index":303,"title":{},"body":{"injectables/ClientService.html":{}}}],["global",{"_index":474,"title":{},"body":{"modules/HederaModule.html":{}}}],["graph",{"_index":996,"title":{},"body":{"modules.html":{}}}],["hashgraph/sdk",{"_index":181,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITransactionDetails.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["hashgraph/sdk/lib/contract/contractcreateflow",{"_index":25,"title":{},"body":{"classes/AccountBalance.html":{},"interfaces/IAccountBalance.html":{}}}],["hbar",{"_index":13,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{}}}],["hbar(amount.tofixed(8",{"_index":674,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbar(balance.tofixed(8",{"_index":242,"title":{},"body":{"injectables/AccountsService.html":{}}}],["hbar(hbaramount.tofixed(8",{"_index":689,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbar(maxtransactionfee.tofixed(8",{"_index":523,"title":{},"body":{"injectables/HfsService.html":{}}}],["hbar(swap.amount.tofixed(8",{"_index":706,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbaramount",{"_index":638,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbaramount.tofixed(8",{"_index":688,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbars",{"_index":9,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/AccountsService.html":{},"interfaces/IAccountBalance.html":{}}}],["hcs",{"_index":372,"title":{},"body":{"modules/HcsModule.html":{},"injectables/HcsService.html":{},"index.html":{}}}],["hcs.service",{"_index":371,"title":{},"body":{"modules/HcsModule.html":{}}}],["hcs/hcs.module",{"_index":468,"title":{},"body":{"modules/HederaModule.html":{}}}],["hcsmessage",{"_index":984,"title":{},"body":{"index.html":{}}}],["hcsmodule",{"_index":363,"title":{"modules/HcsModule.html":{}},"body":{"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["hcsrestservice",{"_index":368,"title":{"injectables/HcsRestService.html":{}},"body":{"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"coverage.html":{},"overview.html":{}}}],["hcsservice",{"_index":369,"title":{"injectables/HcsService.html":{}},"body":{"modules/HcsModule.html":{},"injectables/HcsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["headers",{"_index":778,"title":{},"body":{"injectables/RestService.html":{}}}],["hedera",{"_index":296,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["hedera.git",{"_index":1016,"title":{},"body":{"properties.html":{}}}],["hedera.service",{"_index":465,"title":{},"body":{"modules/HederaModule.html":{}}}],["hedera/issues",{"_index":1011,"title":{},"body":{"properties.html":{}}}],["hedera/lib",{"_index":943,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/accounts/accounts.service",{"_index":964,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hcs/hcs.service",{"_index":962,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hfs/hfs.service",{"_index":963,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/keys/keys.service",{"_index":961,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/transactions/transactions",{"_index":965,"title":{},"body":{"index.html":{}}}],["hederaimport",{"_index":930,"title":{},"body":{"index.html":{}}}],["hederainstead",{"_index":927,"title":{},"body":{"index.html":{}}}],["hederamodule",{"_index":460,"title":{"modules/HederaModule.html":{}},"body":{"modules/HederaModule.html":{},"index.html":{},"modules.html":{}}}],["hederamodule.forroot",{"_index":944,"title":{},"body":{"index.html":{}}}],["hederamodule.forrootasync",{"_index":952,"title":{},"body":{"index.html":{}}}],["hederaoptions",{"_index":279,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["hederaservice",{"_index":464,"title":{"injectables/HederaService.html":{}},"body":{"modules/HederaModule.html":{},"injectables/HederaService.html":{},"coverage.html":{}}}],["hfs",{"_index":491,"title":{},"body":{"injectables/HfsService.html":{},"index.html":{}}}],["hfs.service",{"_index":486,"title":{},"body":{"modules/HfsModule.html":{}}}],["hfs/hfs.module",{"_index":470,"title":{},"body":{"modules/HederaModule.html":{}}}],["hfsmodule",{"_index":469,"title":{"modules/HfsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules.html":{},"overview.html":{}}}],["hfsservice",{"_index":484,"title":{"injectables/HfsService.html":{}},"body":{"modules/HfsModule.html":{},"injectables/HfsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["holders",{"_index":554,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["holders.concat(response.balances",{"_index":569,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["holders.concat(response.nfts",{"_index":583,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["homepage",{"_index":1007,"title":{},"body":{"properties.html":{}}}],["hsuite",{"_index":916,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hsuite/nestjs",{"_index":926,"title":{},"body":{"index.html":{}}}],["hts",{"_index":544,"title":{},"body":{"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{}}}],["hts.service",{"_index":543,"title":{},"body":{"modules/HtsModule.html":{}}}],["hts/hts.module",{"_index":59,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["htsmodule",{"_index":42,"title":{"modules/HtsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules.html":{},"overview.html":{}}}],["htsrestservice",{"_index":540,"title":{"injectables/HtsRestService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"coverage.html":{},"overview.html":{}}}],["htsservice",{"_index":541,"title":{"injectables/HtsService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsService.html":{},"coverage.html":{},"overview.html":{}}}],["httpmodule",{"_index":765,"title":{},"body":{"modules/RestModule.html":{}}}],["https://github.com/hbarsuite/nestjs",{"_index":1010,"title":{},"body":{"properties.html":{}}}],["https://hsuite.finance",{"_index":1008,"title":{},"body":{"properties.html":{}}}],["https://mainnet",{"_index":947,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":769,"title":{},"body":{"injectables/RestService.html":{}}}],["iaccountbalance",{"_index":185,"title":{"interfaces/IAccountBalance.html":{}},"body":{"injectables/AccountsService.html":{},"interfaces/IAccountBalance.html":{},"coverage.html":{}}}],["id",{"_index":148,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"interfaces/IOperator.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["identifier",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["if(balance",{"_index":240,"title":{},"body":{"injectables/AccountsService.html":{}}}],["if(hbaramount",{"_index":687,"title":{},"body":{"injectables/HtsService.html":{}}}],["if(isofflinetransaction",{"_index":218,"title":{},"body":{"injectables/AccountsService.html":{}}}],["if(isreceiversignaturerequired",{"_index":215,"title":{},"body":{"injectables/AccountsService.html":{}}}],["if(keys",{"_index":658,"title":{},"body":{"injectables/HtsService.html":{}}}],["if(length",{"_index":758,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(maxautomatictokenassociations",{"_index":213,"title":{},"body":{"injectables/AccountsService.html":{}}}],["if(maxtransactionfee",{"_index":521,"title":{},"body":{"injectables/HfsService.html":{}}}],["if(memo",{"_index":519,"title":{},"body":{"injectables/HfsService.html":{}}}],["if(newkey",{"_index":532,"title":{},"body":{"injectables/HfsService.html":{}}}],["if(publickeys",{"_index":753,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(swap.token.id",{"_index":702,"title":{},"body":{"injectables/HtsService.html":{}}}],["if(this.mirrornode.apikey",{"_index":779,"title":{},"body":{"injectables/RestService.html":{}}}],["if(timeout",{"_index":574,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["ihederaoptions",{"_index":267,"title":{"interfaces/IHederaOptions.html":{}},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/IHederaOptions.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{}}}],["imirrornode",{"_index":315,"title":{"interfaces/IMirrorNode.html":{}},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"injectables/RestService.html":{},"coverage.html":{}}}],["import",{"_index":24,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["imported",{"_index":959,"title":{},"body":{"index.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AccountBalance.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["infos",{"_index":84,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HfsService.html":{}}}],["inject",{"_index":283,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["inject('hederaoptions",{"_index":329,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["injectable",{"_index":63,"title":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":64,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"overview.html":{}}}],["install",{"_index":925,"title":{},"body":{"index.html":{}}}],["installation",{"_index":921,"title":{},"body":{"index.html":{}}}],["interface",{"_index":714,"title":{"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{}},"body":{"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"coverage.html":{}}}],["interfaces",{"_index":715,"title":{},"body":{"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"overview.html":{}}}],["interfaces/token_balance.types",{"_index":27,"title":{},"body":{"classes/AccountBalance.html":{}}}],["invalid",{"_index":304,"title":{},"body":{"injectables/ClientService.html":{}}}],["ioperator",{"_index":308,"title":{"interfaces/IOperator.html":{}},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IOperator.html":{},"coverage.html":{}}}],["ioperators",{"_index":323,"title":{},"body":{"injectables/ClientService.html":{}}}],["iprivatekeylist",{"_index":187,"title":{"interfaces/IPrivateKeyList.html":{}},"body":{"injectables/AccountsService.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{},"coverage.html":{}}}],["isarray",{"_index":21,"title":{},"body":{"classes/AccountBalance.html":{}}}],["isc",{"_index":1013,"title":{},"body":{"properties.html":{}}}],["isofflinetransaction",{"_index":131,"title":{},"body":{"injectables/AccountsService.html":{}}}],["isreceiversignaturerequired",{"_index":129,"title":{},"body":{"injectables/AccountsService.html":{}}}],["itokenbalance",{"_index":26,"title":{"interfaces/ITokenBalance.html":{}},"body":{"classes/AccountBalance.html":{},"injectables/AccountsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/ITokenBalance.html":{},"coverage.html":{}}}],["itransactiondetails",{"_index":655,"title":{"interfaces/ITransactionDetails.html":{}},"body":{"injectables/HtsService.html":{},"interfaces/ITransactionDetails.html":{},"coverage.html":{}}}],["js",{"_index":918,"title":{},"body":{"index.html":{}}}],["json.parse(buffer.from(message.contents).tostring",{"_index":985,"title":{},"body":{"index.html":{}}}],["key",{"_index":156,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["key).keylist",{"_index":238,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).publickey",{"_index":239,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).then(response",{"_index":976,"title":{},"body":{"index.html":{}}}],["keylist",{"_index":390,"title":{},"body":{"injectables/HcsService.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{}}}],["keylist(publickeylist",{"_index":756,"title":{},"body":{"injectables/KeysService.html":{}}}],["keys",{"_index":524,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["keys.service",{"_index":738,"title":{},"body":{"modules/KeysModule.html":{}}}],["keys/keys.module",{"_index":58,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["keys/keys.service",{"_index":183,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keyservice",{"_index":743,"title":{},"body":{"injectables/KeysService.html":{}}}],["keyslength",{"_index":125,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keysmodule",{"_index":43,"title":{"modules/KeysModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules.html":{},"overview.html":{}}}],["keysservice",{"_index":121,"title":{"injectables/KeysService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["keysthreshold",{"_index":127,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keywords",{"_index":1004,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":812,"title":{},"body":{"injectables/TransactionsRestService.html":{},"index.html":{}}}],["length",{"_index":747,"title":{},"body":{"injectables/KeysService.html":{}}}],["license",{"_index":1012,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":403,"title":{},"body":{"injectables/HcsService.html":{}}}],["list",{"_index":730,"title":{},"body":{"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{}}}],["list.types",{"_index":189,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["list.types.ts",{"_index":728,"title":{},"body":{"interfaces/IPrivateKeyList.html":{},"coverage.html":{}}}],["literal",{"_index":311,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{}}}],["lodash",{"_index":566,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["lodash.get(response.links.next.split",{"_index":578,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["logger",{"_index":110,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["logger(\"accounts",{"_index":172,"title":{},"body":{"injectables/AccountsService.html":{}}}],["logger(\"client",{"_index":314,"title":{},"body":{"injectables/ClientService.html":{}}}],["logger(\"hcs",{"_index":416,"title":{},"body":{"injectables/HcsService.html":{}}}],["logger(\"hedera",{"_index":478,"title":{},"body":{"injectables/HederaService.html":{}}}],["logger(\"hfs",{"_index":508,"title":{},"body":{"injectables/HfsService.html":{}}}],["logger(\"hts",{"_index":643,"title":{},"body":{"injectables/HtsService.html":{}}}],["logger(\"keys",{"_index":749,"title":{},"body":{"injectables/KeysService.html":{}}}],["logger(\"rest",{"_index":774,"title":{},"body":{"injectables/RestService.html":{}}}],["logger(\"transactions",{"_index":855,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["mainnet",{"_index":317,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"index.html":{}}}],["matching",{"_index":32,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.floor(math.random",{"_index":360,"title":{},"body":{"injectables/ClientService.html":{}}}],["maxautomatictokenassociations",{"_index":128,"title":{},"body":{"injectables/AccountsService.html":{}}}],["maxtransactionfee",{"_index":495,"title":{},"body":{"injectables/HfsService.html":{}}}],["mechanism",{"_index":686,"title":{},"body":{"injectables/HtsService.html":{}}}],["memo",{"_index":166,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["message",{"_index":399,"title":{},"body":{"injectables/HcsService.html":{}}}],["metadata",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":934,"title":{},"body":{"index.html":{}}}],["methods",{"_index":68,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["mint",{"_index":625,"title":{},"body":{"injectables/HtsService.html":{}}}],["mintnfttoken",{"_index":597,"title":{},"body":{"injectables/HtsService.html":{}}}],["mintnfttoken(tokenid",{"_index":622,"title":{},"body":{"injectables/HtsService.html":{}}}],["mirror",{"_index":312,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"injectables/RestService.html":{},"index.html":{}}}],["mirror.types",{"_index":719,"title":{},"body":{"interfaces/IHederaOptions.html":{}}}],["mirrornode",{"_index":287,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"injectables/RestService.html":{},"index.html":{}}}],["module",{"_index":33,"title":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["multi",{"_index":135,"title":{},"body":{"injectables/AccountsService.html":{}}}],["multisig",{"_index":684,"title":{},"body":{"injectables/HtsService.html":{}}}],["name",{"_index":78,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["need",{"_index":757,"title":{},"body":{"injectables/KeysService.html":{},"index.html":{}}}],["needed",{"_index":937,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":917,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":766,"title":{},"body":{"modules/RestModule.html":{},"injectables/RestService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":54,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/config",{"_index":276,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["nestjs/event",{"_index":325,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":28,"title":{},"body":{"classes/AccountBalance.html":{},"classes/TokenBalance.html":{},"dependencies.html":{}}}],["network",{"_index":288,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HtsService.html":{},"interfaces/IHederaOptions.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["new",{"_index":94,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["newkey",{"_index":165,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["next",{"_index":577,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["nextarray",{"_index":821,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.length).join",{"_index":824,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.slice(1",{"_index":823,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nft",{"_index":560,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/HtsService.html":{}}}],["nftid",{"_index":651,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftid(tokenid",{"_index":666,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftinfos",{"_index":667,"title":{},"body":{"injectables/HtsService.html":{}}}],["nfts",{"_index":585,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["nfts.concat(response.nfts",{"_index":587,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["node",{"_index":305,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"injectables/RestService.html":{},"index.html":{},"properties.html":{}}}],["nodeaccountid",{"_index":209,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HtsService.html":{}}}],["npm",{"_index":922,"title":{},"body":{"index.html":{}}}],["null",{"_index":233,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["number",{"_index":124,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/ITokenBalance.html":{},"injectables/KeysService.html":{},"classes/TokenBalance.html":{}}}],["number(+amount[index",{"_index":700,"title":{},"body":{"injectables/HtsService.html":{}}}],["number(amount",{"_index":695,"title":{},"body":{"injectables/HtsService.html":{}}}],["number(swap.amount",{"_index":712,"title":{},"body":{"injectables/HtsService.html":{}}}],["number(tokendecimals[index",{"_index":699,"title":{},"body":{"injectables/HtsService.html":{}}}],["offline",{"_index":207,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["once",{"_index":958,"title":{},"body":{"index.html":{}}}],["onevent",{"_index":324,"title":{},"body":{"injectables/ClientService.html":{}}}],["onevent('client.invalid_node_operator",{"_index":301,"title":{},"body":{"injectables/ClientService.html":{}}}],["operator",{"_index":225,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/TransactionsService.html":{}}}],["operator.types",{"_index":720,"title":{},"body":{"interfaces/IHederaOptions.html":{}}}],["operators",{"_index":289,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{},"index.html":{}}}],["optional",{"_index":79,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["options",{"_index":269,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["options.useexisting",{"_index":284,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["options.usefactory",{"_index":282,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["order",{"_index":935,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":432,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{}}}],["out",{"_index":49,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["overview",{"_index":998,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":898,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":91,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["pass",{"_index":936,"title":{},"body":{"index.html":{}}}],["pause",{"_index":629,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausekey",{"_index":627,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken",{"_index":598,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken(tokenid",{"_index":626,"title":{},"body":{"injectables/HtsService.html":{}}}],["private",{"_index":92,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey",{"_index":140,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey.fromstring('your_private_key_here",{"_index":989,"title":{},"body":{"index.html":{}}}],["privatekey.fromstring(account.key.tostring",{"_index":975,"title":{},"body":{"index.html":{}}}],["privatekey.generateed25519",{"_index":750,"title":{},"body":{"injectables/KeysService.html":{}}}],["privatekeys",{"_index":729,"title":{},"body":{"interfaces/IPrivateKeyList.html":{},"injectables/KeysService.html":{}}}],["privatekeys.push(key",{"_index":760,"title":{},"body":{"injectables/KeysService.html":{}}}],["promise",{"_index":88,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async",{"_index":95,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async(resolve",{"_index":516,"title":{},"body":{"injectables/HfsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{}}}],["promise(resolve",{"_index":575,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["protect",{"_index":950,"title":{},"body":{"index.html":{}}}],["protected",{"_index":109,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["provide",{"_index":278,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["provided",{"_index":679,"title":{},"body":{"injectables/HtsService.html":{},"injectables/KeysService.html":{}}}],["providers",{"_index":51,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["public",{"_index":155,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/IOperator.html":{}}}],["public.mirrornode.hedera.com",{"_index":948,"title":{},"body":{"index.html":{}}}],["public.mirrornode.hedera.com:443",{"_index":350,"title":{},"body":{"injectables/ClientService.html":{}}}],["publickey",{"_index":726,"title":{},"body":{"interfaces/IOperator.html":{},"injectables/KeysService.html":{}}}],["publickeylist",{"_index":752,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(key.publickey",{"_index":761,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(publickey.fromstring(key",{"_index":755,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys",{"_index":126,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["publickeys.foreach(key",{"_index":754,"title":{},"body":{"injectables/KeysService.html":{}}}],["query",{"_index":159,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/TransactionsService.html":{}}}],["query.execute(client",{"_index":252,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/TransactionsService.html":{}}}],["random",{"_index":205,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HtsService.html":{}}}],["receipt",{"_index":229,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["receipt.accountid",{"_index":245,"title":{},"body":{"injectables/AccountsService.html":{}}}],["receipt.scheduleid",{"_index":873,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["receipt.status",{"_index":249,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["record",{"_index":842,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["reflect",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["reject",{"_index":97,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["reject(error",{"_index":107,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["related",{"_index":146,"title":{},"body":{"injectables/AccountsService.html":{}}}],["repository",{"_index":1014,"title":{},"body":{"properties.html":{}}}],["request",{"_index":228,"title":{},"body":{"injectables/AccountsService.html":{}}}],["requesting",{"_index":527,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["reset",{"_index":48,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["resolve",{"_index":96,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(accountinfo",{"_index":201,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(accountinfo.key",{"_index":203,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(accountinfos",{"_index":104,"title":{},"body":{"injectables/AccountsRestService.html":{}}}],["resolve(balance",{"_index":262,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(contents.tostring",{"_index":534,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(holders",{"_index":581,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["resolve(info",{"_index":446,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(infos",{"_index":535,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(key",{"_index":751,"title":{},"body":{"injectables/KeysService.html":{}}}],["resolve(nftinfos",{"_index":670,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(nfts",{"_index":589,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["resolve(receipt",{"_index":665,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.fileid",{"_index":529,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(receipt.status",{"_index":232,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.topicid",{"_index":435,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(receipt.topicsequencenumber?.tostring",{"_index":449,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(response",{"_index":379,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["resolve(response.transactions",{"_index":831,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["resolve(response?.data",{"_index":785,"title":{},"body":{"injectables/RestService.html":{}}}],["resolve(scheduleid",{"_index":874,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["resolve(subscription",{"_index":459,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(transaction",{"_index":221,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["resolve(transactions",{"_index":827,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["resolving",{"_index":199,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{}}}],["response",{"_index":89,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{}}}],["response.hbars",{"_index":258,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.links.next",{"_index":573,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["response.links.next.split",{"_index":822,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["response.tokens?._map.foreach((value",{"_index":259,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.tokens?._map.get(tokenid",{"_index":253,"title":{},"body":{"injectables/AccountsService.html":{}}}],["rest",{"_index":75,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{}}}],["rest.service",{"_index":61,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["rest.service.ts",{"_index":66,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["rest.service.ts:116",{"_index":816,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:128",{"_index":559,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:134",{"_index":811,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:152",{"_index":814,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:172",{"_index":557,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:18",{"_index":376,"title":{},"body":{"injectables/HcsRestService.html":{}}}],["rest.service.ts:23",{"_index":82,"title":{},"body":{"injectables/AccountsRestService.html":{}}}],["rest.service.ts:24",{"_index":565,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:42",{"_index":553,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:59",{"_index":807,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:8",{"_index":73,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HcsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:85",{"_index":563,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:9",{"_index":551,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:98",{"_index":818,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest/rest.module",{"_index":57,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["rest/rest.service",{"_index":90,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["restmodule",{"_index":44,"title":{"modules/RestModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["restmodule.forroot(options",{"_index":473,"title":{},"body":{"modules/HederaModule.html":{}}}],["restmodule.forrootasync(options",{"_index":476,"title":{},"body":{"modules/HederaModule.html":{}}}],["restservice",{"_index":72,"title":{"injectables/RestService.html":{}},"body":{"injectables/AccountsRestService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["results",{"_index":31,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retry",{"_index":570,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["return",{"_index":93,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["returns",{"_index":87,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["run",{"_index":924,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["schedule",{"_index":868,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulecreatetransaction",{"_index":856,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduled",{"_index":682,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["scheduledtransaction",{"_index":869,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction.execute(client",{"_index":871,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleid",{"_index":848,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleinfoquery",{"_index":857,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulesigntransaction",{"_index":858,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["sdk",{"_index":919,"title":{},"body":{"index.html":{}}}],["sender",{"_index":676,"title":{},"body":{"injectables/HtsService.html":{}}}],["serialnumber",{"_index":613,"title":{},"body":{"injectables/HtsService.html":{}}}],["service",{"_index":76,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["setaccountid(accountid",{"_index":196,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["setcontents(content",{"_index":518,"title":{},"body":{"injectables/HfsService.html":{}}}],["setfileid(fileid",{"_index":531,"title":{},"body":{"injectables/HfsService.html":{}}}],["setincludechildren(true",{"_index":864,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setincludeduplicates(true",{"_index":863,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setkey(keyslength",{"_index":237,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkeys([key",{"_index":517,"title":{},"body":{"injectables/HfsService.html":{}}}],["setmessage(message",{"_index":447,"title":{},"body":{"injectables/HcsService.html":{}}}],["setnftid(nftid",{"_index":668,"title":{},"body":{"injectables/HtsService.html":{}}}],["setnodeaccountids([nodeaccountid",{"_index":211,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["setscheduledtransaction(transactiontoschedule",{"_index":870,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setscheduleid(scheduleid",{"_index":865,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setserials([serialnumber",{"_index":663,"title":{},"body":{"injectables/HtsService.html":{}}}],["settimeout(resolve",{"_index":576,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["setting",{"_index":424,"title":{},"body":{"injectables/HcsService.html":{}}}],["settokenid(tokenid",{"_index":246,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["settokenids([tokenid",{"_index":657,"title":{},"body":{"injectables/HtsService.html":{}}}],["settopicid(topicid",{"_index":444,"title":{},"body":{"injectables/HcsService.html":{}}}],["settransactionid(transactionid",{"_index":862,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["shall",{"_index":923,"title":{},"body":{"index.html":{}}}],["sig",{"_index":136,"title":{},"body":{"injectables/AccountsService.html":{}}}],["sign",{"_index":438,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["sign(key",{"_index":866,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signature",{"_index":208,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["signatures",{"_index":442,"title":{},"body":{"injectables/HcsService.html":{}}}],["signed",{"_index":430,"title":{},"body":{"injectables/HcsService.html":{}}}],["signing",{"_index":197,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["signkey",{"_index":164,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["signscheduledtransaction",{"_index":840,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signscheduledtransaction(scheduleid",{"_index":853,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signtx",{"_index":222,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.execute(client",{"_index":227,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.sign(adminkey",{"_index":441,"title":{},"body":{"injectables/HcsService.html":{}}}],["signtx.sign(newkey",{"_index":224,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["single",{"_index":134,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{}}}],["smart",{"_index":1005,"title":{},"body":{"properties.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["specific",{"_index":152,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts",{"_index":65,"title":{},"body":{"injectables/AccountsRestService.html":{},"coverage.html":{}}}],["src/hedera/accounts/accounts.module.ts",{"_index":50,"title":{},"body":{"modules/AccountsModule.html":{}}}],["src/hedera/accounts/accounts.service.ts",{"_index":108,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["src/hedera/accounts/accounts.service.ts:172",{"_index":132,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:245",{"_index":144,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:275",{"_index":161,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:304",{"_index":158,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:31",{"_index":122,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:48",{"_index":150,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:73",{"_index":154,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:95",{"_index":167,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/client/client.module.ts",{"_index":263,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:22",{"_index":273,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:8",{"_index":268,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.service.ts",{"_index":285,"title":{},"body":{"injectables/ClientService.html":{},"coverage.html":{}}}],["src/hedera/client/client.service.ts:114",{"_index":306,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:118",{"_index":309,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:17",{"_index":310,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:22",{"_index":321,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:27",{"_index":322,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:32",{"_index":319,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:34",{"_index":313,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:42",{"_index":316,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:47",{"_index":295,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:71",{"_index":302,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:90",{"_index":300,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/hcs/hcs",{"_index":373,"title":{},"body":{"injectables/HcsRestService.html":{},"coverage.html":{}}}],["src/hedera/hcs/hcs.module.ts",{"_index":370,"title":{},"body":{"modules/HcsModule.html":{}}}],["src/hedera/hcs/hcs.service.ts",{"_index":380,"title":{},"body":{"injectables/HcsService.html":{},"coverage.html":{}}}],["src/hedera/hcs/hcs.service.ts:100",{"_index":415,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:157",{"_index":395,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:187",{"_index":412,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:210",{"_index":409,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:254",{"_index":404,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:28",{"_index":387,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:47",{"_index":391,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hedera.module.ts",{"_index":461,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:15",{"_index":462,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:44",{"_index":463,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.service.ts",{"_index":477,"title":{},"body":{"injectables/HederaService.html":{},"coverage.html":{}}}],["src/hedera/hedera.service.ts:12",{"_index":479,"title":{},"body":{"injectables/HederaService.html":{}}}],["src/hedera/hfs/hfs.module.ts",{"_index":485,"title":{},"body":{"modules/HfsModule.html":{}}}],["src/hedera/hfs/hfs.service.ts",{"_index":487,"title":{},"body":{"injectables/HfsService.html":{},"coverage.html":{}}}],["src/hedera/hfs/hfs.service.ts:135",{"_index":507,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:192",{"_index":500,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:230",{"_index":502,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:25",{"_index":490,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:255",{"_index":505,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:43",{"_index":498,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:90",{"_index":496,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hts/hts",{"_index":545,"title":{},"body":{"injectables/HtsRestService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.module.ts",{"_index":542,"title":{},"body":{"modules/HtsModule.html":{}}}],["src/hedera/hts/hts.service.ts",{"_index":591,"title":{},"body":{"injectables/HtsService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.service.ts:136",{"_index":628,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:161",{"_index":641,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:187",{"_index":624,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:234",{"_index":615,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:265",{"_index":621,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:294",{"_index":631,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:33",{"_index":603,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:354",{"_index":639,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:430",{"_index":608,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:495",{"_index":635,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:50",{"_index":605,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:97",{"_index":618,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/keys/keys.module.ts",{"_index":737,"title":{},"body":{"modules/KeysModule.html":{}}}],["src/hedera/keys/keys.service.ts",{"_index":739,"title":{},"body":{"injectables/KeysService.html":{},"coverage.html":{}}}],["src/hedera/keys/keys.service.ts:14",{"_index":742,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:27",{"_index":744,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:45",{"_index":748,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/rest/rest.module.ts",{"_index":762,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:24",{"_index":764,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:9",{"_index":763,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.service.ts",{"_index":767,"title":{},"body":{"injectables/RestService.html":{},"coverage.html":{}}}],["src/hedera/rest/rest.service.ts:16",{"_index":775,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:21",{"_index":770,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:42",{"_index":772,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/transactions/transactions",{"_index":798,"title":{},"body":{"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.module.ts",{"_index":796,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/hedera/transactions/transactions.service.ts",{"_index":835,"title":{},"body":{"injectables/TransactionsService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.service.ts:119",{"_index":844,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:148",{"_index":847,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:27",{"_index":841,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:43",{"_index":850,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:65",{"_index":852,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:89",{"_index":854,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/types/interfaces/account_balance.types.ts",{"_index":716,"title":{},"body":{"interfaces/IAccountBalance.html":{},"coverage.html":{}}}],["src/types/interfaces/hedera_options.types.ts",{"_index":718,"title":{},"body":{"interfaces/IHederaOptions.html":{},"coverage.html":{}}}],["src/types/interfaces/mirror.types.ts",{"_index":721,"title":{},"body":{"interfaces/IMirrorNode.html":{},"coverage.html":{}}}],["src/types/interfaces/operator.types.ts",{"_index":725,"title":{},"body":{"interfaces/IOperator.html":{},"coverage.html":{}}}],["src/types/interfaces/private",{"_index":727,"title":{},"body":{"interfaces/IPrivateKeyList.html":{},"coverage.html":{}}}],["src/types/interfaces/token_balance.types.ts",{"_index":731,"title":{},"body":{"interfaces/ITokenBalance.html":{},"coverage.html":{}}}],["src/types/interfaces/transaction_details.types.ts",{"_index":732,"title":{},"body":{"interfaces/ITransactionDetails.html":{},"coverage.html":{}}}],["src/types/models/account_balance.class.ts",{"_index":6,"title":{},"body":{"classes/AccountBalance.html":{},"coverage.html":{}}}],["src/types/models/account_balance.class.ts:11",{"_index":23,"title":{},"body":{"classes/AccountBalance.html":{}}}],["src/types/models/account_balance.class.ts:8",{"_index":17,"title":{},"body":{"classes/AccountBalance.html":{}}}],["src/types/models/token_balance.class.ts",{"_index":786,"title":{},"body":{"classes/TokenBalance.html":{},"coverage.html":{}}}],["src/types/models/token_balance.class.ts:11",{"_index":788,"title":{},"body":{"classes/TokenBalance.html":{}}}],["src/types/models/token_balance.class.ts:5",{"_index":789,"title":{},"body":{"classes/TokenBalance.html":{}}}],["src/types/models/token_balance.class.ts:8",{"_index":787,"title":{},"body":{"classes/TokenBalance.html":{}}}],["start",{"_index":401,"title":{},"body":{"injectables/HcsService.html":{}}}],["started",{"_index":915,"title":{"index.html":{}},"body":{}}],["statements",{"_index":878,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":264,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["status",{"_index":178,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/ITransactionDetails.html":{},"injectables/TransactionsService.html":{}}}],["string",{"_index":81,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/ITokenBalance.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["submit",{"_index":410,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["submitkey",{"_index":389,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage",{"_index":384,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage(topicid",{"_index":407,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitting",{"_index":677,"title":{},"body":{"injectables/HtsService.html":{}}}],["submittx",{"_index":526,"title":{},"body":{"injectables/HfsService.html":{}}}],["submittx.getreceipt(client",{"_index":528,"title":{},"body":{"injectables/HfsService.html":{}}}],["subscribing",{"_index":980,"title":{},"body":{"index.html":{}}}],["subscribing\",error",{"_index":457,"title":{},"body":{"injectables/HcsService.html":{}}}],["subscription",{"_index":406,"title":{},"body":{"injectables/HcsService.html":{}}}],["supplykey",{"_index":614,"title":{},"body":{"injectables/HtsService.html":{}}}],["support",{"_index":993,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":994,"title":{},"body":{"modules.html":{}}}],["swap",{"_index":610,"title":{},"body":{"injectables/HtsService.html":{}}}],["swap.amount",{"_index":709,"title":{},"body":{"injectables/HtsService.html":{}}}],["swap.amount.tofixed(8",{"_index":704,"title":{},"body":{"injectables/HtsService.html":{}}}],["swap.from",{"_index":708,"title":{},"body":{"injectables/HtsService.html":{}}}],["swap.to",{"_index":711,"title":{},"body":{"injectables/HtsService.html":{}}}],["swap.token.decimals",{"_index":710,"title":{},"body":{"injectables/HtsService.html":{}}}],["swaps",{"_index":611,"title":{},"body":{"injectables/HtsService.html":{}}}],["swaps.foreach(swap",{"_index":701,"title":{},"body":{"injectables/HtsService.html":{}}}],["switch(environment",{"_index":356,"title":{},"body":{"injectables/ClientService.html":{}}}],["switch(this.network",{"_index":344,"title":{},"body":{"injectables/ClientService.html":{}}}],["table",{"_index":897,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":896,"title":{},"body":{"coverage.html":{}}}],["testnet",{"_index":318,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/IHederaOptions.html":{}}}],["then((response",{"_index":991,"title":{},"body":{"index.html":{}}}],["this.accountsservice.createaccount(1",{"_index":966,"title":{},"body":{"index.html":{}}}],["this.accountsservice.updateaccount",{"_index":973,"title":{},"body":{"index.html":{}}}],["this.client",{"_index":340,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.client.setmirrornetwork(\"mainnet",{"_index":349,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.client.setoperator(this.operator.accountid",{"_index":354,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.clientservice.getclient",{"_index":194,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["this.clientservice.getrandomnodefornetwork",{"_index":210,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["this.custom.mirror",{"_index":336,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.custom.node",{"_index":334,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.getclient",{"_index":341,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.getinfo(accountid",{"_index":202,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.getnodeoperator",{"_index":343,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hcsservice.getmessages",{"_index":981,"title":{},"body":{"index.html":{}}}],["this.hederaoptions.custom.mirror",{"_index":337,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hederaoptions.custom.node",{"_index":335,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hederaoptions.mirrornode",{"_index":777,"title":{},"body":{"injectables/RestService.html":{}}}],["this.hederaoptions.network",{"_index":331,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hederaoptions.operators",{"_index":333,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hfsservice.create",{"_index":988,"title":{},"body":{"index.html":{}}}],["this.httpservice",{"_index":782,"title":{},"body":{"injectables/RestService.html":{}}}],["this.keysservice.generatekey",{"_index":236,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.keysservice.generatekey().then(key",{"_index":971,"title":{},"body":{"index.html":{}}}],["this.keysservice.generatekeylist(publickeys",{"_index":235,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.mirrornode",{"_index":776,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.apikey",{"_index":781,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.url}/api/v1/${endpoint",{"_index":783,"title":{},"body":{"injectables/RestService.html":{}}}],["this.network",{"_index":330,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator",{"_index":342,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator.privatekey",{"_index":355,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators",{"_index":332,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators.length",{"_index":353,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators[math.floor(math.random",{"_index":352,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.restservice",{"_index":102,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/HcsRestService.html":{},"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["this.transactionsservice.getlatesttransactions('your_account_id_here').then(response",{"_index":979,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":685,"title":{},"body":{"injectables/HtsService.html":{},"injectables/KeysService.html":{}}}],["timeout",{"_index":572,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["timestamp",{"_index":809,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["token",{"_index":147,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/ITokenBalance.html":{}}}],["token_balance.class",{"_index":29,"title":{},"body":{"classes/AccountBalance.html":{}}}],["token_balance.types",{"_index":717,"title":{},"body":{"interfaces/IAccountBalance.html":{}}}],["tokenassociatetransaction",{"_index":644,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenbalance",{"_index":20,"title":{"classes/TokenBalance.html":{}},"body":{"classes/AccountBalance.html":{},"classes/TokenBalance.html":{},"coverage.html":{}}}],["tokenburntransaction",{"_index":654,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokendecimals",{"_index":637,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokendissociatetransaction",{"_index":648,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenfreezetransaction",{"_index":179,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenid",{"_index":142,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/ITokenBalance.html":{},"classes/TokenBalance.html":{}}}],["tokenid.foreach((token_id",{"_index":696,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenminttransaction",{"_index":645,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfo",{"_index":653,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfoquery",{"_index":652,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenpausetransaction",{"_index":646,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokens",{"_index":10,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/AccountsService.html":{},"interfaces/IAccountBalance.html":{}}}],["tokens.push",{"_index":260,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunfreezetransaction",{"_index":180,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunpausetransaction",{"_index":647,"title":{},"body":{"injectables/HtsService.html":{}}}],["topic",{"_index":392,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topiccreatetransaction",{"_index":417,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicdeletetransaction",{"_index":419,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicid",{"_index":377,"title":{},"body":{"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"index.html":{}}}],["topicid.fromstring('your_hcs_topic_id_here",{"_index":982,"title":{},"body":{"index.html":{}}}],["topicinfo",{"_index":385,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfo(topicid",{"_index":411,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery",{"_index":423,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery().settopicid(topicid",{"_index":445,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessage",{"_index":422,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagequery",{"_index":421,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagesubmittransaction",{"_index":420,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction",{"_index":418,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction().settopicid(topicid",{"_index":436,"title":{},"body":{"injectables/HcsService.html":{}}}],["topromise",{"_index":784,"title":{},"body":{"injectables/RestService.html":{}}}],["transaction",{"_index":74,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/ITransactionDetails.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.execute(client",{"_index":198,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.freezewith(client",{"_index":220,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.setaccountmemo(memo",{"_index":212,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setadminkey(adminkey",{"_index":426,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setendtime(end",{"_index":452,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setfilememo(memo",{"_index":520,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setinitialbalance(new",{"_index":241,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setkey(newkey",{"_index":217,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setkeys([newkey",{"_index":533,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setlimit(limit",{"_index":453,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setmaxautomatictokenassociations(maxautomatictokenassociations",{"_index":214,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setmaxtransactionfee(new",{"_index":522,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setnodeaccountids([nodeaccountid",{"_index":219,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setreceiversignaturerequired(true",{"_index":216,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setstarttime(start",{"_index":451,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setsubmitkey(submitkey",{"_index":427,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settopicmemo(memo",{"_index":428,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settransactionmemo(memo",{"_index":675,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(adminkey",{"_index":431,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(currentadminkey",{"_index":439,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(key",{"_index":525,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.sign(pausekey",{"_index":660,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(privatekey.fromstring(freezekey",{"_index":248,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.sign(signkey",{"_index":223,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["transaction.sign(submitkey",{"_index":448,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(supplykey",{"_index":664,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.subscribe",{"_index":454,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction_id",{"_index":250,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/ITransactionDetails.html":{},"injectables/TransactionsRestService.html":{}}}],["transactionid",{"_index":733,"title":{},"body":{"interfaces/ITransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceipt",{"_index":650,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceiptquery",{"_index":859,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionrecordquery",{"_index":860,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionresponse",{"_index":861,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactions",{"_index":99,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["transactions.concat(response.transactions",{"_index":820,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions.service",{"_index":797,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["transactions/?account.id=${accountid",{"_index":828,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions/transactions.module",{"_index":467,"title":{},"body":{"modules/HederaModule.html":{}}}],["transactionsmodule",{"_index":466,"title":{"modules/TransactionsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["transactionsrestservice",{"_index":794,"title":{"injectables/TransactionsRestService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactionsservice",{"_index":795,"title":{"injectables/TransactionsService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactiontoschedule",{"_index":845,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transasction",{"_index":680,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfer",{"_index":632,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar",{"_index":599,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar(amount",{"_index":630,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken",{"_index":600,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken(tokenid",{"_index":634,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken",{"_index":601,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken(tokenid",{"_index":636,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertransaction",{"_index":649,"title":{},"body":{"injectables/HtsService.html":{}}}],["true",{"_index":22,"title":{},"body":{"classes/AccountBalance.html":{},"modules/HederaModule.html":{},"injectables/HtsRestService.html":{}}}],["try",{"_index":98,"title":{},"body":{"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse",{"_index":226,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.getreceipt(client",{"_index":230,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.transactionid",{"_index":678,"title":{},"body":{"injectables/HtsService.html":{}}}],["txresponse.transactionid.tostring",{"_index":251,"title":{},"body":{"injectables/AccountsService.html":{}}}],["type",{"_index":11,"title":{},"body":{"classes/AccountBalance.html":{},"injectables/AccountsRestService.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsRestService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/IAccountBalance.html":{},"interfaces/IHederaOptions.html":{},"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"interfaces/IPrivateKeyList.html":{},"interfaces/ITokenBalance.html":{},"interfaces/ITransactionDetails.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"classes/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["types/interfaces/account_balance.types",{"_index":186,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/interfaces/hedera_options.types",{"_index":277,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/interfaces/mirror.types",{"_index":328,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["types/interfaces/operator.types",{"_index":327,"title":{},"body":{"injectables/ClientService.html":{}}}],["types/interfaces/private",{"_index":188,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["types/interfaces/token_balance.types",{"_index":184,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/interfaces/transaction_details.types",{"_index":656,"title":{},"body":{"injectables/HtsService.html":{}}}],["uint8array",{"_index":408,"title":{},"body":{"injectables/HcsService.html":{}}}],["undefined",{"_index":450,"title":{},"body":{"injectables/HcsService.html":{}}}],["unfreezeaccount",{"_index":117,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezeaccount(accountid",{"_index":160,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezes",{"_index":162,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unpause",{"_index":642,"title":{},"body":{"injectables/HtsService.html":{}}}],["unpausetoken",{"_index":602,"title":{},"body":{"injectables/HtsService.html":{}}}],["unpausetoken(tokenid",{"_index":640,"title":{},"body":{"injectables/HtsService.html":{}}}],["update",{"_index":169,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["update(fileid",{"_index":506,"title":{},"body":{"injectables/HfsService.html":{}}}],["updateaccount",{"_index":118,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updateaccount(accountid",{"_index":163,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updates",{"_index":168,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updatetopic",{"_index":386,"title":{},"body":{"injectables/HcsService.html":{}}}],["updatetopic(topicid",{"_index":413,"title":{},"body":{"injectables/HcsService.html":{}}}],["updating",{"_index":972,"title":{},"body":{"index.html":{}}}],["url",{"_index":723,"title":{},"body":{"interfaces/IMirrorNode.html":{},"interfaces/IOperator.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["usage",{"_index":957,"title":{},"body":{"index.html":{}}}],["use",{"_index":437,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["useexisting",{"_index":953,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":281,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["usevalue",{"_index":280,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["value",{"_index":171,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["variables",{"_index":297,"title":{},"body":{"injectables/ClientService.html":{},"index.html":{}}}],["version",{"_index":1002,"title":{},"body":{"properties.html":{}}}],["void",{"_index":400,"title":{},"body":{"injectables/HcsService.html":{}}}],["wallet",{"_index":561,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["walletid",{"_index":556,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["workound",{"_index":206,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["wrapped",{"_index":681,"title":{},"body":{"injectables/HtsService.html":{}}}],["wrapper",{"_index":920,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":928,"title":{},"body":{"index.html":{}}}],["yes",{"_index":139,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsRestService.html":{}}}],["your_content_here",{"_index":990,"title":{},"body":{"index.html":{}}}],["your_operator_account_id",{"_index":945,"title":{},"body":{"index.html":{}}}],["your_operator_private_key",{"_index":946,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":47,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AccountBalance.html":{"url":"classes/AccountBalance.html","title":"class - AccountBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccountBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/models/account_balance.class.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hbars\n                            \n                            \n                                tokens\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        hbars\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Hbar\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/types/models/account_balance.class.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: TokenBalance, isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/types/models/account_balance.class.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Hbar } from \"@hashgraph/sdk/lib/contract/ContractCreateFlow\";\nimport { ITokenBalance } from \"../interfaces/token_balance.types\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport { TokenBalance } from \"./token_balance.class\";\n\nexport class AccountBalance {\n  @ApiProperty()\n  hbars: Hbar\n\n  @ApiProperty({type: TokenBalance, isArray: true})\n  tokens: Array  \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountsModule.html":{"url":"modules/AccountsModule.html","title":"module - AccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AccountsModule_imports\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHtsModule\n\nHtsModule\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\n\n\nAccountsRestService \n\nAccountsRestService \n\nAccountsRestService  -->\n\nAccountsModule->AccountsRestService \n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsRestService\n\nAccountsRestService\n\nAccountsModule -->\n\nAccountsRestService->AccountsModule\n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/accounts/accounts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsRestService\n                        \n                        \n                            AccountsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            HtsModule\n                        \n                        \n                            KeysModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountsRestService\n                        \n                        \n                            AccountsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\nimport { KeysModule } from '../keys/keys.module';\nimport { HtsModule } from '../hts/hts.module';\nimport { AccountsRestService } from './accounts-rest.service';\n\n@Module({\n  imports: [ClientModule, RestModule, KeysModule, HtsModule],\n  controllers: [],\n  providers: [AccountsService, AccountsRestService],\n  exports: [AccountsService, AccountsRestService]\n})\nexport class AccountsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsRestService.html":{"url":"injectables/AccountsRestService.html","title":"injectable - AccountsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/accounts/accounts-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getInfos\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/accounts/accounts-rest.service.ts:8\n                            \n                        \n\n                \n                    \n                            Transaction Rest Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getInfos\n                        \n                    \n                \n            \n            \n                \ngetInfos(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts-rest.service.ts:23\n                \n            \n\n\n            \n                \n                    Fetch infos for a given AccountId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class AccountsRestService {\n\n  /**\n   * Transaction Rest Service\n   * @param {RestService} restService \n   */\n  constructor(\n    private restService: RestService\n  ) { }\n\n  /**\n   * Fetch infos for a given AccountId\n   * @param {string} accountId \n   * @returns {any} response\n   */\n  getInfos(accountId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transactions: any = [];\n\n        let accountInfos = await this.restService\n          .call(`accounts/${accountId}`);\n\n        resolve(accountInfos);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsService.html":{"url":"injectables/AccountsService.html","title":"injectable - AccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/accounts/accounts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                freezeAccount\n                            \n                            \n                                    Async\n                                getInfo\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                getQueryBalance\n                            \n                            \n                                    Async\n                                unfreezeAccount\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService, keysService: KeysService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/accounts/accounts.service.ts:31\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keysService\n                                                  \n                                                        \n                                                                        KeysService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(balance: number, keysLength: number, publicKeys?: Array, keysThreshold?: number, maxAutomaticTokenAssociations?: number, isReceiverSignatureRequired?: boolean, isOfflineTransaction?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:172\n                \n            \n\n\n            \n                \n                    Creates a single or multi-sig account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    balance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keysLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    publicKeys\n                                    \n                                            Array\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    keysThreshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxAutomaticTokenAssociations\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    isReceiverSignatureRequired\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    isOfflineTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        , PrivateKey} single or multi-sig account\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        freezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:245\n                \n            \n\n\n            \n                \n                    Freezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:48\n                \n            \n\n\n            \n                \n                    Fetches specific Account Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:73\n                \n            \n\n\n            \n                \n                    Fetches Specific account public key\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Public Key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getQueryBalance\n                        \n                    \n                \n            \n            \n                \ngetQueryBalance(accountId: string | AccountId, tokenId?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:304\n                \n            \n\n\n            \n                \n                    Get query balance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            string | AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfreezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:275\n                \n            \n\n\n            \n                \n                    Unfreezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(accountId: AccountId, signKey: PrivateKey, newKey?: PrivateKey, memo?: string, maxAutomaticTokenAssociations?: number, isReceiverSignatureRequired?: boolean, isOfflineTransaction?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:95\n                \n            \n\n\n            \n                \n                    Updates Account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxAutomaticTokenAssociations\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    isReceiverSignatureRequired\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    isOfflineTransaction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Update\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Accounts Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/accounts/accounts.service.ts:31\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  AccountBalanceQuery,\n  AccountCreateTransaction,\n  AccountId,\n  AccountInfo,\n  AccountInfoQuery,\n  AccountUpdateTransaction,\n  Hbar,\n  PrivateKey,\n  Status,\n  TokenFreezeTransaction,\n  TokenId,\n  TokenUnfreezeTransaction\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { KeysService } from '../keys/keys.service';\nimport { ITokenBalance } from '../../types/interfaces/token_balance.types';\nimport { IAccountBalance } from '../../types/interfaces/account_balance.types';\nimport { IPrivateKeyList } from '../../types/interfaces/private-key-list.types';\nimport { Decimal } from 'decimal.js';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class AccountsService {\n  /**\n  * Logger Service\n  */\n  protected logger: Logger = new Logger(\"Accounts Service\");\n\n  /**\n   * Constructor\n   * @param {ClientService} clientService \n   * @param {KeysService} keysService \n   */\n  constructor(\n    private clientService: ClientService,\n    private keysService: KeysService\n  ) { }\n\n  /**\n   * Fetches specific Account Info\n   * @param {AccountId} accountId \n   * @returns {AccountInfo}\n   */\n  async getInfo(accountId: AccountId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = new AccountInfoQuery()\n          .setAccountId(accountId);\n\n        // Signing the transaction...\n        const accountInfo = await transaction.execute(client);\n\n        // resolving the account's info...\n        resolve(accountInfo);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Fetches Specific account public key\n * @param {AccountId} accountId \n * @returns {any} Account Public Key\n */\n  async getKeys(accountId: AccountId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const accountInfo = await this.getInfo(accountId);\n        resolve(accountInfo.key);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Updates Account\n   * @param {AccountId} accountId \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @returns {Status} Account Update\n   */\n  async updateAccount(\n    accountId: AccountId,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,\n    memo?: string,\n    maxAutomaticTokenAssociations?: number,\n    isReceiverSignatureRequired?: boolean,\n    isOfflineTransaction?: boolean\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // generating random number, as a workound for offline signature...\n        let nodeAccountId = this.clientService.getRandomNodeForNetwork();\n\n        // Creating the transaction...\n        const transaction = await new AccountUpdateTransaction()\n          .setNodeAccountIds([nodeAccountId])\n          .setAccountId(accountId);\n\n        if (memo) {\n          transaction.setAccountMemo(memo);\n        }\n\n        if(maxAutomaticTokenAssociations) {\n          transaction.setMaxAutomaticTokenAssociations(maxAutomaticTokenAssociations);\n        }\n\n        if(isReceiverSignatureRequired) {\n          transaction.setReceiverSignatureRequired(true);\n        }        \n\n        if (newKey) {\n          transaction.setKey(newKey);\n        }\n\n        if(isOfflineTransaction) {\n          // generating random number, as a workound for offline signature...\n          let nodeAccountId = this.clientService.getRandomNodeForNetwork();\n          transaction.setNodeAccountIds([nodeAccountId]);\n        }\n\n        transaction.freezeWith(client);\n\n        if(isOfflineTransaction) {\n          resolve(transaction);\n        } else {\n        // Signing the transaction...\n        let signTx = await transaction.sign(signKey);\n\n        if (newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n\n        // Signing the transaction with the client operator...\n        const txResponse = await signTx.execute(client);\n\n        // Request the receipt of the transaction...\n        const receipt = await txResponse.getReceipt(client);\n\n        // Get the transaction consensus status...\n        resolve(receipt.status);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Creates a single or multi-sig account\n * @param {number} balance \n * @param {number} keysLength \n * @param {number} keysThreshold \n * @returns {AccountId, PrivateKey} single or multi-sig account\n */\n  async createAccount(\n    balance: number,\n    keysLength: number,\n    publicKeys?: Array,\n    keysThreshold?: number,\n    maxAutomaticTokenAssociations?: number,\n    isReceiverSignatureRequired?: boolean,\n    isOfflineTransaction?: boolean\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let key = null;\n\n        if (keysLength > 1) {\n          key = await this.keysService.generateKeyList(publicKeys, keysLength, keysThreshold);\n        } else {\n          key = await this.keysService.generateKey();\n        }\n\n        //Creating the transaction...\n        const transaction = new AccountCreateTransaction()\n          .setKey(keysLength > 1 ? (key).keyList : (key).publicKey);\n\n        if(balance) {\n          transaction.setInitialBalance(new Hbar(balance.toFixed(8)));\n        }\n\n        if(maxAutomaticTokenAssociations) {\n          transaction.setMaxAutomaticTokenAssociations(maxAutomaticTokenAssociations);\n        }\n\n        if(isReceiverSignatureRequired) {\n          transaction.setReceiverSignatureRequired(true);\n        }\n\n        if(isOfflineTransaction) {\n          // generating random number, as a workound for offline signature...\n          let nodeAccountId = this.clientService.getRandomNodeForNetwork();\n          transaction.setNodeAccountIds([nodeAccountId]);\n        }\n\n        transaction.freezeWith(client);\n\n        if(isOfflineTransaction) {\n          resolve(transaction);\n        } else {\n          // Executing the transactions...\n          const txResponse = await transaction.execute(client);\n\n          // Fetching the receipt...\n          const receipt = await txResponse.getReceipt(client);\n\n          // resolving the accountId...\n          resolve({\n            accountId: receipt.accountId,\n            key: key\n          });\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Freezes account related to token ID\n * @param {AccountId} accountId \n * @param {TokenId} tokenId \n * @param {string} freezeKey \n * @returns {Status}\n */\n  async freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = await new TokenFreezeTransaction()\n          .setAccountId(accountId)\n          .setTokenId(tokenId)\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Unfreezes account related to token ID\n * @param {AccountId} accountId \n * @param {TokenId} tokenId \n * @param {string} freezeKey \n * @returns {Status}\n */\n  async unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = await new TokenUnfreezeTransaction()\n          .setAccountId(accountId)\n          .setTokenId(tokenId)\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Get query balance\n * @param {string} accountId \n * @param {string} tokenId \n * @returns {IAccountBalance}\n */\n  getQueryBalance(accountId: string | AccountId, tokenId?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const query = new AccountBalanceQuery()\n          .setAccountId(accountId);\n\n        const response = await query.execute(client);\n        let balance = null;\n\n        if (tokenId) {\n          balance = {\n            tokens: [{\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? new Decimal(response.tokens._map.get(tokenId)?.toString()) : 0,\n              decimals: response.tokens?._map.get(tokenId) ? new Decimal(response.tokenDecimals?._map.get(tokenId)) : 0\n            }],\n            hbars: response.hbars\n          };\n        } else {\n          let tokens = new Array();\n\n          response.tokens?._map.forEach((value, tokenId) => {\n            tokens.push({\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? new Decimal(response.tokens._map.get(tokenId)?.toString()) : new Decimal(0),\n              decimals: response.tokens?._map.get(tokenId) ? new Decimal(response.tokenDecimals?._map.get(tokenId)) : new Decimal(0)\n            });\n          });\n\n          balance = {\n            tokens: tokens,\n            hbars: response.hbars\n          };\n        }\n\n        resolve(balance);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientModule.html":{"url":"modules/ClientModule.html","title":"module - ClientModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/client/client.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: IHederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                IHederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { ClientService } from './client.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { IHederaOptions } from '../../types/interfaces/hedera_options.types';\n\n@Module({})\nexport class ClientModule {\n  static forRoot(options: IHederaOptions): DynamicModule {\n    return {\n      module: ClientModule,\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: ClientModule,\n      imports: [ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/client/client.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                custom\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    Private\n                                mirrorNode\n                            \n                            \n                                    Private\n                                network\n                            \n                            \n                                    Private\n                                operator\n                            \n                            \n                                    Private\n                                operators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateCustomClient\n                            \n                            \n                                getClient\n                            \n                            \n                                getNodeOperator\n                            \n                            \n                                getRandomNodeForNetwork\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: IHederaOptions)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/client/client.service.ts:47\n                            \n                        \n\n                \n                    \n                            Hedera Network variables\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        IHederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateCustomClient\n                        \n                    \n                \n            \n            \n                \ngenerateCustomClient(accountId: string, privateKey: string, environment: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    privateKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    environment\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('client.invalid_node_operator')\n                \n            \n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:71\n                \n            \n\n\n            \n                \n                    If the client gives invalid node error...\n\n\n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        random operator...\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeOperator\n                        \n                    \n                \n            \n            \n                \ngetNodeOperator()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:114\n                \n            \n\n\n            \n                \n                    Gets a node operator\n\n\n                    \n                    \n                    \n                        Returns :         IOperator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomNodeForNetwork\n                        \n                    \n                \n            \n            \n                \ngetRandomNodeForNetwork()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     AccountId\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:17\n                        \n                    \n\n            \n                \n                    Client\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        custom\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    node: null,\n    mirror: null\n  }\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Client Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:47\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mirrorNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IMirrorNode\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"mainnet\" | \"testnet\" | \"custom\"\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:32\n                        \n                    \n\n            \n                \n                    Network choice\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IOperator\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:22\n                        \n                    \n\n            \n                \n                    Single IOperator\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operators\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:27\n                        \n                    \n\n            \n                \n                    Array of IOperators\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { IOperator } from '../../types/interfaces/operator.types';\nimport { IHederaOptions } from '../../types/interfaces/hedera_options.types';\nimport { AccountId, Client } from '@hashgraph/sdk';\nimport { IMirrorNode } from \"../../types/interfaces/mirror.types\";\n\n/**\n * Injectable\n */\n@Injectable()\nexport class ClientService {\n\n  /**\n   * Client\n   */\n  private client: Client;\n\n  /**\n   * Single IOperator\n   */\n  private operator: IOperator;\n\n  /**\n   * Array of IOperators\n   */\n  private operators: Array;\n\n  /**\n   * Network choice\n   */\n  private network: 'mainnet' | 'testnet' | 'custom';\n\n  private custom: {\n    node: { [key: string]: string | AccountId },\n    mirror: string\n  } = {\n    node: null,\n    mirror: null\n  };\n\n  private mirrorNode: IMirrorNode;\n\n  /**\n   * Logger Service\n   */\n  private logger: Logger = new Logger(\"Client Service\");\n\n  /**\n   * Hedera Network variables\n   * @param {IHederaOptions} hederaOptions \n   */\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: IHederaOptions\n  ) {\n    this.network = this.hederaOptions.network;\n    this.operators = this.hederaOptions.operators;\n    this.custom.node = this.hederaOptions.custom.node;\n    this.custom.mirror = this.hederaOptions.custom.mirror;\n\n    // Create our connection to the Hedera network...\n    this.client = this.getClient();\n    this.operator = this.getNodeOperator();\n  }\n\n  /**\n   * If the client gives invalid node error...\n   * @returns random operator...\n   */\n  @OnEvent('client.invalid_node_operator')\n  getClient(): Client {\n    switch(this.network)  {\n      case 'testnet':\n        this.client = Client.forTestnet();\n        break;\n      case 'mainnet':\n        this.client = Client.forMainnet();\n        this.client.setMirrorNetwork(\"mainnet-public.mirrornode.hedera.com:443\");\n        break;\n      case 'custom':\n        this.client = Client.forNetwork(this.custom.node).setMirrorNetwork(this.custom.mirror);\n        break;\n    }\n\n    this.operator = this.operators[Math.floor(Math.random() * this.operators.length)];\n    this.client.setOperator(this.operator.accountId, this.operator.privateKey);\n    return this.client;\n  }\n\n  generateCustomClient(accountId: string, privateKey: string, environment: string): Client {\n    let client = null;\n\n    switch(environment)  {\n      case 'testnet':\n        client = Client.forTestnet();\n        break;\n      case 'mainnet':\n        client = Client.forMainnet();\n        this.client.setMirrorNetwork(\"mainnet-public.mirrornode.hedera.com:443\");\n        break;\n      case 'custom':\n        client = Client.forNetwork(this.custom.node).setMirrorNetwork(this.custom.mirror);\n        break;\n    }\n\n    client.setOperator(accountId, privateKey);\n    return client;\n  }\n\n  /**\n   * Gets a node operator\n   * @returns {IOperator}\n   */\n  getNodeOperator(): IOperator {\n    return this.operator;\n  }\n\n  getRandomNodeForNetwork(): AccountId {\n    let nodeAccountId = 0;\n\n    switch(this.network) {\n      case 'mainnet':\n        // generating random number from 3 to 28...\n        nodeAccountId = Math.floor(Math.random() * (28 - 3 + 1) + 3);\n        break;\n      case 'testnet':\n        // generating random number from 3 to 9...\n        nodeAccountId = Math.floor(Math.random() * (9 - 3 + 1) + 3);\n        break;\n    }\n\n    return new AccountId(nodeAccountId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HcsModule.html":{"url":"modules/HcsModule.html","title":"module - HcsModule","body":"\n                   \n\n\n\n\n    Modules\n    HcsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_providers\n\n\n\ncluster_HcsModule_imports\n\n\n\ncluster_HcsModule_exports\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\n\n\nHcsRestService \n\nHcsRestService \n\nHcsRestService  -->\n\nHcsModule->HcsRestService \n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsRestService\n\nHcsRestService\n\nHcsModule -->\n\nHcsRestService->HcsModule\n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hcs/hcs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HcsRestService\n                        \n                        \n                            HcsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HcsRestService\n                        \n                        \n                            HcsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HcsService } from './hcs.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\nimport { HcsRestService } from './hcs-rest.service';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [HcsService, HcsRestService],\n  exports: [HcsService, HcsRestService]\n})\nexport class HcsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HcsRestService.html":{"url":"injectables/HcsRestService.html","title":"injectable - HcsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HcsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hcs/hcs-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getLatestMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hcs/hcs-rest.service.ts:8\n                            \n                        \n\n                \n                    \n                            Transaction Rest Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getLatestMessages\n                        \n                    \n                \n            \n            \n                \ngetLatestMessages(topicId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs-rest.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HcsRestService {\n\n  /**\n   * Transaction Rest Service\n   * @param {RestService} restService \n   */\n  constructor(\n    private restService: RestService\n  ) { }\n\n  getLatestMessages(topicId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`topics/${topicId}/messages?order=desc`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HcsService.html":{"url":"injectables/HcsService.html","title":"injectable - HcsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HcsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hcs/hcs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTopic\n                            \n                            \n                                deleteTopic\n                            \n                            \n                                getMessages\n                            \n                            \n                                submitMessage\n                            \n                            \n                                topicInfo\n                            \n                            \n                                updateTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hcs/hcs.service.ts:28\n                            \n                        \n\n                \n                    \n                            HCS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTopic\n                        \n                    \n                \n            \n            \n                \ncreateTopic(adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:47\n                \n            \n\n\n            \n                \n                    Create topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTopic\n                        \n                    \n                \n            \n            \n                \ndeleteTopic(topicId: TopicId, adminKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:157\n                \n            \n\n\n            \n                \n                    Delete topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMessages\n                        \n                    \n                \n            \n            \n                \ngetMessages(topicId: TopicId, callback: (message: any) => void, start?: number, end?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:254\n                \n            \n\n\n            \n                \n                    Get topic message\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Subscription Message\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitMessage\n                        \n                    \n                \n            \n            \n                \nsubmitMessage(topicId: TopicId, message: string | Uint8Array, submitKey?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:210\n                \n            \n\n\n            \n                \n                    Submit Message\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            string | Uint8Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topicInfo\n                        \n                    \n                \n            \n            \n                \ntopicInfo(topicId: TopicId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:187\n                \n            \n\n\n            \n                \n                    Get topic info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTopic\n                        \n                    \n                \n            \n            \n                \nupdateTopic(topicId: TopicId, currentAdminKey?: PrivateKey, adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:100\n                \n            \n\n\n            \n                \n                    Update topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentAdminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HCS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hcs/hcs.service.ts:28\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  TopicCreateTransaction,\n  TopicUpdateTransaction,\n  TopicDeleteTransaction,\n  TopicMessageSubmitTransaction,\n  TopicMessageQuery,\n  TopicMessage,\n  TopicInfoQuery,\n  TopicInfo,\n  TopicId,\n  PrivateKey,\n  Status,\n  Key,\n  KeyList\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HcsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HCS Service\");\n\n  /**\n   * HCS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) {\n  }\n\n\n  /**\n   * Create topic\n   * @param {PrivateKey} adminKey \n   * @param {Key} submitKey \n   * @param {string} memo \n   * @returns {TopicId}\n   */\n  createTopic(\n    adminKey?: PrivateKey,\n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // creating the transaction...\n        const transaction = new TopicCreateTransaction();\n        let txResponse = null;\n        // setting the admin key, if any...\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n        // setting the submit key, if any...\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n        // setting the topic memo, if any...\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n        // freezing the transaction...\n        transaction.freezeWith(client);\n        // if there is an admin key, transaction must be signed...\n        if (adminKey) {\n          const signTx = await transaction.sign(adminKey);\n          txResponse = await signTx.execute(client);\n        }\n        // otherwise, we can just execute it...\n        else {\n          txResponse = await transaction.execute(client);\n        }\n        // finally, fetching the topicId from the response...\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.topicId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Update topic\n   * @param {TopicId} topicId \n   * @param {PrivateKey} currentAdminKey \n   * @param {PrivateKey} adminKey \n   * @param {Key} submitKey \n   * @param {string} memo \n   * @returns {Status}\n   */\n  updateTopic(\n    topicId: TopicId,\n    currentAdminKey?: PrivateKey,\n    adminKey?: PrivateKey,\n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // creating the transaction...\n        const transaction = new TopicUpdateTransaction().setTopicId(topicId);\n        let txResponse = null;\n        // setting the new admin key, if any...\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n        // setting the new submit key, if any...\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n        // setting the new topic memo, if any...\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n        // freezing the transaction...\n        transaction.freezeWith(client);\n        // if the transaction has got an admin key, we must use it to sign...\n        if (currentAdminKey) {\n          let signTx = await transaction.sign(currentAdminKey);\n          // if there is a new admin key, we must use it to double sign it...\n          if (adminKey) {\n            signTx = await signTx.sign(adminKey);\n          }\n          // executing the transaction, after signatures...\n          txResponse = await signTx.execute(client);\n        }\n        // otherwise we can just sign the transaction...\n        else {\n          txResponse = await transaction.execute(client);\n        }\n        // fetching the status of the executed transaction...\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Delete topic\n   * @param {TopicId} topicId \n   * @param {PrivateKey} adminKey \n   * @returns {Status}\n   */\n  deleteTopic(\n    topicId: TopicId,\n    adminKey: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // creating the transaction, and freezing it...\n        const transaction = new TopicDeleteTransaction()\n          .setTopicId(topicId)\n          .freezeWith(client);\n        // signing the transaction with admin key...\n        const signTx = await transaction.sign(adminKey);\n        // fetching response...\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        // resolving status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get topic info\n   * @param {TopicId} topicId \n   * @returns {TopicInfo}\n   */\n  topicInfo(\n    topicId: TopicId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = new TopicInfoQuery().setTopicId(topicId);\n        const info = await transaction.execute(client);\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Submit Message\n   * @param {TopicId} topicId \n   * @param {string} message \n   * @param {PrivateKey} submitKey \n   * @returns {string} \n   */\n  submitMessage(\n    topicId: TopicId,\n    message: string | Uint8Array,\n    submitKey?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let txResponse = null;\n        // creating the transaction, setting topic and message...\n        const transaction = new TopicMessageSubmitTransaction()\n          .setTopicId(topicId)\n          .setMessage(message);\n        // freezing the transaction...\n        transaction.freezeWith(client);\n        // if there is an submit key, transaction must be signed...\n        if (submitKey) {\n          const signTx = await transaction.sign(submitKey);\n          txResponse = await signTx.execute(client);\n        }\n        // otherwise, we can just execute it...\n        else {\n          txResponse = await transaction.execute(client);\n        }\n        // finally, fetching the status...\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.topicSequenceNumber?.toString());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Get topic message\n   * @param {TopicId} topicId \n   * @param {any} callback \n   * @param {number} start \n   * @param {number} end \n   * @param {number} limit \n   * @returns {any} Subscription Message\n   */\n  getMessages(\n    topicId: TopicId,\n    callback: (message: any) => void,\n    start?: number,\n    end?: number,\n    limit?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // creating the transaction...\n        const transaction = new TopicMessageQuery()\n          .setTopicId(topicId);\n\n        if (start !== undefined) {\n          transaction.setStartTime(start);\n        }\n\n        if (end !== undefined) {\n          transaction.setEndTime(end);\n        }\n\n        if (limit !== undefined) {\n          transaction.setLimit(limit);\n        }\n\n        let subscription = transaction.subscribe(\n          client,\n          function(message, error) {\n            console.error(\"error while subscribing\",error);\n          },\n          (message) => callback(message)\n        );\n\n        resolve(subscription);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HederaModule.html":{"url":"modules/HederaModule.html","title":"module - HederaModule","body":"\n                   \n\n\n\n\n    Modules\n    HederaModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hedera.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: IHederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                IHederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { HederaService } from './hedera.service';\nimport { KeysModule } from './keys/keys.module';\nimport { TransactionsModule } from './transactions/transactions.module';\nimport { ClientModule } from './client/client.module';\nimport { RestModule } from './rest/rest.module';\nimport { HcsModule } from './hcs/hcs.module';\nimport { HfsModule } from './hfs/hfs.module';\nimport { HtsModule } from './hts/hts.module';\nimport { AccountsModule } from './accounts/accounts.module';\nimport { IHederaOptions } from '../types/interfaces/hedera_options.types';\n\n@Module({})\nexport class HederaModule {\n  static forRoot(options: IHederaOptions): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HederaService.html":{"url":"injectables/HederaService.html","title":"injectable - HederaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HederaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hedera.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Hedera Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hedera.service.ts:12\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HederaService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Hedera Service\");\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HfsModule.html":{"url":"modules/HfsModule.html","title":"module - HfsModule","body":"\n                   \n\n\n\n\n    Modules\n    HfsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_imports\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hfs/hfs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HfsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HfsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HfsService } from './hfs.service';\nimport { ClientModule } from '../client/client.module';\n\n@Module({\n  imports: [ClientModule],\n  controllers: [],\n  providers: [HfsService],\n  exports: [HfsService]\n})\nexport class HfsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HfsService.html":{"url":"injectables/HfsService.html","title":"injectable - HfsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HfsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hfs/hfs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                append\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getContents\n                            \n                            \n                                    Async\n                                getInfos\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hfs/hfs.service.ts:25\n                            \n                        \n\n                \n                    \n                            HFS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        append\n                        \n                    \n                \n            \n            \n                \n                    \n                    append(fileId: FileId, key: PrivateKey, content: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:90\n                \n            \n\n\n            \n                \n                    Append File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(key: PrivateKey, content: string, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:43\n                \n            \n\n\n            \n                \n                    Create File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(fileId: FileId, key: PrivateKey, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:192\n                \n            \n\n\n            \n                \n                    Delete File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContents(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:230\n                \n            \n\n\n            \n                \n                    Get contents\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfos(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:255\n                \n            \n\n\n            \n                \n                    Get Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(fileId: FileId, content: string, signKey: PrivateKey, newKey?: PrivateKey, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:135\n                \n            \n\n\n            \n                \n                    Update File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HFS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hfs/hfs.service.ts:25\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { \n  FileAppendTransaction, \n  FileContentsQuery, \n  FileCreateTransaction, \n  FileDeleteTransaction, \n  FileId, \n  FileInfo, \n  FileInfoQuery, \n  FileUpdateTransaction, \n  Hbar, \n  PrivateKey, \n  Status \n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HfsService {\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HFS Service\");\n\n  /**\n   * HFS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  /**\n   * Create File\n   * @param {PrivateKey} key \n   * @param {string} content \n   * @param {string} memo \n   * @param {number} maxTransactionFee \n   * @returns {FileId} \n   */\n  async create(\n    key: PrivateKey,\n    content: string,\n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = await new FileCreateTransaction()\n          .setKeys([key])\n          .setContents(content);\n\n        if(memo) {\n          transaction.setFileMemo(memo);\n        }\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee.toFixed(8)));\n        }\n\n        transaction.freezeWith(client);\n\n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(client);\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(client);\n        // Get the file ID\n        resolve(receipt.fileId);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Append File\n   * @param {FileId} fileId \n   * @param {PrivateKey} key \n   * @param {string} content \n   * @param {number} maxTransactionFee \n   * @returns {Status}\n   */\n  async append(\n    fileId: FileId,\n    key: PrivateKey,\n    content: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n        \n        // Creating the transaction...\n        const transaction = await new FileAppendTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee.toFixed(8)));\n        }\n\n        transaction.freezeWith(client);\n        \n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(client);\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(client);\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Update File\n   * @param {FileId} fileId \n   * @param {string} content \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @param {number} maxTransactionFee \n   * @returns {Status} \n   */\n  async update(\n    fileId: FileId,\n    content: string,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,    \n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = await new FileUpdateTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if(memo) {\n          transaction.setFileMemo(memo);\n        }          \n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee.toFixed(8)));\n        }\n\n        if(newKey) {\n          transaction.setKeys([newKey]);\n        }\n\n        transaction.freezeWith(client);\n        \n        // Signing the transaction...\n        let signTx = await transaction.sign(signKey);\n\n        if(newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n        \n        // Executing the transaction...\n        const submitTx = await signTx.execute(client);\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(client);\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Delete File\n   * @param {FileId} fileId \n   * @param {PrivateKey} key \n   * @param {number} maxTransactionFee \n   * @returns {Status} \n   */\n  async delete(\n    fileId: FileId,\n    key: PrivateKey,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = await new FileDeleteTransaction()\n          .setFileId(fileId);\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee.toFixed(8)));\n        }\n\n        transaction.freezeWith(client);\n        \n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(client);\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(client);\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get contents\n   * @param {FileId} fileId \n   * @returns {string}\n   */\n  async getContents(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = new FileContentsQuery()\n            .setFileId(fileId);\n\n        // Signing the transaction...\n        const contents = await transaction.execute(client);\n        resolve(contents.toString());\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get Info\n   * @param {FileId} fileId \n   * @returns {FileInfo}\n   */\n  async getInfos(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n        \n        // Creating the transaction...\n        const transaction = new FileInfoQuery()\n            .setFileId(fileId);\n\n        // Signing the transaction...\n        const infos = await transaction.execute(client);\n        resolve(infos);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HtsModule.html":{"url":"modules/HtsModule.html","title":"module - HtsModule","body":"\n                   \n\n\n\n\n    Modules\n    HtsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_imports\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hts/hts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HtsService } from './hts.service';\nimport { HtsRestService } from './hts-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule, ClientModule],\n  controllers: [],\n  providers: [HtsService, HtsRestService],\n  exports: [HtsService, HtsRestService]\n})\nexport class HtsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsRestService.html":{"url":"injectables/HtsRestService.html","title":"injectable - HtsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllHolders\n                            \n                            \n                                getAllHoldersFromWallet\n                            \n                            \n                                getAllNftForHolder\n                            \n                            \n                                getAllNftHolders\n                            \n                            \n                                getTokenInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts-rest.service.ts:9\n                            \n                        \n\n                \n                    \n                            HTS REST Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHolders\n                        \n                    \n                \n            \n            \n                \ngetAllHolders(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:42\n                \n            \n\n\n            \n                \n                    Get array of holders by tokenId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHoldersFromWallet\n                        \n                    \n                \n            \n            \n                \ngetAllHoldersFromWallet(tokenId: string, walletId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:172\n                \n            \n\n\n            \n                \n                    Get array of holders from walletId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    walletId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllNftForHolder\n                        \n                    \n                \n            \n            \n                \ngetAllNftForHolder(walletId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:128\n                \n            \n\n\n            \n                \n                    Get array of NFT for a given wallet\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    walletId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllNftHolders\n                        \n                    \n                \n            \n            \n                \ngetAllNftHolders(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:85\n                \n            \n\n\n            \n                \n                    Get array of NFT holders by tokenId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTokenInfo\n                        \n                    \n                \n            \n            \n                \ngetTokenInfo(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:24\n                \n            \n\n\n            \n                \n                    Get Token Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\nimport * as lodash from 'lodash';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HtsRestService {\n\n  /**\n   * HTS REST Service\n   * @param restService \n   */\n  constructor(\n    private restService: RestService\n  ) { }\n\n  /**\n   * Get Token Info\n   * @param {string} tokenId \n   * @returns {any} response\n   */\n  getTokenInfo(tokenId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`tokens/${tokenId}`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get array of holders by tokenId\n   * @param {string} tokenId \n   * @returns {Array}\n   */\n  getAllHolders(tokenId: string): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n          .call(`tokens/${tokenId}/balances`);\n\n        holders = holders.concat(response.balances);\n        let retry = false;\n        let timeout = 0;\n\n        while (response.links.next || retry) {\n          if(timeout) {\n            await new Promise(resolve => setTimeout(resolve, timeout));\n          }\n\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          try {\n            response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n            holders = holders.concat(response.balances);\n            retry = false;\n          } catch(error) {\n            timeout += 100;\n            retry = true;\n          }\n        }\n\n        resolve(holders);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Get array of NFT holders by tokenId\n * @param {string} tokenId \n * @returns {Array}\n */\n  getAllNftHolders(tokenId: string): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n          .call(`tokens/${tokenId}/nfts`);\n\n        holders = holders.concat(response.nfts);\n        let retry = false;\n        let timeout = 0;\n\n        while (response.links.next || retry) {\n          if(timeout) {\n            await new Promise(resolve => setTimeout(resolve, timeout));\n          }\n          \n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          try {  \n            response = await this.restService\n            .call(`tokens/${tokenId}/nfts?${next}`);\n\n          holders = holders.concat(response.nfts);\n          retry = false;\n          } catch(error) {\n            timeout += 100;\n            retry = true;\n          }\n        }\n\n        resolve(holders);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n* Get array of NFT for a given wallet\n* @param {string} walletId \n* @returns {Array}\n*/\n  getAllNftForHolder(walletId: string): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let nfts: any = [];\n\n        let response = await this.restService\n          .call(`accounts/${walletId}/nfts`);\n\n        nfts = nfts.concat(response.nfts);\n        let retry = false;\n        let timeout = 0;        \n\n        while (response.links.next || retry) {\n          if(timeout) {\n            await new Promise(resolve => setTimeout(resolve, timeout));\n          }\n\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          try {  \n            response = await this.restService\n            .call(`accounts/${walletId}/nfts?${next}`);\n\n            nfts = nfts.concat(response.nfts);\n          retry = false;\n          } catch(error) {\n            timeout += 100;\n            retry = true;\n          }\n        }\n\n        resolve(nfts);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get array of holders from walletId\n   * @param {string} tokenId \n   * @param {string} walletId \n   * @returns {Array}\n   */\n  getAllHoldersFromWallet(tokenId: string, walletId: string): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n          .call(`tokens/${tokenId}/balances?account.id=gt:${walletId}`);\n\n        holders = holders.concat(response.balances);\n\n        while (response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsService.html":{"url":"injectables/HtsService.html","title":"injectable - HtsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                associateToken\n                            \n                            \n                                    Async\n                                atomicSwap\n                            \n                            \n                                    Async\n                                burnNftToken\n                            \n                            \n                                    Async\n                                dissociateToken\n                            \n                            \n                                    Async\n                                getNftInfo\n                            \n                            \n                                    Async\n                                mintNftToken\n                            \n                            \n                                    Async\n                                pauseToken\n                            \n                            \n                                    Async\n                                transferHbar\n                            \n                            \n                                    Async\n                                transferNftToken\n                            \n                            \n                                    Async\n                                transferToken\n                            \n                            \n                                    Async\n                                unpauseToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts.service.ts:33\n                            \n                        \n\n                \n                    \n                            HTS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        associateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    associateToken(accountId: AccountId, tokenId: TokenId, keys: PrivateKey | Array)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:50\n                \n            \n\n\n            \n                \n                    Associate Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keys\n                                    \n                                            PrivateKey | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        atomicSwap\n                        \n                    \n                \n            \n            \n                \n                    \n                    atomicSwap(swaps: Array, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:430\n                \n            \n\n\n            \n                \n                    Atomic Swap\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    swaps\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        burnNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    burnNftToken(tokenId: TokenId, serialNumber: number, supplyKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:234\n                \n            \n\n\n            \n                \n                    Burn NFT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    supplyKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        dissociateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    dissociateToken(accountId: AccountId, tokenId: TokenId, keys: PrivateKey | Array)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:97\n                \n            \n\n\n            \n                \n                    Disassociate Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keys\n                                    \n                                            PrivateKey | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNftInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNftInfo(tokenId: TokenId, serialNumber: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:265\n                \n            \n\n\n            \n                \n                    Get NFT Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        mintNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    mintNftToken(tokenId: TokenId, CID: string, supplyKey?: PrivateKey | Array)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:187\n                \n            \n\n\n            \n                \n                    Mint NFT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    CID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    supplyKey\n                                    \n                                            PrivateKey | Array\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    pauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:136\n                \n            \n\n\n            \n                \n                    Pause Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferHbar\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferHbar(amount: number, from: AccountId, to: AccountId, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:294\n                \n            \n\n\n            \n                \n                    Transfer HBAR\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferNftToken(tokenId: TokenId, from: AccountId, to: AccountId, serialNumber: number, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:495\n                \n            \n\n\n            \n                \n                    Transfer NFT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferToken(tokenId: TokenId | Array, from: AccountId, to: AccountId, amount: number | Array, tokenDecimals: number | Array, memo?: string, key?: PrivateKey, hbarAmount?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:354\n                \n            \n\n\n            \n                \n                    Transfer Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    amount\n                                    \n                                            number | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenDecimals\n                                    \n                                            number | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    hbarAmount\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unpauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    unpauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:161\n                \n            \n\n\n            \n                \n                    Unpause Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HTS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hts/hts.service.ts:33\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  AccountId,\n  Hbar,\n  PrivateKey,\n  Status,\n  TokenAssociateTransaction,\n  TokenId,\n  TokenMintTransaction,\n  TokenPauseTransaction,\n  TokenUnpauseTransaction,\n  TokenDissociateTransaction,\n  Transaction,\n  TransferTransaction,\n  TransactionReceipt,\n  NftId,\n  TokenNftInfoQuery,\n  TokenNftInfo,\n  TokenBurnTransaction\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ITransactionDetails } from '../../types/interfaces/transaction_details.types';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HtsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HTS Service\");\n\n  /**\n   * HTS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) { }\n\n  /**\n   * Associate Token\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {PrivateKey} key \n   * @returns {Status}\n   */\n  async associateToken(\n    accountId: AccountId,\n    tokenId: TokenId,\n    keys: PrivateKey | Array\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n        // generating random number, as a workound for offline signature...\n        let nodeAccountId = this.clientService.getRandomNodeForNetwork();\n        \n        const transaction = await new TokenAssociateTransaction()\n          .setNodeAccountIds([nodeAccountId])\n          .setAccountId(accountId)\n          .setTokenIds([tokenId])\n          .freezeWith(client);\n\n        let signTx = null;\n\n        if(keys) {\n          if (Array.isArray(keys)) {\n            for (let i = 0; i \n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = await new TokenDissociateTransaction()\n          .setAccountId(accountId)\n          .setTokenIds([tokenId])\n          .freezeWith(client);\n\n        let signTx = null;\n\n        if (Array.isArray(keys)) {\n          for (let i = 0; i  {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = new TokenPauseTransaction()\n          .setTokenId(tokenId)\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Unpause Token\n   * @param {TokenId} tokenId \n   * @param {PrivateKey} pauseKey \n   * @returns {Status} \n   */\n  async unpauseToken(tokenId: TokenId, pauseKey: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = new TokenUnpauseTransaction()\n          .setTokenId(tokenId)\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Mint NFT\n   * @param {TokenId} tokenId \n   * @param {PrivateKey} supplyKey \n   * @param {string} CID \n   * @returns {TransactionReceipt} \n   */\n  async mintNftToken(\n    tokenId: TokenId,\n    CID: string,\n    supplyKey?: PrivateKey | Array\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = new TokenMintTransaction()\n          .setTokenId(tokenId)\n          .addMetadata(Buffer.from(CID));\n\n        if (supplyKey) {\n          transaction.freezeWith(client);\n\n          let signTx = null;\n\n          if (Array.isArray(supplyKey)) {\n            for (let i = 0; i  {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let transaction = await new TokenBurnTransaction()\n          .setTokenId(tokenId)\n          .setSerials([serialNumber])\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(supplyKey);\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n\n        resolve(receipt);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get NFT Info\n   * @param {TokenId} tokenId \n   * @param {number} serialNumber \n   * @returns {TokenNftInfo[]} \n   */\n  async getNftInfo(\n    tokenId: TokenId,\n    serialNumber: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let nftId = new NftId(tokenId, serialNumber);\n        let nftInfos = await new TokenNftInfoQuery()\n          .setNftId(nftId)\n          .execute(client);\n\n        resolve(nftInfos);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Transfer HBAR\n   * @param {number} amount \n   * @param {AccountId} from \n   * @param {AccountId} to \n   * @param {string} memo \n   * @param {PrivateKey} key \n   * @returns {ITransactionDetails} \n   */\n  async transferHbar(\n    amount: number,\n    from: AccountId,\n    to: AccountId,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating a transaction...\n        const transaction = new TransferTransaction()\n          .addHbarTransfer(from, new Hbar(-amount.toFixed(8)))\n          .addHbarTransfer(to, new Hbar(amount.toFixed(8)));\n\n        if (memo) {\n          transaction.setTransactionMemo(memo);\n        }\n\n        if (key) {\n          transaction.freezeWith(client);\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n\n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(client);\n\n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(client);\n\n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          // if no key has been provided, we return the transasction to be wrapped\n          // into a scheduled transaction to allow multisig threshold mechanism...          \n          resolve(transaction);\n        }\n\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Transfer Token\n   * @param {TokenId | Array} tokenId \n   * @param {AccountId} from \n   * @param {AccountId} to \n   * @param {number | Array} amount \n   * @param {number | Array} tokenDecimals \n   * @param {string} memo \n   * @param {PrivateKey} key \n   * @returns {ITransactionDetails | Transaction} \n   */\n  async transferToken(\n    tokenId: TokenId | Array,\n    from: AccountId,\n    to: AccountId,\n    amount: number | Array,\n    tokenDecimals: number | Array,\n    memo?: string,\n    key?: PrivateKey,\n    hbarAmount?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction();\n\n        if(hbarAmount) {\n          transaction\n          .addHbarTransfer(from, new Hbar(-hbarAmount.toFixed(8)))\n          .addHbarTransfer(to, new Hbar(hbarAmount.toFixed(8)))\n        }\n\n        if (!Array.isArray(tokenId) && !Array.isArray(amount) && !Array.isArray(tokenDecimals)) {\n          transaction\n            .addTokenTransfer(tokenId, from, Number(-amount * (10 ** tokenDecimals)))\n            .addTokenTransfer(tokenId, to, Number(amount * (10 ** tokenDecimals)));\n        } else {\n          if (Array.isArray(tokenId) && Array.isArray(amount) && Array.isArray(tokenDecimals)) {\n            tokenId.forEach((token_id, index) => {\n              transaction\n                .addTokenTransfer(token_id, from, Number(-amount[index] * (10 ** Number(tokenDecimals[index]))))\n                .addTokenTransfer(token_id, to, Number(+amount[index] * (10 ** Number(tokenDecimals[index]))));\n            });\n          }\n        }\n\n        if (memo) {\n          transaction.setTransactionMemo(memo);\n        }\n\n        if (key) {\n          transaction.freezeWith(client);\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n\n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(client);\n\n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(client);\n\n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          // if no key has been provided, we return the transasction to be wrapped\n          // into a scheduled transaction to allow multisig threshold mechanism...\n          resolve(transaction);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Atomic Swap\n   * @param {Array} swaps \n   * @param {string} memo \n   * @param {PrivateKey} key \n   * @returns {ITransactionDetails | Transaction} \n   */\n  async atomicSwap(\n    swaps: Array,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction();\n\n        swaps.forEach(swap => {\n          if(swap.token.id == 'HBAR') {\n            transaction\n            .addHbarTransfer(swap.from, new Hbar(-swap.amount.toFixed(8)))\n            .addHbarTransfer(swap.to, new Hbar(swap.amount.toFixed(8)));\n          } else {\n            transaction\n            .addTokenTransfer(swap.token.id, swap.from, Number(-swap.amount * (10 ** swap.token.decimals)))\n            .addTokenTransfer(swap.token.id, swap.to, Number(swap.amount * (10 ** swap.token.decimals)));\n          }\n        });\n\n        if (memo) {\n          transaction.setTransactionMemo(memo);\n        }\n\n        if (key) {\n          transaction.freezeWith(client);\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n\n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(client);\n\n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(client);\n\n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          // if no key has been provided, we return the transasction to be wrapped\n          // into a scheduled transaction to allow multisig threshold mechanism...\n          resolve(transaction);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Transfer NFT\n   * @param {TokenId} tokenId \n   * @param {AccountId} from \n   * @param {AccountId} to \n   * @param {number} serialNumber \n   * @param {PrivateKey} key \n   * @returns {ITransactionDetails} \n   */\n  async transferNftToken(\n    tokenId: TokenId,\n    from: AccountId,\n    to: AccountId,\n    serialNumber: number,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction()\n          .addNftTransfer(new NftId(tokenId, serialNumber), from, to);\n\n        if (key) {\n          transaction.freezeWith(client);\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n\n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(client);\n\n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(client);\n\n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          // if no key has been provided, we return the transasction to be wrapped\n          // into a scheduled transaction to allow multisig threshold mechanism...\n          resolve(transaction);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAccountBalance.html":{"url":"interfaces/IAccountBalance.html","title":"interface - IAccountBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAccountBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/account_balance.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hbars\n                                        \n                                \n                                \n                                        \n                                            tokens\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hbars\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hbars:     Hbar\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Hbar\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    HBAR\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokens\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokens:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of custom tokens\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Hbar } from \"@hashgraph/sdk/lib/contract/ContractCreateFlow\";\nimport { ITokenBalance } from \"./token_balance.types\";\n\n/**\n * Interface\n */\nexport interface IAccountBalance {\n\n  /**\n   * HBAR\n   */\n  hbars: Hbar\n\n\n  /**\n   * Array of custom tokens\n   */\n  tokens: Array\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHederaOptions.html":{"url":"interfaces/IHederaOptions.html","title":"interface - IHederaOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IHederaOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/hedera_options.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            custom\n                                        \n                                \n                                \n                                        \n                                            mirrorNode\n                                        \n                                \n                                \n                                        \n                                            network\n                                        \n                                \n                                \n                                        \n                                            operators\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        custom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        custom:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mirrorNode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mirrorNode:         IMirrorNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IMirrorNode\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mirror Node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        network\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        network:     \"mainnet\" | \"testnet\" | \"custom\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"mainnet\" | \"testnet\" | \"custom\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Network choice\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operators\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operators:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of operators\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AccountId } from \"@hashgraph/sdk\";\nimport { IMirrorNode } from \"./mirror.types\";\nimport { IOperator } from \"./operator.types\";\n\n/**\n * Interface\n */\nexport interface IHederaOptions {\n\n\n  /**\n   * Array of operators\n   */\n  operators: Array\n\n  /**\n   * Mirror Node\n   */\n  mirrorNode: IMirrorNode\n\n  /**\n   * Network choice\n   */\n  network: 'mainnet' | 'testnet' | 'custom'\n\n  custom: {\n    node: { [key: string]: string | AccountId },\n    mirror: string\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMirrorNode.html":{"url":"interfaces/IMirrorNode.html","title":"interface - IMirrorNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IMirrorNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/mirror.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    API string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    URL string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IMirrorNode {\n\n  /**\n   * URL string\n   */\n  url: string\n\n  /**\n   * API string\n   */\n  apiKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IOperator.html":{"url":"interfaces/IOperator.html","title":"interface - IOperator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IOperator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/operator.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountId\n                                        \n                                \n                                \n                                        \n                                            privateKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            publicKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Account id string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Private key string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Public key string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    url string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IOperator {\n\n  /**\n   * Account id string\n   */\n  accountId: string\n\n  /**\n   * Private key string\n   */\n  privateKey: string\n\n  /**\n   * Public key string\n   */\n  publicKey?: string\n\n  /**\n   * url string\n   */\n   url?: string  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPrivateKeyList.html":{"url":"interfaces/IPrivateKeyList.html","title":"interface - IPrivateKeyList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPrivateKeyList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/private-key-list.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            keyList\n                                        \n                                \n                                \n                                        \n                                            privateKeys\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyList:     KeyList\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyList\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of keys\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKeys\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKeys:     PrivateKey[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrivateKey[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of Private keys\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { KeyList, PrivateKey } from \"@hashgraph/sdk\";\n\n\n/**\n * Interface\n */\nexport interface IPrivateKeyList {\n\n  /**\n   * Array of Private keys\n   */\n  privateKeys: PrivateKey[]\n\n  /**\n   * List of keys\n   */\n  keyList: KeyList\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITokenBalance.html":{"url":"interfaces/ITokenBalance.html","title":"interface - ITokenBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITokenBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/token_balance.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            balance\n                                        \n                                \n                                \n                                        \n                                            decimals\n                                        \n                                \n                                \n                                        \n                                            tokenId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        balance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        balance:     Decimal\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Decimal\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token balance\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        decimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        decimals:     Decimal\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Decimal\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token decimals number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokenId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token id string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Decimal } from 'decimal.js';\n\n/**\n * Interface\n */\nexport interface ITokenBalance {\n\n  /**\n   * Token id string\n   */\n  tokenId: string\n\n  /**\n    * Token balance\n    */\n  balance: Decimal\n\n  /**\n    * Token decimals number\n    */\n  decimals: Decimal\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITransactionDetails.html":{"url":"interfaces/ITransactionDetails.html","title":"interface - ITransactionDetails","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITransactionDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/interfaces/transaction_details.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            transaction_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:     Status\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Status\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Transaction status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transaction_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transaction_id:     TransactionId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TransactionId\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Transaction id\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Status, TransactionId } from \"@hashgraph/sdk\";\n\n/**\n * Interface\n */\nexport interface ITransactionDetails {\n\n  /**\n   * Transaction status\n   */\n  status: Status\n\n  /**\n   * Transaction id\n   */\n  transaction_id: TransactionId\n} \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeysModule.html":{"url":"modules/KeysModule.html","title":"module - KeysModule","body":"\n                   \n\n\n\n\n    Modules\n    KeysModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_KeysModule_exports\n\n\n\n\nKeysService \n\nKeysService \n\n\n\nKeysModule\n\nKeysModule\n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/keys/keys.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KeysService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KeysService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KeysService } from './keys.service';\n\n@Module({\n  controllers: [],\n  providers: [KeysService],\n  exports: [KeysService]\n})\nexport class KeysModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KeysService.html":{"url":"injectables/KeysService.html","title":"injectable - KeysService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KeysService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/keys/keys.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateKey\n                            \n                            \n                                generateKeyList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/hedera/keys/keys.service.ts:14\n                            \n                        \n\n                \n                    \n                            KeyService class\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKey\n                        \n                    \n                \n            \n            \n                \ngenerateKey()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:27\n                \n            \n\n\n            \n                \n                    Generate Private Key\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyList\n                        \n                    \n                \n            \n            \n                \ngenerateKeyList(publicKeys?: string[], length?: number, threshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:45\n                \n            \n\n\n            \n                \n                    Generate a list of Keys\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    publicKeys\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    threshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Keys Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/keys/keys.service.ts:14\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { PrivateKey, KeyList, PublicKey } from '@hashgraph/sdk';\nimport { IPrivateKeyList } from '../../types/interfaces/private-key-list.types';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class KeysService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Keys Service\");\n\n\n  /**\n   * KeyService class\n   */\n  constructor() {\n  }\n\n  /**\n   * Generate Private Key\n   * @returns {PrivateKey}\n   */\n  generateKey(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const key = await PrivateKey.generateED25519();\n        resolve(key);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Generate a list of Keys\n   * @param {string} publicKeys \n   * @param {number} length \n   * @param {number} threshold \n   * @returns {IPrivateKeyList} \n   */\n  generateKeyList(\n    publicKeys?: string[],\n    length?: number,\n    threshold?: number\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let publicKeyList: any = [];\n        // if an array of keys is provided, we use it...\n        if(publicKeys) {\n          publicKeys.forEach(key => {\n            publicKeyList.push(PublicKey.fromString(key));\n          });\n\n          resolve({\n            privateKeys: [], \n            keyList: new KeyList(publicKeyList, threshold? threshold : null)\n          });          \n        }\n        // otherwise, we generate the keys we need...\n        else {\n          let privateKeys: any = [];\n\n          if(length) {\n            [...Array(length).keys()].forEach(() => {\n              let key = PrivateKey.generateED25519();\n              privateKeys.push(key);\n              publicKeyList.push(key.publicKey);\n            });\n\n            resolve({\n              privateKeys: privateKeys, \n              keyList: new KeyList(publicKeyList, threshold? threshold : null)\n            });\n          } else {\n            resolve({\n              privateKeys: [], \n              keyList: new KeyList([])\n            });\n          }\n        }\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestModule.html":{"url":"modules/RestModule.html","title":"module - RestModule","body":"\n                   \n\n\n\n\n    Modules\n    RestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/rest/rest.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: IHederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                IHederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { RestService } from './rest.service';\nimport { HttpModule } from '@nestjs/axios';\nimport { ConfigModule } from '@nestjs/config';\nimport { IHederaOptions } from '../../types/interfaces/hedera_options.types';\n\n@Module({})\nexport class RestModule {\n  static forRoot(options: IHederaOptions): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule, ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestService.html":{"url":"injectables/RestService.html","title":"injectable - RestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/rest/rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                            \n                                    Private\n                                mirrorNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                call\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: IHederaOptions, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/rest/rest.service.ts:21\n                            \n                        \n\n                \n                    \n                            Rest Transaction Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        IHederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        call\n                        \n                    \n                \n            \n            \n                \n                    \n                    call(endpoint: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.service.ts:42\n                \n            \n\n\n            \n                \n                    Call Mirror Node\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Rest Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:21\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mirrorNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IMirrorNode\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:16\n                        \n                    \n\n            \n                \n                    Mirror Node\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { IMirrorNode } from '../../types/interfaces/mirror.types';\nimport { IHederaOptions } from '../../types/interfaces/hedera_options.types';\n\n\n/**\n * Injectable\n */\n@Injectable()\nexport class RestService {\n\n  /**\n   * Mirror Node\n   */\n  private mirrorNode: IMirrorNode;\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Rest Transactions Service\");\n\n\n  /**\n   * Rest Transaction Service\n   * @param {IHederaOptions} hederaOptions \n   * @param {HttpService} httpService \n   */\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: IHederaOptions,\n    private httpService: HttpService\n  ) {\n    this.mirrorNode = this.hederaOptions.mirrorNode;\n  }\n\n\n  /**\n   * Call Mirror Node\n   * @param {string} endpoint \n   * @returns {any}\n   */\n  async call(endpoint: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let headers = {};\n\n        if(this.mirrorNode.apiKey) {\n          headers = {\n            'authorization': this.mirrorNode.apiKey\n          }\n        }\n\n        let response = await this.httpService\n        .get(\n          `${this.mirrorNode.url}/api/v1/${endpoint}`,\n          { headers: headers }).toPromise();\n  \n        resolve(response?.data);\n      } catch(error) {\n        reject(error);\n      }      \n    });   \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenBalance.html":{"url":"classes/TokenBalance.html","title":"class - TokenBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/models/token_balance.class.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                balance\n                            \n                            \n                                decimals\n                            \n                            \n                                tokenId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        balance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/types/models/token_balance.class.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decimals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/types/models/token_balance.class.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tokenId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/types/models/token_balance.class.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class TokenBalance {\n  @ApiProperty()\n  tokenId: string\n\n  @ApiProperty()\n  balance: number\n\n  @ApiProperty()\n  decimals: number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransactionsModule.html":{"url":"modules/TransactionsModule.html","title":"module - TransactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_imports\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/transactions/transactions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TransactionsService } from './transactions.service';\nimport { TransactionsRestService } from './transactions-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [TransactionsService, TransactionsRestService],\n  exports: [TransactionsService, TransactionsRestService]\n})\nexport class TransactionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsRestService.html":{"url":"injectables/TransactionsRestService.html","title":"injectable - TransactionsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllTransactions\n                            \n                            \n                                getAllTransactionsFromTimestamp\n                            \n                            \n                                getLatestTransactions\n                            \n                            \n                                getScheduledTransaction\n                            \n                            \n                                getTransactionById\n                            \n                            \n                                getTransactionByTimestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions-rest.service.ts:8\n                            \n                        \n\n                \n                    \n                            Transaction Rest Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactions\n                        \n                    \n                \n            \n            \n                \ngetAllTransactions(accountId: string, filters?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:59\n                \n            \n\n\n            \n                \n                    Fetch all transactions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filters\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactionsFromTimestamp\n                        \n                    \n                \n            \n            \n                \ngetAllTransactionsFromTimestamp(timestamp: string, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:24\n                \n            \n\n\n            \n                \n                    Fetch all transactions from timestamp\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timestamp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLatestTransactions\n                        \n                    \n                \n            \n            \n                \ngetLatestTransactions(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:134\n                \n            \n\n\n            \n                \n                    Fetch latest transactions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getScheduledTransaction\n                        \n                    \n                \n            \n            \n                \ngetScheduledTransaction(transactionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:152\n                \n            \n\n\n            \n                \n                    Fetch scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTransactionById\n                        \n                    \n                \n            \n            \n                \ngetTransactionById(transaction_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:116\n                \n            \n\n\n            \n                \n                    Fetch transaction by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transaction_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTransactionByTimestamp\n                        \n                    \n                \n            \n            \n                \ngetTransactionByTimestamp(timestamp: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:98\n                \n            \n\n\n            \n                \n                    Fetch transaction by timestamp\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timestamp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class TransactionsRestService {\n\n  /**\n   * Transaction Rest Service\n   * @param {RestService} restService \n   */\n  constructor(\n    private restService: RestService\n  ) { }\n\n  /**\n   * Fetch all transactions from timestamp\n   * @param {string} timestamp \n   * @param {string} accountId \n   * @returns {any} response\n   */\n  getAllTransactionsFromTimestamp(timestamp: string, accountId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transactions: any = [];\n\n        let response = await this.restService\n          .call(`transactions/?account.id=${accountId}&timestamp=gt:${timestamp}`);\n\n        transactions = transactions.concat(response.transactions);\n\n        while (response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch all transactions\n   * @param {string} accountId \n   * @param {string} filters \n   * @returns {any} response\n   */\n  getAllTransactions(accountId: string, filters?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transactions: any = [];\n        let url = `transactions/?account.id=${accountId}`;\n\n        if (filters) {\n          url += `&${filters}`;\n        }\n\n        let response = await this.restService\n          .call(url);\n\n        transactions = transactions.concat(response.transactions);\n\n        while (response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch transaction by timestamp\n   * @param {string} timestamp \n   * @returns {any} response\n   */\n  getTransactionByTimestamp(timestamp: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`transactions/?timestamp=${timestamp}`);\n\n        resolve(response.transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch transaction by id\n   * @param {string} transaction_id \n   * @returns {any} response\n   */\n  getTransactionById(transaction_id: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`transactions/${transaction_id}`);\n\n        resolve(response.transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch latest transactions\n   * @param {string} accountId \n   * @returns {any} response\n   */\n  getLatestTransactions(accountId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`transactions/?account.id=${accountId}`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch scheduled transaction\n   * @param {string} transactionId \n   * @returns {any} response\n   */\n  getScheduledTransaction(transactionId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`schedules/${transactionId}`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsService.html":{"url":"injectables/TransactionsService.html","title":"injectable - TransactionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createScheduledTransaction\n                            \n                            \n                                    Async\n                                getScheduledTrasaction\n                            \n                            \n                                    Async\n                                getTransactionQuery\n                            \n                            \n                                    Async\n                                getTransactionReceipt\n                            \n                            \n                                    Async\n                                signScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions.service.ts:27\n                            \n                        \n\n                \n                    \n                            Fetch transaction record query\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createScheduledTransaction(transactionToSchedule: Transaction)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:119\n                \n            \n\n\n            \n                \n                    Create scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionToSchedule\n                                    \n                                            Transaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getScheduledTrasaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getScheduledTrasaction(scheduleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:148\n                \n            \n\n\n            \n                \n                    Get scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionQuery(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:43\n                \n            \n\n\n            \n                \n                    Fetch transaction query\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        receipt\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionReceipt(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:65\n                \n            \n\n\n            \n                \n                    Fetch transaction receipt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        receipt\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:89\n                \n            \n\n\n            \n                \n                    Sign scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                            ScheduleId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/transactions/transactions.service.ts:27\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport {\n  PrivateKey,\n  ScheduleCreateTransaction,\n  ScheduleId,\n  ScheduleInfoQuery,\n  ScheduleSignTransaction,\n  Status,\n  Transaction,\n  TransactionId,\n  TransactionReceipt,\n  TransactionReceiptQuery,\n  TransactionRecordQuery,\n  TransactionResponse\n} from '@hashgraph/sdk';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class TransactionsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Transactions Service\");\n\n  /**\n   * Fetch transaction record query\n   * @param {TransactionId} transactionId \n   * @returns {any} receipt\n   */\n  constructor(\n    private clientService: ClientService\n  ) { }\n\n  /**\n   * Fetch transaction query\n   * @param {TransactionId} transactionId \n   * @returns {any} receipt\n   */\n  async getTransactionQuery(transactionId: TransactionId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let transaction = new TransactionRecordQuery()\n          .setTransactionId(transactionId)\n          .setIncludeDuplicates(true);\n\n        let receipt = await transaction.execute(client);\n        resolve(receipt);\n      } catch (error: any) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch transaction receipt\n   * @param {TransactionId} transactionId \n   * @returns {any} receipt\n   */\n  async getTransactionReceipt(transactionId: TransactionId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let transaction = new TransactionReceiptQuery()\n          .setTransactionId(transactionId)\n          .setIncludeDuplicates(true)\n          .setIncludeChildren(true);\n\n        let receipt = await transaction.execute(client);\n        resolve(receipt);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Sign scheduled transaction\n   * @param {ScheduleId} scheduleId \n   * @param {PrivateKey} key \n   * @returns {Status}\n   */\n  async signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = await new ScheduleSignTransaction()\n          .setScheduleId(scheduleId)\n          .freezeWith(client)\n          .sign(key);\n\n        // Signing with the client operator key...\n        const txResponse = await transaction.execute(client);\n\n        // Getting the receipt of the transaction...\n        const receipt = await txResponse.getReceipt(client);\n\n        // Getting the transaction status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Create scheduled transaction\n   * @param {Transaction} transactionToSchedule \n   * @returns {ScheduleId}\n   */\n  async createScheduledTransaction(transactionToSchedule: Transaction): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating a schedule transaction...\n        let scheduledTransaction: ScheduleCreateTransaction = new ScheduleCreateTransaction()\n          .setScheduledTransaction(transactionToSchedule);\n\n        // Signing with the client operator key and submit the transaction to a Hedera network...\n        let txResponse: TransactionResponse = await scheduledTransaction.execute(client);\n\n        // Requesting the receipt of the transaction...\n        let receipt: TransactionReceipt = await txResponse.getReceipt(client);\n\n        // Geting the schedule ID...\n        let scheduleId: ScheduleId | null = receipt.scheduleId;\n        resolve(scheduleId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get scheduled transaction\n   * @param {string} scheduleId \n   * @returns {any} info\n   */\n  async getScheduledTrasaction(scheduleId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const query = new ScheduleInfoQuery()\n          .setScheduleId(scheduleId);\n\n        const info = await query.execute(client);\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/hedera/accounts/accounts-rest.service.ts\n            \n            injectable\n            AccountsRestService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/hedera/accounts/accounts.service.ts\n            \n            injectable\n            AccountsService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/hedera/client/client.service.ts\n            \n            injectable\n            ClientService\n            \n                69 %\n                (9/13)\n            \n        \n        \n            \n                \n                src/hedera/hcs/hcs-rest.service.ts\n            \n            injectable\n            HcsRestService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/hedera/hcs/hcs.service.ts\n            \n            injectable\n            HcsService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hedera.service.ts\n            \n            injectable\n            HederaService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/hedera/hfs/hfs.service.ts\n            \n            injectable\n            HfsService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts-rest.service.ts\n            \n            injectable\n            HtsRestService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts.service.ts\n            \n            injectable\n            HtsService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/hedera/keys/keys.service.ts\n            \n            injectable\n            KeysService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/hedera/rest/rest.service.ts\n            \n            injectable\n            RestService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions-rest.service.ts\n            \n            injectable\n            TransactionsRestService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions.service.ts\n            \n            injectable\n            TransactionsService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/types/interfaces/account_balance.types.ts\n            \n            interface\n            IAccountBalance\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/interfaces/hedera_options.types.ts\n            \n            interface\n            IHederaOptions\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/types/interfaces/mirror.types.ts\n            \n            interface\n            IMirrorNode\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/interfaces/operator.types.ts\n            \n            interface\n            IOperator\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/types/interfaces/private-key-list.types.ts\n            \n            interface\n            IPrivateKeyList\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/interfaces/token_balance.types.ts\n            \n            interface\n            ITokenBalance\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/types/interfaces/transaction_details.types.ts\n            \n            interface\n            ITransactionDetails\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/models/account_balance.class.ts\n            \n            class\n            AccountBalance\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/models/token_balance.class.ts\n            \n            class\n            TokenBalance\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hashgraph/sdk : ^2.18.0\n        \n            @nestjs/axios : ^0.0.7\n        \n            @nestjs/common : ^8.4.5\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.4.6\n        \n            @nestjs/event-emitter : ^1.1.1\n        \n            @nestjs/swagger : ^6.0.5\n        \n            axios : ^0.27.2\n        \n            decimal.js : ^10.3.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.5.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHSuite - Hedera for NestJS\nAn hedera-js-sdk wrapper for NestJS.\nInstallation\nIf you use npm, you shall run:\nnpm install @hsuite/nestjs-hederainstead, if you use yarn:\nyarn add @hsuite/nestjs-hederaImport into your AppModule\nFirst you need to import the HederaModule into your app.module.ts.\nYou can use the forRoot method in order to pass the needed variables to create the Hedera Client and to connect to a Mirror Node, like this:\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { HederaModule } from '@hsuite/nestjs-hedera/lib';\n\n@Module({\n  imports: [\n    HederaModule.forRoot({\n      operators: [\n          {\n            accountId: 'YOUR_OPERATOR_ACCOUNT_ID', \n            privateKey: 'YOUR_OPERATOR_PRIVATE_KEY'\n          }\n        ], \n        mirrorNode: {\n          url: 'https://mainnet-public.mirrornode.hedera.com'\n        }, \n        network: 'mainnet'\n      }),\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\nexport class AppModule {}You can also use NestJS ConfigService, to protect your keys by calling the forRootAsync method, like this:\nHederaModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n  useFactory: async (configService: ConfigService) => ({\n    operators: configService.get>(`operators`),\n    mirrorNode: configService.get(`mirrorNode`),\n    network: configService.get('network')\n  }),\n}),Usage\nOnce imported, you can then import the service you need, and use it.\nFor example:\nimport { Injectable } from '@nestjs/common';\nimport { KeysService } from '@hsuite/nestjs-hedera/lib/hedera/keys/keys.service';\nimport { HcsService } from '@hsuite/nestjs-hedera/lib/hedera/hcs/hcs.service';\nimport { HfsService } from '@hsuite/nestjs-hedera/lib/hedera/hfs/hfs.service';\nimport { AccountsService } from '@hsuite/nestjs-hedera/lib/hedera/accounts/accounts.service';\nimport { TransactionsRestService } from '@hsuite/nestjs-hedera/lib/hedera/transactions/transactions-rest.service';\nimport { TopicId, PrivateKey } from '@hashgraph/sdk';\n\n@Injectable()\nexport class AppService {\n  constructor(\n    private keysService: KeysService,\n    private hcsService: HcsService,\n    private hfsService: HfsService,\n    private transactionsService: TransactionsRestService,\n    private accountsService: AccountsService\n  ) {\n    // creating an hedera account...\n    this.accountsService.createAccount(1, 1).then(account => {\n      console.log(\"account generated\", account.key.toString());\n      // generating a new private key...\n      this.keysService.generateKey().then(key => {\n        // updating the account with the new generated private key...\n        this.accountsService.updateAccount(\n          account.accountId, \n          PrivateKey.fromString(account.key.toString()),\n          key).then(response => {\n            console.log(response);\n          }).catch(error => {\n            console.error(error);\n          });\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(error => {\n      console.error(error);\n    })\n\n    // fetching latest transactions from mirror node for a given accountId...\n    this.transactionsService.getLatestTransactions('YOUR_ACCOUNT_ID_HERE').then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    // subscribing to a HCS Topic...\n    this.hcsService.getMessages(\n      TopicId.fromString('YOUR_HCS_TOPIC_ID_HERE'),\n      async(message) => {\n        let hcsMessage = JSON.parse(Buffer.from(message.contents).toString());\n        console.log(hcsMessage);\n      }\n      ).then(() => {\n        console.log(\"subscribed\");\n      }).catch(error => {\n        console.error(error);\n      })\n\n    // creating an HFS file...\n    this.hfsService.create(\n      PrivateKey.fromString('YOUR_PRIVATE_KEY_HERE'),\n      'YOUR_CONTENT_HERE'\n    ).then((response) => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    })\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HcsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HederaModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HfsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HtsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeysModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_imports\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_providers\n\n\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_exports\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nKeysService \n\nKeysService \n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nAccountsRestService \n\nAccountsRestService \n\nAccountsRestService  -->\n\nAccountsModule->AccountsRestService \n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsRestService\n\nAccountsRestService\n\nAccountsModule -->\n\nAccountsRestService->AccountsModule\n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nHcsRestService \n\nHcsRestService \n\nHcsRestService  -->\n\nHcsModule->HcsRestService \n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsRestService\n\nHcsRestService\n\nHcsModule -->\n\nHcsRestService->HcsModule\n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : \n        \n            Keywords : hsuite, smart-node, nestjs-hedera, hsuite-network, hedera, dex\n        \n            Homepage : https://hsuite.finance\n        \n            Bugs : https://github.com/HbarSuite/nestjs-hedera/issues\n        \n            License : ISC\n        \n            Repository : git+https://github.com/HbarSuite/nestjs-hedera.git\n        \n            Author : HSuite\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
